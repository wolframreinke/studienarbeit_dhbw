!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACT	src/ActHandler.cpp	/^ActHandler* ACT; \/*!< Pointer to ActHandler class needed by signal handler *\/$/;"	v
ActHandler	src/ActHandler.cpp	/^ActHandler::ActHandler( Connection *c, WorldModel *wm, ServerSettings *ss )$/;"	f	class:ActHandler
AgentObject	src/Objects.cpp	/^AgentObject::AgentObject( double dStaminaMax ):PlayerObject( )$/;"	f	class:AgentObject
BallObject	src/Objects.cpp	/^BallObject::BallObject():DynamicObject()$/;"	f	class:BallObject
BasicCoach	src/BasicCoach.cpp	/^BasicCoach::BasicCoach( ActHandler* act, WorldModel *wm, ServerSettings *ss,$/;"	f	class:BasicCoach
Circle	src/Geometry.cpp	/^Circle::Circle( )$/;"	f	class:Circle
Circle	src/Geometry.cpp	/^Circle::Circle( VecPosition pos, double dR )$/;"	f	class:Circle
Connection	src/Connection.cpp	/^Connection::Connection( )$/;"	f	class:Connection
Connection	src/Connection.cpp	/^Connection::Connection(const char *hostname, int port, int iMaxSize)$/;"	f	class:Connection
Deg2Rad	src/Geometry.cpp	/^AngRad Deg2Rad( AngDeg x )$/;"	f
DynamicObject	src/Objects.cpp	/^DynamicObject::DynamicObject( ):Object( )$/;"	f	class:DynamicObject
EDribble	src/Player.cpp	/^bool Player::EDribble(AngDeg& ang)$/;"	f	class:Player
Esuitable	src/Player.cpp	/^int Player::Esuitable()$/;"	f	class:Player
Feature	src/SoccerTypes.cpp	/^Feature::Feature( )$/;"	f	class:Feature
Feature	src/SoccerTypes.cpp	/^Feature::Feature( Time timeSee, Time timeSense, Time timeHear, ObjectT object,$/;"	f	class:Feature
FormationTypeInfo	src/Formations.cpp	/^FormationTypeInfo::FormationTypeInfo( )$/;"	f	class:FormationTypeInfo
Formations	src/Formations.cpp	/^Formations::Formations( const char *strFile, FormationT curFt, int iNr )$/;"	f	class:Formations
GenericValueT	src/GenericValues.cpp	/^GenericValueT::GenericValueT( const char *str, void *vAddr, GenericValueKind t)$/;"	f	class:GenericValueT
GenericValues	src/GenericValues.cpp	/^GenericValues::GenericValues( char *strName, int iMaxValues )$/;"	f	class:GenericValues
Line	src/Geometry.cpp	/^Line::Line( double dA, double dB, double dC )$/;"	f	class:Line
Log	src/Logger.cpp	/^Logger Log;          \/*!<Logger instantation that can be used by all classes *\/$/;"	v
LogDraw	src/Logger.cpp	/^Logger LogDraw;      \/*!<Drawing logger instantation for all classes         *\/$/;"	v
Logger	src/Logger.cpp	/^Logger::Logger( ostream& o, int iMin, int iMax )$/;"	f	class:Logger
Object	src/Objects.cpp	/^Object::Object( )$/;"	f	class:Object
ObjectNames	src/SoccerTypes.cpp	/^const char * ObjectNames[] =$/;"	v
PLAYER_CNT	src/BasicCoach.cpp	60;"	d	file:
Player	src/Player.cpp	/^Player::Player( ActHandler* act, WorldModel *wm, ServerSettings *ss,$/;"	f	class:Player
PlayerObject	src/Objects.cpp	/^PlayerObject::PlayerObject( ):DynamicObject( )$/;"	f	class:PlayerObject
PlayerSettings	src/PlayerSettings.cpp	/^PlayerSettings::PlayerSettings( ) : GenericValues("PlayerSettings", 27)$/;"	f	class:PlayerSettings
PlayerTypeInfo	src/Formations.cpp	/^PlayerTypeInfo::PlayerTypeInfo( PlayerT pt, double dAttrX, double dAttrY,$/;"	f	class:PlayerTypeInfo
PlayerTypeInfo	src/Formations.cpp	/^PlayerTypeInfo::PlayerTypeInfo()$/;"	f	class:PlayerTypeInfo
Rad2Deg	src/Geometry.cpp	/^AngDeg Rad2Deg( AngRad x )$/;"	f
Rect	src/Geometry.cpp	/^Rect::Rect( VecPosition pos, VecPosition pos2 )$/;"	f	class:Rect
SenseHandler	src/SenseHandler.cpp	/^SenseHandler::SenseHandler( Connection *c, WorldModel *wm, ServerSettings *ss,$/;"	f	class:SenseHandler
ServerSettings	src/ServerSettings.cpp	/^ServerSettings::ServerSettings( ):GenericValues( "ServerSettings", 136 )$/;"	f	class:ServerSettings
SoccerCommand	src/SoccerTypes.cpp	/^SoccerCommand::SoccerCommand( CommandT com, char *msg )$/;"	f	class:SoccerCommand
SoccerCommand	src/SoccerTypes.cpp	/^SoccerCommand::SoccerCommand( CommandT com, double d1, double d2, double d3 )$/;"	f	class:SoccerCommand
Stamina	src/Objects.cpp	/^Stamina::Stamina( double dSta, double dEff, double dRec )$/;"	f	class:Stamina
SynchSee	src/WorldModel.cpp	/^  SoccerCommand   WorldModel::SynchSee                (                                  )$/;"	f	class:WorldModel
Time	src/SoccerTypes.cpp	/^Time::Time( int iTime, int iStopped )$/;"	f	class:Time
VecPosition	src/Geometry.cpp	/^VecPosition::VecPosition( double x, double y, CoordSystemT cs )$/;"	f	class:VecPosition
WorldModel	src/WorldModel.cpp	/^WorldModel::WorldModel( ServerSettings *ss, PlayerSettings *ps, $/;"	f	class:WorldModel
abcFormula	src/Geometry.cpp	/^int Geometry::abcFormula(double a, double b, double c, double *s1, double *s2)$/;"	f	class:Geometry
accelerateBallToVelocity	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::accelerateBallToVelocity( VecPosition velDes )$/;"	f	class:BasicPlayer
acosDeg	src/Geometry.cpp	/^AngDeg acosDeg( double x )$/;"	f
addLogLevel	src/Logger.cpp	/^bool  Logger::addLogLevel( int iLevel )$/;"	f	class:Logger
addLogRange	src/Logger.cpp	/^bool  Logger::addLogRange( int iMin, int iMax )$/;"	f	class:Logger
addOneToGoalDiff	src/WorldModel.cpp	/^int WorldModel::addOneToGoalDiff( )$/;"	f	class:WorldModel
addSetting	src/GenericValues.cpp	/^bool GenericValues::addSetting( const char *strName, void *vAddress,$/;"	f	class:GenericValues
addToTime	src/SoccerTypes.cpp	/^bool Time::addToTime( int iCycles )$/;"	f	class:Time
alignNeckWithBody	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::alignNeckWithBody( )$/;"	f	class:BasicPlayer
amIAgentToSaySomething	src/Player.cpp	/^bool Player::amIAgentToSaySomething( SoccerCommand socPri )$/;"	f	class:Player
analyzeChangePlayerTypeMessage	src/SenseHandler.cpp	/^bool SenseHandler::analyzeChangePlayerTypeMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeCheckBall	src/SenseHandler.cpp	/^bool SenseHandler::analyzeCheckBall( char *strMsg )$/;"	f	class:SenseHandler
analyzeCoachMessage	src/SenseHandler.cpp	/^bool SenseHandler::analyzeCoachMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeFullStateMessage	src/SenseHandler.cpp	/^bool SenseHandler::analyzeFullStateMessage( char *strMsg )  $/;"	f	class:SenseHandler
analyzeHearMessage	src/SenseHandler.cpp	/^bool SenseHandler::analyzeHearMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeInitMessage	src/SenseHandler.cpp	/^bool SenseHandler::analyzeInitMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeMessage	src/SenseHandler.cpp	/^bool SenseHandler::analyzeMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzePlayerMessage	src/SenseHandler.cpp	/^bool SenseHandler::analyzePlayerMessage( int iTime, char *strMsg )$/;"	f	class:SenseHandler
analyzePlayerParamMessage	src/SenseHandler.cpp	/^bool SenseHandler::analyzePlayerParamMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzePlayerTypeMessage	src/SenseHandler.cpp	/^bool SenseHandler::analyzePlayerTypeMessage ( char *strMsg )$/;"	f	class:SenseHandler
analyzeSeeGlobalMessage	src/SenseHandler.cpp	/^bool SenseHandler::analyzeSeeGlobalMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeSeeMessage	src/SenseHandler.cpp	/^bool SenseHandler::analyzeSeeMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeSenseMessage	src/SenseHandler.cpp	/^bool SenseHandler::analyzeSenseMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeServerParamMessage	src/SenseHandler.cpp	/^bool SenseHandler::analyzeServerParamMessage( char *strMsg )$/;"	f	class:SenseHandler
asinDeg	src/Geometry.cpp	/^AngDeg asinDeg( double x )$/;"	f
atan2Deg	src/Geometry.cpp	/^double atan2Deg( double x, double y )$/;"	f
atanDeg	src/Geometry.cpp	/^AngDeg atanDeg( double x )$/;"	f
attackerMainLoop	src/Player.cpp	/^SoccerCommand Player::attackerMainLoop( )$/;"	f	class:Player
averageParticles	src/WorldModelUpdate.cpp	/^VecPosition WorldModel::averageParticles( VecPosition posArray[], int iLength )$/;"	f	class:WorldModel
calculateAngleAgentWithPos	src/WorldModelUpdate.cpp	/^AngDeg WorldModel::calculateAngleAgentWithPos( VecPosition pos )$/;"	f	class:WorldModel
calculatePosAgentWith2Flags	src/WorldModelUpdate.cpp	/^VecPosition WorldModel::calculatePosAgentWith2Flags( ObjectT objFlag1,$/;"	f	class:WorldModel
calculateStateAgent	src/WorldModelUpdate.cpp	/^bool WorldModel::calculateStateAgent( VecPosition *posGlobal,$/;"	f	class:WorldModel
calculateStateAgent2	src/WorldModelUpdate.cpp	/^bool WorldModel::calculateStateAgent2( VecPosition *posGlobal,$/;"	f	class:WorldModel
calculateStateAgent3	src/WorldModelUpdate.cpp	/^bool WorldModel::calculateStateAgent3( VecPosition *posGlobal,$/;"	f	class:WorldModel
calculateStateBall	src/WorldModelUpdate.cpp	/^bool WorldModel::calculateStateBall( VecPosition *posGlobal,$/;"	f	class:WorldModel
calculateStatePlayer	src/WorldModelUpdate.cpp	/^bool WorldModel::calculateStatePlayer( ObjectT o, VecPosition *posGlobal,$/;"	f	class:WorldModel
calculateVelocityDynamicObject	src/WorldModelUpdate.cpp	/^VecPosition WorldModel::calculateVelocityDynamicObject( ObjectT o )$/;"	f	class:WorldModel
catchBall	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::catchBall()$/;"	f	class:BasicPlayer
checkParticlesAgent	src/WorldModelUpdate.cpp	/^int WorldModel::checkParticlesAgent( AngDeg angGlobalNeck  )$/;"	f	class:WorldModel
checkParticlesBall	src/WorldModelUpdate.cpp	/^void WorldModel::checkParticlesBall( VecPosition posArray[],$/;"	f	class:WorldModel
clearBall	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::clearBall( ClearBallT type, SideT s,AngDeg *angMax )$/;"	f	class:BasicPlayer
collideWithBall	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::collideWithBall( )$/;"	f	class:BasicPlayer
communicate	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::communicate( char *str )$/;"	f	class:BasicPlayer
coneDribble	src/Player.cpp	/^bool Player::coneDribble(AngDeg& ang){$/;"	f	class:Player
connect	src/Connection.cpp	/^bool Connection::connect(const char *host, int port )$/;"	f	class:Connection
coordinateWith	src/WorldModelHighLevel.cpp	/^bool WorldModel::coordinateWith( ObjectT obj )$/;"	f	class:WorldModel
cosDeg	src/Geometry.cpp	/^double cosDeg( AngDeg x )$/;"	f
createInterceptFeatures	src/WorldModelHighLevel.cpp	/^void WorldModel::createInterceptFeatures( )$/;"	f	class:WorldModel
dashToPoint	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::dashToPoint( VecPosition pos, int iCycles )$/;"	f	class:BasicPlayer
deMeer5	src/PlayerTeams.cpp	/^SoccerCommand Player::deMeer5(  )$/;"	f	class:Player
deMeer5_attacker	src/PlayerTeams.cpp	/^SoccerCommand Player::deMeer5_attacker()$/;"	f	class:Player
deMeer5_defender	src/PlayerTeams.cpp	/^SoccerCommand Player::deMeer5_defender( )$/;"	f	class:Player
deMeer5_goalie	src/PlayerTeams.cpp	/^SoccerCommand Player::deMeer5_goalie(  )$/;"	f	class:Player
deMeer5_midfielder	src/PlayerTeams.cpp	/^SoccerCommand Player::deMeer5_midfielder()$/;"	f	class:Player
defendGoalLine	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::defendGoalLine( double dDist )$/;"	f	class:BasicPlayer
defenderMainLoop	src/Player.cpp	/^SoccerCommand Player::defenderMainLoop( )$/;"	f	class:Player
directPass	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::directPass( VecPosition pos, PassT passType)$/;"	f	class:BasicPlayer
directTowards	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::directTowards( VecPosition posTurnTo,$/;"	f	class:BasicPlayer
disconnect	src/Connection.cpp	/^void Connection::disconnect( void )$/;"	f	class:Connection
drawCoordinationGraph	src/WorldModel.cpp	/^void WorldModel::drawCoordinationGraph( )$/;"	f	class:WorldModel
dribble	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::dribble( AngDeg ang, DribbleT dribbleT )$/;"	f	class:BasicPlayer
emptyQueue	src/ActHandler.cpp	/^void ActHandler::emptyQueue( )$/;"	f	class:ActHandler
executeStringCommand	src/BasicCoach.cpp	/^bool BasicCoach::executeStringCommand( char *str)$/;"	f	class:BasicCoach
executeStringCommand	src/Player.cpp	/^bool Player::executeStringCommand( char *str)$/;"	f	class:Player
freezeBall	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::freezeBall( )$/;"	f	class:BasicPlayer
getACoefficient	src/Geometry.cpp	/^double Line::getACoefficient() const$/;"	f	class:Line
getActiveInterceptionPointBall	src/BasicPlayer.cpp	/^VecPosition BasicPlayer::getActiveInterceptionPointBall( int *iCyclesBall,$/;"	f	class:BasicPlayer
getActualKickPowerRate	src/WorldModelHighLevel.cpp	/^double WorldModel::getActualKickPowerRate( )$/;"	f	class:WorldModel
getActualTurnAngle	src/WorldModelHighLevel.cpp	/^AngDeg WorldModel::getActualTurnAngle( AngDeg angTurn,double dSpeed,ObjectT o )$/;"	f	class:WorldModel
getAgentArmExpires	src/WorldModel.cpp	/^int WorldModel::getAgentArmExpires( )$/;"	f	class:WorldModel
getAgentArmMovable	src/WorldModel.cpp	/^bool WorldModel::getAgentArmMovable( )$/;"	f	class:WorldModel
getAgentArmPosition	src/WorldModel.cpp	/^VecPosition WorldModel::getAgentArmPosition( )$/;"	f	class:WorldModel
getAgentBodyAngleRelToNeck	src/WorldModel.cpp	/^AngDeg WorldModel::getAgentBodyAngleRelToNeck( ) const$/;"	f	class:WorldModel
getAgentEffort	src/WorldModel.cpp	/^double WorldModel::getAgentEffort( ) const$/;"	f	class:WorldModel
getAgentGlobalBodyAngle	src/WorldModel.cpp	/^AngDeg WorldModel::getAgentGlobalBodyAngle(  )$/;"	f	class:WorldModel
getAgentGlobalNeckAngle	src/WorldModel.cpp	/^AngDeg WorldModel::getAgentGlobalNeckAngle(  ) const$/;"	f	class:WorldModel
getAgentGlobalPosition	src/WorldModel.cpp	/^VecPosition WorldModel::getAgentGlobalPosition( ) const$/;"	f	class:WorldModel
getAgentGlobalVelocity	src/WorldModel.cpp	/^VecPosition WorldModel::getAgentGlobalVelocity( ) const$/;"	f	class:WorldModel
getAgentIndex	src/WorldModel.cpp	/^int WorldModel::getAgentIndex( ) const$/;"	f	class:WorldModel
getAgentObjectType	src/WorldModel.cpp	/^ObjectT WorldModel::getAgentObjectType( ) const$/;"	f	class:WorldModel
getAgentSpeed	src/WorldModel.cpp	/^double WorldModel::getAgentSpeed( ) const$/;"	f	class:WorldModel
getAgentStamina	src/WorldModel.cpp	/^Stamina WorldModel::getAgentStamina( ) const$/;"	f	class:WorldModel
getAgentTiredNess	src/WorldModel.cpp	/^TiredNessT WorldModel::getAgentTiredNess( ) const$/;"	f	class:WorldModel
getAgentViewAngle	src/WorldModel.cpp	/^ViewAngleT WorldModel::getAgentViewAngle( ) const$/;"	f	class:WorldModel
getAgentViewFrequency	src/WorldModel.cpp	/^double WorldModel::getAgentViewFrequency( ViewAngleT va, ViewQualityT vq )$/;"	f	class:WorldModel
getAgentViewQuality	src/WorldModel.cpp	/^ViewQualityT WorldModel::getAgentViewQuality( ) const$/;"	f	class:WorldModel
getAngleForTurn	src/WorldModelHighLevel.cpp	/^AngDeg WorldModel::getAngleForTurn( AngDeg angDesiredAngle, double dSpeed,$/;"	f	class:WorldModel
getAngleFromDirection	src/SoccerTypes.cpp	/^AngDeg SoccerTypes::getAngleFromDirection( DirectionT dir )$/;"	f	class:SoccerTypes
getArea	src/Geometry.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getArmExpires	src/Objects.cpp	/^int AgentObject::getArmExpires( ) const$/;"	f	class:AgentObject
getArmMovable	src/Objects.cpp	/^bool AgentObject::getArmMovable( ) const$/;"	f	class:AgentObject
getAttrX	src/Formations.cpp	/^double PlayerTypeInfo::getAttrX( ) const$/;"	f	class:PlayerTypeInfo
getAttrY	src/Formations.cpp	/^double PlayerTypeInfo::getAttrY( ) const$/;"	f	class:PlayerTypeInfo
getAudioCutDist	src/ServerSettings.cpp	/^double ServerSettings::getAudioCutDist( ) const$/;"	f	class:ServerSettings
getBCoefficient	src/Geometry.cpp	/^double Line::getBCoefficient() const$/;"	f	class:Line
getBackDashRate	src/ServerSettings.cpp	/^double ServerSettings::getBackDashRate() const$/;"	f	class:ServerSettings
getBallAccelMax	src/ServerSettings.cpp	/^double ServerSettings::getBallAccelMax( ) const$/;"	f	class:ServerSettings
getBallConfThr	src/PlayerSettings.cpp	/^double PlayerSettings::getBallConfThr( ) const$/;"	f	class:PlayerSettings
getBallDecay	src/ServerSettings.cpp	/^double ServerSettings::getBallDecay( ) const$/;"	f	class:ServerSettings
getBallDirection	src/WorldModel.cpp	/^AngDeg WorldModel::getBallDirection()$/;"	f	class:WorldModel
getBallPos	src/WorldModel.cpp	/^VecPosition  WorldModel::getBallPos()$/;"	f	class:WorldModel
getBallRand	src/ServerSettings.cpp	/^double ServerSettings::getBallRand( ) const$/;"	f	class:ServerSettings
getBallSize	src/ServerSettings.cpp	/^double ServerSettings::getBallSize( ) const$/;"	f	class:ServerSettings
getBallSpeed	src/WorldModel.cpp	/^double WorldModel::getBallSpeed()$/;"	f	class:WorldModel
getBallSpeedMax	src/ServerSettings.cpp	/^double ServerSettings::getBallSpeedMax( ) const$/;"	f	class:ServerSettings
getBallStatusFromStr	src/SoccerTypes.cpp	/^BallStatusT SoccerTypes::getBallStatusFromStr( char* str )$/;"	f	class:SoccerTypes
getBallStatusStr	src/SoccerTypes.cpp	/^char* SoccerTypes::getBallStatusStr( BallStatusT bs )$/;"	f	class:SoccerTypes
getBallWeight	src/ServerSettings.cpp	/^double ServerSettings::getBallWeight( ) const$/;"	f	class:ServerSettings
getBehindBall	src/Formations.cpp	/^bool PlayerTypeInfo::getBehindBall( ) const$/;"	f	class:PlayerTypeInfo
getBisectorTwoAngles	src/Geometry.cpp	/^AngDeg getBisectorTwoAngles( AngDeg angMin, AngDeg angMax )$/;"	f
getBodyAngleRelToNeck	src/Objects.cpp	/^AngDeg AgentObject::getBodyAngleRelToNeck( ) const$/;"	f	class:AgentObject
getCCoefficient	src/Geometry.cpp	/^double Line::getCCoefficient() const$/;"	f	class:Line
getCatchBanCycle	src/ServerSettings.cpp	/^int ServerSettings::getCatchBanCycle( ) const$/;"	f	class:ServerSettings
getCatchProbability	src/ServerSettings.cpp	/^double ServerSettings::getCatchProbability( ) const$/;"	f	class:ServerSettings
getCatchableAreaL	src/ServerSettings.cpp	/^double ServerSettings::getCatchableAreaL( ) const$/;"	f	class:ServerSettings
getCatchableAreaW	src/ServerSettings.cpp	/^double ServerSettings::getCatchableAreaW( ) const$/;"	f	class:ServerSettings
getCenter	src/Geometry.cpp	/^VecPosition Circle::getCenter()$/;"	f	class:Circle
getChangeViewCommand	src/WorldModel.cpp	/^SoccerCommand WorldModel::getChangeViewCommand( )$/;"	f	class:WorldModel
getCheckBallStatus	src/WorldModel.cpp	/^BallStatusT WorldModel::getCheckBallStatus( ) const$/;"	f	class:WorldModel
getCircleIntersectionPoints	src/Geometry.cpp	/^int Line::getCircleIntersectionPoints( Circle circle,$/;"	f	class:Line
getCircumference	src/Geometry.cpp	/^double Circle::getCircumference()$/;"	f	class:Circle
getCkickMargin	src/ServerSettings.cpp	/^double ServerSettings::getCkickMargin( ) const$/;"	f	class:ServerSettings
getClangAdviceWin	src/ServerSettings.cpp	/^int ServerSettings::getClangAdviceWin( ) const$/;"	f	class:ServerSettings
getClangDefineWin	src/ServerSettings.cpp	/^int ServerSettings::getClangDefineWin( ) const$/;"	f	class:ServerSettings
getClangInfoWin	src/ServerSettings.cpp	/^int ServerSettings::getClangInfoWin( ) const$/;"	f	class:ServerSettings
getClangMessDelay	src/ServerSettings.cpp	/^int ServerSettings::getClangMessDelay( ) const$/;"	f	class:ServerSettings
getClangMessPerCycle	src/ServerSettings.cpp	/^int ServerSettings::getClangMessPerCycle( ) const$/;"	f	class:ServerSettings
getClangMetaWin	src/ServerSettings.cpp	/^int ServerSettings::getClangMetaWin( ) const$/;"	f	class:ServerSettings
getClangWinSize	src/ServerSettings.cpp	/^int ServerSettings::getClangWinSize( ) const$/;"	f	class:ServerSettings
getClassName	src/GenericValues.cpp	/^char* GenericValues::getClassName( )$/;"	f	class:GenericValues
getClearBallDist	src/PlayerSettings.cpp	/^double PlayerSettings::getClearBallDist( ) const$/;"	f	class:PlayerSettings
getClearBallOppMaxDist	src/PlayerSettings.cpp	/^double PlayerSettings::getClearBallOppMaxDist( ) const$/;"	f	class:PlayerSettings
getClearBallToSideAngle	src/PlayerSettings.cpp	/^double PlayerSettings::getClearBallToSideAngle( ) const$/;"	f	class:PlayerSettings
getClosestInSetTo	src/WorldModelHighLevel.cpp	/^ObjectT WorldModel::getClosestInSetTo( ObjectSetT set, Line l,$/;"	f	class:WorldModel
getClosestInSetTo	src/WorldModelHighLevel.cpp	/^ObjectT WorldModel::getClosestInSetTo( ObjectSetT set, ObjectT objTarget,$/;"	f	class:WorldModel
getClosestInSetTo	src/WorldModelHighLevel.cpp	/^ObjectT WorldModel::getClosestInSetTo( ObjectSetT set, VecPosition pos,$/;"	f	class:WorldModel
getClosestPlayerInFormationTo	src/WorldModelHighLevel.cpp	/^int WorldModel::getClosestPlayerInFormationTo( VecPosition pos, $/;"	f	class:WorldModel
getClosestRelativeInSet	src/WorldModelHighLevel.cpp	/^ObjectT WorldModel::getClosestRelativeInSet( ObjectSetT set, double *dDist )$/;"	f	class:WorldModel
getCoachPort	src/ServerSettings.cpp	/^int ServerSettings::getCoachPort( ) const$/;"	f	class:ServerSettings
getCommand	src/SoccerTypes.cpp	/^SoccerCommand Feature::getCommand( )$/;"	f	class:Feature
getCommandStr	src/SoccerTypes.cpp	/^char* SoccerTypes::getCommandStr( CommandT com )$/;"	f	class:SoccerTypes
getCommandString	src/SoccerTypes.cpp	/^bool SoccerCommand::getCommandString( char *str, ServerSettings *ss )$/;"	f	class:SoccerCommand
getCommunicationString	src/WorldModel.cpp	/^char* WorldModel::getCommunicationString( )$/;"	f	class:WorldModel
getConeWidth	src/PlayerSettings.cpp	/^double PlayerSettings::getConeWidth( ) const$/;"	f	class:PlayerSettings
getConfidence	src/Objects.cpp	/^double Object::getConfidence( Time time )$/;"	f	class:Object
getConfidence	src/WorldModel.cpp	/^double WorldModel::getConfidence( ObjectT o)$/;"	f	class:WorldModel
getCurrentCycle	src/WorldModel.cpp	/^int WorldModel::getCurrentCycle()$/;"	f	class:WorldModel
getCurrentPosHome	src/Formations.cpp	/^VecPosition Formations::getCurrentPosHome(int iPlayer)$/;"	f	class:Formations
getCurrentTime	src/WorldModel.cpp	/^Time WorldModel::getCurrentTime()$/;"	f	class:WorldModel
getCyclesCatchWait	src/PlayerSettings.cpp	/^int PlayerSettings::getCyclesCatchWait( ) const$/;"	f	class:PlayerSettings
getDashAngleStep	src/ServerSettings.cpp	/^double ServerSettings::getDashAngleStep() const$/;"	f	class:ServerSettings
getDashPowerRate	src/ServerSettings.cpp	/^double ServerSettings::getDashPowerRate( ) const$/;"	f	class:ServerSettings
getDashPowerRate	src/WorldModel.cpp	/^double WorldModel::getDashPowerRate( ObjectT obj )$/;"	f	class:WorldModel
getDashPowerRateDeltaMax	src/ServerSettings.cpp	/^double ServerSettings::getDashPowerRateDeltaMax( ) const$/;"	f	class:ServerSettings
getDashPowerRateDeltaMin	src/ServerSettings.cpp	/^double ServerSettings::getDashPowerRateDeltaMin( ) const$/;"	f	class:ServerSettings
getDeadBallPosition	src/Player.cpp	/^VecPosition Player::getDeadBallPosition(  )$/;"	f	class:Player
getDirection	src/Geometry.cpp	/^AngDeg VecPosition::getDirection( ) const$/;"	f	class:VecPosition
getDirectionOfWidestAngle	src/WorldModelHighLevel.cpp	/^AngDeg WorldModel::getDirectionOfWidestAngle(VecPosition posOrg, AngDeg angMin,$/;"	f	class:WorldModel
getDistanceTo	src/Geometry.cpp	/^double VecPosition::getDistanceTo( const VecPosition p )$/;"	f	class:VecPosition
getDistanceWithPoint	src/Geometry.cpp	/^double Line::getDistanceWithPoint( VecPosition pos )$/;"	f	class:Line
getDribbleAngThr	src/PlayerSettings.cpp	/^double PlayerSettings::getDribbleAngThr( ) const$/;"	f	class:PlayerSettings
getDribblePoint	src/BasicPlayer.cpp	/^VecPosition BasicPlayer::getDribblePoint( DribbleT dribble, double *dDist )$/;"	f	class:BasicPlayer
getDropBallTime	src/ServerSettings.cpp	/^int ServerSettings::getDropBallTime( ) const$/;"	f	class:ServerSettings
getEffectiveMaxSpeed	src/WorldModel.cpp	/^double WorldModel::getEffectiveMaxSpeed( ObjectT obj, bool bWithNoise )$/;"	f	class:WorldModel
getEffort	src/Objects.cpp	/^double Stamina::getEffort() const$/;"	f	class:Stamina
getEffortDec	src/ServerSettings.cpp	/^double ServerSettings::getEffortDec( ) const$/;"	f	class:ServerSettings
getEffortDecThr	src/ServerSettings.cpp	/^double ServerSettings::getEffortDecThr( ) const$/;"	f	class:ServerSettings
getEffortInc	src/ServerSettings.cpp	/^double ServerSettings::getEffortInc( ) const$/;"	f	class:ServerSettings
getEffortIncThr	src/ServerSettings.cpp	/^double ServerSettings::getEffortIncThr( ) const$/;"	f	class:ServerSettings
getEffortMax	src/ServerSettings.cpp	/^double ServerSettings::getEffortMax(  ) const$/;"	f	class:ServerSettings
getEffortMax	src/WorldModel.cpp	/^double WorldModel::getEffortMax( ObjectT obj )$/;"	f	class:WorldModel
getEffortMaxDeltaFactor	src/ServerSettings.cpp	/^double ServerSettings::getEffortMaxDeltaFactor( ) const$/;"	f	class:ServerSettings
getEffortMin	src/ServerSettings.cpp	/^double ServerSettings::getEffortMin( ) const$/;"	f	class:ServerSettings
getEffortMinDeltaFactor	src/ServerSettings.cpp	/^double ServerSettings::getEffortMinDeltaFactor( ) const$/;"	f	class:ServerSettings
getElapsedTime	src/Logger.cpp	/^double Timing::getElapsedTime( int iFactor )$/;"	f	class:Timing
getEndSpeedForPass	src/BasicPlayer.cpp	/^double BasicPlayer::getEndSpeedForPass( ObjectT o, VecPosition posPass )$/;"	f	class:BasicPlayer
getEndSpeedFromFirstSpeed	src/WorldModelHighLevel.cpp	/^double WorldModel::getEndSpeedFromFirstSpeed(double dFirstSpeed,double dCycles)$/;"	f	class:WorldModel
getExtraStamina	src/ServerSettings.cpp	/^double ServerSettings::getExtraStamina( ) const$/;"	f	class:ServerSettings
getExtraStaminaDeltaMax	src/ServerSettings.cpp	/^double ServerSettings::getExtraStaminaDeltaMax( ) const$/;"	f	class:ServerSettings
getExtraStaminaDeltaMin	src/ServerSettings.cpp	/^double ServerSettings::getExtraStaminaDeltaMin( ) const$/;"	f	class:ServerSettings
getFastPassEndSpeed	src/PlayerSettings.cpp	/^double PlayerSettings::getFastPassEndSpeed( ) const$/;"	f	class:PlayerSettings
getFastestInSetTo	src/WorldModelHighLevel.cpp	/^ObjectT WorldModel::getFastestInSetTo( ObjectSetT set, ObjectT obj,$/;"	f	class:WorldModel
getFastestInSetTo	src/WorldModelHighLevel.cpp	/^ObjectT WorldModel::getFastestInSetTo( ObjectSetT set, VecPosition pos,$/;"	f	class:WorldModel
getFeature	src/WorldModel.cpp	/^Feature WorldModel::getFeature( FeatureT type )$/;"	f	class:WorldModel
getFirstEmptySpotInSet	src/WorldModelHighLevel.cpp	/^ObjectT WorldModel::getFirstEmptySpotInSet( ObjectSetT set, int iUnknownPlayer)$/;"	f	class:WorldModel
getFirstGeomSeries	src/Geometry.cpp	/^double Geometry::getFirstGeomSeries( double dSum, double dRatio, double dLength)$/;"	f	class:Geometry
getFirstInfGeomSeries	src/Geometry.cpp	/^double Geometry::getFirstInfGeomSeries( double dSum, double dRatio )$/;"	f	class:Geometry
getFirstSpeedFromDist	src/WorldModelHighLevel.cpp	/^double WorldModel::getFirstSpeedFromDist( double dDist, double dCycles, double$/;"	f	class:WorldModel
getFirstSpeedFromEndSpeed	src/WorldModelHighLevel.cpp	/^double WorldModel::getFirstSpeedFromEndSpeed( double dEndSpeed, double dCycles,$/;"	f	class:WorldModel
getForbidKickOffOffside	src/ServerSettings.cpp	/^bool ServerSettings::getForbidKickOffOffside( ) const$/;"	f	class:ServerSettings
getFormation	src/Formations.cpp	/^FormationT Formations::getFormation( ) const$/;"	f	class:Formations
getFormationType	src/Formations.cpp	/^FormationT FormationTypeInfo::getFormationType( ) const$/;"	f	class:FormationTypeInfo
getFractionWaitNoSee	src/PlayerSettings.cpp	/^double PlayerSettings::getFractionWaitNoSee( ) const$/;"	f	class:PlayerSettings
getFractionWaitSeeBegin	src/PlayerSettings.cpp	/^double PlayerSettings::getFractionWaitSeeBegin( ) const$/;"	f	class:PlayerSettings
getFractionWaitSeeEnd	src/PlayerSettings.cpp	/^double PlayerSettings::getFractionWaitSeeEnd( ) const$/;"	f	class:PlayerSettings
getFullStateLeft	src/ServerSettings.cpp	/^bool ServerSettings::getFullStateLeft( ) const$/;"	f	class:ServerSettings
getFullStateRight	src/ServerSettings.cpp	/^bool ServerSettings::getFullStateRight( ) const$/;"	f	class:ServerSettings
getFurthestInSetTo	src/WorldModelHighLevel.cpp	/^ObjectT WorldModel::getFurthestInSetTo( ObjectSetT set, ObjectT objTarget,$/;"	f	class:WorldModel
getFurthestRelativeInSet	src/WorldModelHighLevel.cpp	/^ObjectT WorldModel::getFurthestRelativeInSet( ObjectSetT set, double *dDist  )$/;"	f	class:WorldModel
getGlobalAngle	src/Objects.cpp	/^AngDeg FixedObject::getGlobalAngle( SideT s )$/;"	f	class:FixedObject
getGlobalAngle	src/WorldModel.cpp	/^AngDeg WorldModel::getGlobalAngle( ObjectT o )$/;"	f	class:WorldModel
getGlobalAngleLine	src/SoccerTypes.cpp	/^AngDeg SoccerTypes::getGlobalAngleLine( ObjectT o , SideT s )$/;"	f	class:SoccerTypes
getGlobalArm	src/Objects.cpp	/^AngDeg PlayerObject::getGlobalArm( ) const$/;"	f	class:PlayerObject
getGlobalArmDirection	src/WorldModel.cpp	/^AngDeg WorldModel::getGlobalArmDirection( ObjectT o )$/;"	f	class:WorldModel
getGlobalArmPosition	src/Objects.cpp	/^VecPosition AgentObject::getGlobalArmPosition( ) const$/;"	f	class:AgentObject
getGlobalBodyAngle	src/Objects.cpp	/^AngDeg PlayerObject::getGlobalBodyAngle( )  const$/;"	f	class:PlayerObject
getGlobalBodyAngle	src/WorldModel.cpp	/^AngDeg WorldModel::getGlobalBodyAngle( ObjectT o )$/;"	f	class:WorldModel
getGlobalBodyAngleLastSee	src/Objects.cpp	/^AngDeg PlayerObject::getGlobalBodyAngleLastSee( )  const$/;"	f	class:PlayerObject
getGlobalBodyAngleLastSee	src/WorldModel.cpp	/^AngDeg WorldModel::getGlobalBodyAngleLastSee( ObjectT o )$/;"	f	class:WorldModel
getGlobalNeckAngle	src/Objects.cpp	/^AngDeg PlayerObject::getGlobalNeckAngle( )  const$/;"	f	class:PlayerObject
getGlobalNeckAngle	src/WorldModel.cpp	/^AngDeg WorldModel::getGlobalNeckAngle( ObjectT o )$/;"	f	class:WorldModel
getGlobalPosition	src/Objects.cpp	/^VecPosition FixedObject::getGlobalPosition( SideT s, double dGoalWidth )const$/;"	f	class:FixedObject
getGlobalPosition	src/Objects.cpp	/^VecPosition Object::getGlobalPosition() const$/;"	f	class:Object
getGlobalPosition	src/WorldModel.cpp	/^VecPosition WorldModel::getGlobalPosition( ObjectT o )$/;"	f	class:WorldModel
getGlobalPositionFlag	src/SoccerTypes.cpp	/^VecPosition SoccerTypes::getGlobalPositionFlag( ObjectT o, SideT s,$/;"	f	class:SoccerTypes
getGlobalPositionLastSee	src/Objects.cpp	/^VecPosition Object::getGlobalPositionLastSee() const$/;"	f	class:Object
getGlobalPositionLastSee	src/WorldModel.cpp	/^VecPosition WorldModel::getGlobalPositionLastSee( ObjectT o )$/;"	f	class:WorldModel
getGlobalVelocity	src/Objects.cpp	/^VecPosition DynamicObject::getGlobalVelocity( ) const$/;"	f	class:DynamicObject
getGlobalVelocity	src/WorldModel.cpp	/^VecPosition WorldModel::getGlobalVelocity( ObjectT o )$/;"	f	class:WorldModel
getGlobalVelocityLastSee	src/Objects.cpp	/^VecPosition DynamicObject::getGlobalVelocityLastSee ( )   const$/;"	f	class:DynamicObject
getGlobalVelocityLastSee	src/WorldModel.cpp	/^VecPosition WorldModel::getGlobalVelocityLastSee( ObjectT o )$/;"	f	class:WorldModel
getGoalDiff	src/WorldModel.cpp	/^int WorldModel::getGoalDiff( ) const$/;"	f	class:WorldModel
getGoalOpponent	src/SoccerTypes.cpp	/^ObjectT SoccerTypes::getGoalOpponent( SideT s )$/;"	f	class:SoccerTypes
getGoalWidth	src/ServerSettings.cpp	/^double ServerSettings::getGoalWidth( ) const$/;"	f	class:ServerSettings
getGoalieMaxMoves	src/ServerSettings.cpp	/^int ServerSettings::getGoalieMaxMoves( ) const$/;"	f	class:ServerSettings
getHalfTime	src/ServerSettings.cpp	/^int ServerSettings::getHalfTime( ) const$/;"	f	class:ServerSettings
getHalfViewAngleValue	src/SoccerTypes.cpp	/^AngDeg SoccerTypes::getHalfViewAngleValue( ViewAngleT va )$/;"	f	class:SoccerTypes
getHeader	src/Logger.cpp	/^char* Logger::getHeader( )$/;"	f	class:Logger
getHearDecay	src/ServerSettings.cpp	/^int ServerSettings::getHearDecay( ) const$/;"	f	class:ServerSettings
getHearInc	src/ServerSettings.cpp	/^int ServerSettings::getHearInc( ) const$/;"	f	class:ServerSettings
getHearMax	src/ServerSettings.cpp	/^int ServerSettings::getHearMax( ) const$/;"	f	class:ServerSettings
getHeteroInfoPlayer	src/WorldModel.cpp	/^HeteroPlayerSettings WorldModel::getHeteroInfoPlayer( ObjectT obj )$/;"	f	class:WorldModel
getHeteroPlayerType	src/Objects.cpp	/^int  PlayerObject::getHeteroPlayerType( ) const$/;"	f	class:PlayerObject
getHeteroPlayerType	src/WorldModel.cpp	/^int WorldModel::getHeteroPlayerType( ObjectT obj )$/;"	f	class:WorldModel
getHomePos	src/WorldModelHighLevel.cpp	/^VecPosition WorldModel::getHomePos(int iPlayer)$/;"	f	class:WorldModel
getIndex	src/SoccerTypes.cpp	/^int SoccerTypes::getIndex( ObjectT o )$/;"	f	class:SoccerTypes
getInertiaMoment	src/ServerSettings.cpp	/^double ServerSettings::getInertiaMoment( ) const$/;"	f	class:ServerSettings
getInertiaMoment	src/WorldModel.cpp	/^double WorldModel::getInertiaMoment( ObjectT obj )$/;"	f	class:WorldModel
getInertiaMomentDeltaFactor	src/ServerSettings.cpp	/^double ServerSettings::getInertiaMomentDeltaFactor( ) const$/;"	f	class:ServerSettings
getInfo	src/SoccerTypes.cpp	/^double Feature::getInfo( )$/;"	f	class:Feature
getInfoHeteroPlayer	src/WorldModel.cpp	/^HeteroPlayerSettings WorldModel::getInfoHeteroPlayer( int iIndex )$/;"	f	class:WorldModel
getInitialFormation	src/PlayerSettings.cpp	/^int PlayerSettings::getInitialFormation( ) const$/;"	f	class:PlayerSettings
getInterceptionPointBall	src/BasicPlayer.cpp	/^VecPosition BasicPlayer::getInterceptionPointBall( int *iMinCyclesBall,$/;"	f	class:BasicPlayer
getIntersection	src/Geometry.cpp	/^VecPosition Line::getIntersection( Line line )$/;"	f	class:Line
getIntersectionArea	src/Geometry.cpp	/^double Circle::getIntersectionArea( Circle c )$/;"	f	class:Circle
getIntersectionPoints	src/Geometry.cpp	/^int Circle::getIntersectionPoints( Circle c, VecPosition *p1, VecPosition *p2)$/;"	f	class:Circle
getIsGoalie	src/Objects.cpp	/^bool PlayerObject::getIsGoalie() const$/;"	f	class:PlayerObject
getIsKnownPlayer	src/Objects.cpp	/^bool PlayerObject::getIsKnownPlayer() const$/;"	f	class:PlayerObject
getKickPowerForSpeed	src/WorldModelHighLevel.cpp	/^double WorldModel::getKickPowerForSpeed( double dDesiredSpeed )$/;"	f	class:WorldModel
getKickPowerRate	src/ServerSettings.cpp	/^double ServerSettings::getKickPowerRate( ) const$/;"	f	class:ServerSettings
getKickRand	src/ServerSettings.cpp	/^double ServerSettings::getKickRand( ) const$/;"	f	class:ServerSettings
getKickRandDeltaFactor	src/ServerSettings.cpp	/^double ServerSettings::getKickRandDeltaFactor( ) const$/;"	f	class:ServerSettings
getKickSpeedToTravel	src/WorldModelHighLevel.cpp	/^double WorldModel::getKickSpeedToTravel( double dDistance, double dEndSpeed )$/;"	f	class:WorldModel
getKickableMargin	src/ServerSettings.cpp	/^double ServerSettings::getKickableMargin( ) const$/;"	f	class:ServerSettings
getKickableMarginDeltaMax	src/ServerSettings.cpp	/^double ServerSettings::getKickableMarginDeltaMax( ) const$/;"	f	class:ServerSettings
getKickableMarginDeltaMin	src/ServerSettings.cpp	/^double ServerSettings::getKickableMarginDeltaMin( ) const$/;"	f	class:ServerSettings
getLastOpponentDefender	src/WorldModelHighLevel.cpp	/^ObjectT WorldModel::getLastOpponentDefender( double *dX )$/;"	f	class:WorldModel
getLengthGeomSeries	src/Geometry.cpp	/^double Geometry::getLengthGeomSeries( double dFirst, double dRatio, double dSum )$/;"	f	class:Geometry
getListCloseOpponents	src/WorldModel.cpp	/^list<ObjectT> WorldModel::getListCloseOpponents( VecPosition pos,double dDist )$/;"	f	class:WorldModel
getLogFile	src/ServerSettings.cpp	/^char* ServerSettings::getLogFile( )$/;"	f	class:ServerSettings
getLogTimes	src/ServerSettings.cpp	/^bool ServerSettings::getLogTimes( ) const$/;"	f	class:ServerSettings
getMagnitude	src/Geometry.cpp	/^double VecPosition::getMagnitude( ) const$/;"	f	class:VecPosition
getMarkDistance	src/PlayerSettings.cpp	/^double PlayerSettings::getMarkDistance( ) const$/;"	f	class:PlayerSettings
getMarkingPosition	src/BasicPlayer.cpp	/^VecPosition BasicPlayer::getMarkingPosition( ObjectT o, double dDist, $/;"	f	class:BasicPlayer
getMarkingPosition	src/WorldModelHighLevel.cpp	/^VecPosition WorldModel::getMarkingPosition( VecPosition pos, double dDist, $/;"	f	class:WorldModel
getMaxDashAngle	src/ServerSettings.cpp	/^double ServerSettings::getMaxDashAngle() const$/;"	f	class:ServerSettings
getMaxDashPower	src/ServerSettings.cpp	/^double ServerSettings::getMaxDashPower() const$/;"	f	class:ServerSettings
getMaxMoment	src/ServerSettings.cpp	/^int ServerSettings::getMaxMoment( ) const$/;"	f	class:ServerSettings
getMaxNeckAng	src/ServerSettings.cpp	/^int ServerSettings::getMaxNeckAng( ) const$/;"	f	class:ServerSettings
getMaxNeckMoment	src/ServerSettings.cpp	/^int ServerSettings::getMaxNeckMoment( ) const$/;"	f	class:ServerSettings
getMaxPower	src/ServerSettings.cpp	/^int ServerSettings::getMaxPower( ) const$/;"	f	class:ServerSettings
getMaxRange	src/Objects.cpp	/^ObjectT PlayerObject::getMaxRange( )$/;"	f	class:PlayerObject
getMaxRangeUnknownPlayer	src/WorldModelUpdate.cpp	/^ObjectT WorldModel::getMaxRangeUnknownPlayer( ObjectT obj, char* strMsg )$/;"	f	class:WorldModel
getMaxTraveledDistance	src/WorldModelHighLevel.cpp	/^double WorldModel::getMaxTraveledDistance( ObjectT o )$/;"	f	class:WorldModel
getMaxX	src/Formations.cpp	/^double PlayerTypeInfo::getMaxX( ) const$/;"	f	class:PlayerTypeInfo
getMaxYPercentage	src/PlayerSettings.cpp	/^double PlayerSettings::getMaxYPercentage( ) const$/;"	f	class:PlayerSettings
getMaximalKickDist	src/ServerSettings.cpp	/^double ServerSettings::getMaximalKickDist( ) const$/;"	f	class:ServerSettings
getMaximalKickDist	src/WorldModel.cpp	/^double WorldModel::getMaximalKickDist( ObjectT obj )$/;"	f	class:WorldModel
getMinDashAngle	src/ServerSettings.cpp	/^double ServerSettings::getMinDashAngle() const$/;"	f	class:ServerSettings
getMinDashPower	src/ServerSettings.cpp	/^double ServerSettings::getMinDashPower() const$/;"	f	class:ServerSettings
getMinMaxDirChange	src/WorldModelUpdate.cpp	/^bool WorldModel::getMinMaxDirChange( double dOutput, double *dMin,$/;"	f	class:WorldModel
getMinMaxDistChange	src/WorldModelUpdate.cpp	/^bool WorldModel::getMinMaxDistChange( double dOutput, double dDist,$/;"	f	class:WorldModel
getMinMaxDistQuantizeValue	src/WorldModelUpdate.cpp	/^bool WorldModel::getMinMaxDistQuantizeValue( double dOutput, double *dMin,$/;"	f	class:WorldModel
getMinMoment	src/ServerSettings.cpp	/^int ServerSettings::getMinMoment( ) const$/;"	f	class:ServerSettings
getMinNeckAng	src/ServerSettings.cpp	/^int ServerSettings::getMinNeckAng( ) const$/;"	f	class:ServerSettings
getMinNeckMoment	src/ServerSettings.cpp	/^int ServerSettings::getMinNeckMoment( ) const$/;"	f	class:ServerSettings
getMinPower	src/ServerSettings.cpp	/^int ServerSettings::getMinPower( ) const$/;"	f	class:ServerSettings
getMinRange	src/Objects.cpp	/^ObjectT PlayerObject::getMinRange( )$/;"	f	class:PlayerObject
getMinX	src/Formations.cpp	/^double PlayerTypeInfo::getMinX( ) const$/;"	f	class:PlayerTypeInfo
getName	src/GenericValues.cpp	/^const char* GenericValueT::getName ( )$/;"	f	class:GenericValueT
getNewDashPowerRateDeltaMax	src/ServerSettings.cpp	/^double ServerSettings::getNewDashPowerRateDeltaMax( ) const$/;"	f	class:ServerSettings
getNewDashPowerRateDeltaMin	src/ServerSettings.cpp	/^double ServerSettings::getNewDashPowerRateDeltaMin( ) const$/;"	f	class:ServerSettings
getNewStaminaIncMaxDeltaFactor	src/ServerSettings.cpp	/^double ServerSettings::getNewStaminaIncMaxDeltaFactor( ) const$/;"	f	class:ServerSettings
getNrInSetInCircle	src/WorldModelHighLevel.cpp	/^int WorldModel::getNrInSetInCircle( ObjectSetT set, Circle c )$/;"	f	class:WorldModel
getNrInSetInCone	src/WorldModelHighLevel.cpp	/^int WorldModel::getNrInSetInCone( ObjectSetT set, double dWidth,$/;"	f	class:WorldModel
getNrInSetInRectangle	src/WorldModelHighLevel.cpp	/^int WorldModel::getNrInSetInRectangle( ObjectSetT set, Rect *rect  )$/;"	f	class:WorldModel
getNrOfCommands	src/WorldModel.cpp	/^int WorldModel::getNrOfCommands( CommandT c ) const$/;"	f	class:WorldModel
getObject	src/SoccerTypes.cpp	/^ObjectT Feature::getObject( )$/;"	f	class:Feature
getObjectFocus	src/WorldModel.cpp	/^ObjectT WorldModel::getObjectFocus( )$/;"	f	class:WorldModel
getObjectFromStr	src/SoccerTypes.cpp	/^ObjectT SoccerTypes::getObjectFromStr( char** str, bool *isGoalie,$/;"	f	class:SoccerTypes
getObjectPtrFromType	src/WorldModel.cpp	/^Object* WorldModel::getObjectPtrFromType( ObjectT o )$/;"	f	class:WorldModel
getObjectStr	src/SoccerTypes.cpp	/^char* SoccerTypes::getObjectStr( char* strBuf, ObjectT o, $/;"	f	class:SoccerTypes
getOffsideActiveAreaSize	src/ServerSettings.cpp	/^double ServerSettings::getOffsideActiveAreaSize( ) const$/;"	f	class:ServerSettings
getOffsideKickMargin	src/ServerSettings.cpp	/^double ServerSettings::getOffsideKickMargin( ) const$/;"	f	class:ServerSettings
getOffsideX	src/WorldModelHighLevel.cpp	/^double WorldModel::getOffsideX( bool bIncludeComm )$/;"	f	class:WorldModel
getOlCoachPort	src/ServerSettings.cpp	/^int ServerSettings::getOlCoachPort( ) const$/;"	f	class:ServerSettings
getOppGoalieType	src/WorldModel.cpp	/^ObjectT WorldModel::getOppGoalieType()$/;"	f	class:WorldModel
getOpponentObjectFromIndex	src/SoccerTypes.cpp	/^ObjectT SoccerTypes::getOpponentObjectFromIndex( int iIndex )$/;"	f	class:SoccerTypes
getOuterPositionInField	src/WorldModelHighLevel.cpp	/^VecPosition WorldModel::getOuterPositionInField( VecPosition pos, AngDeg ang,$/;"	f	class:WorldModel
getOutputStream	src/Logger.cpp	/^ostream& Logger::getOutputStream(  )$/;"	f	class:Logger
getOwnGoal	src/SoccerTypes.cpp	/^ObjectT SoccerTypes::getOwnGoal( SideT s )$/;"	f	class:SoccerTypes
getOwnGoalieType	src/WorldModel.cpp	/^ObjectT WorldModel::getOwnGoalieType()$/;"	f	class:WorldModel
getPassEndSpeed	src/PlayerSettings.cpp	/^double PlayerSettings::getPassEndSpeed( ) const$/;"	f	class:PlayerSettings
getPassExtraX	src/PlayerSettings.cpp	/^double PlayerSettings::getPassExtraX( ) const$/;"	f	class:PlayerSettings
getPenAllowMultKicks	src/ServerSettings.cpp	/^bool ServerSettings::getPenAllowMultKicks( ) const$/;"	f	class:ServerSettings
getPenDistX	src/ServerSettings.cpp	/^double ServerSettings::getPenDistX( ) const$/;"	f	class:ServerSettings
getPenMaxGoalieDistX	src/ServerSettings.cpp	/^double ServerSettings::getPenMaxGoalieDistX( ) const$/;"	f	class:ServerSettings
getPlayMode	src/WorldModel.cpp	/^PlayModeT WorldModel::getPlayMode( ) const$/;"	f	class:WorldModel
getPlayModeFromRefereeMessage	src/SoccerTypes.cpp	/^PlayModeT SoccerTypes::getPlayModeFromRefereeMessage( RefereeMessageT rm )$/;"	f	class:SoccerTypes
getPlayModeFromStr	src/SoccerTypes.cpp	/^PlayModeT SoccerTypes::getPlayModeFromStr( char* str )$/;"	f	class:SoccerTypes
getPlayModeStr	src/SoccerTypes.cpp	/^char* SoccerTypes::getPlayModeStr( PlayModeT pm )$/;"	f	class:SoccerTypes
getPlayerAccelMax	src/ServerSettings.cpp	/^double ServerSettings::getPlayerAccelMax( ) const$/;"	f	class:ServerSettings
getPlayerConfThr	src/PlayerSettings.cpp	/^double PlayerSettings::getPlayerConfThr( ) const$/;"	f	class:PlayerSettings
getPlayerDecay	src/ServerSettings.cpp	/^double ServerSettings::getPlayerDecay( ) const$/;"	f	class:ServerSettings
getPlayerDecay	src/WorldModel.cpp	/^double WorldModel::getPlayerDecay( ObjectT obj )$/;"	f	class:WorldModel
getPlayerDecayDeltaMax	src/ServerSettings.cpp	/^double ServerSettings::getPlayerDecayDeltaMax( ) const$/;"	f	class:ServerSettings
getPlayerDecayDeltaMin	src/ServerSettings.cpp	/^double ServerSettings::getPlayerDecayDeltaMin( ) const$/;"	f	class:ServerSettings
getPlayerDistTolerance	src/PlayerSettings.cpp	/^double PlayerSettings::getPlayerDistTolerance( ) const$/;"	f	class:PlayerSettings
getPlayerHighConfThr	src/PlayerSettings.cpp	/^double PlayerSettings::getPlayerHighConfThr( ) const$/;"	f	class:PlayerSettings
getPlayerInFormation	src/Formations.cpp	/^int Formations::getPlayerInFormation( ObjectT obj  ) const$/;"	f	class:Formations
getPlayerNumber	src/WorldModel.cpp	/^int WorldModel::getPlayerNumber( ) const$/;"	f	class:WorldModel
getPlayerRand	src/ServerSettings.cpp	/^double ServerSettings::getPlayerRand( ) const$/;"	f	class:ServerSettings
getPlayerSize	src/ServerSettings.cpp	/^double ServerSettings::getPlayerSize( ) const$/;"	f	class:ServerSettings
getPlayerSize	src/WorldModel.cpp	/^double WorldModel::getPlayerSize( ObjectT obj )$/;"	f	class:WorldModel
getPlayerSizeDeltaFactor	src/ServerSettings.cpp	/^double ServerSettings::getPlayerSizeDeltaFactor( ) const$/;"	f	class:ServerSettings
getPlayerSpeedMax	src/ServerSettings.cpp	/^double ServerSettings::getPlayerSpeedMax( ) const$/;"	f	class:ServerSettings
getPlayerSpeedMax	src/WorldModel.cpp	/^double WorldModel::getPlayerSpeedMax( ObjectT obj )$/;"	f	class:WorldModel
getPlayerSpeedMaxDeltaMax	src/ServerSettings.cpp	/^double ServerSettings::getPlayerSpeedMaxDeltaMax( ) const$/;"	f	class:ServerSettings
getPlayerSpeedMaxDeltaMin	src/ServerSettings.cpp	/^double ServerSettings::getPlayerSpeedMaxDeltaMin( ) const$/;"	f	class:ServerSettings
getPlayerType	src/Formations.cpp	/^PlayerT FormationTypeInfo::getPlayerType( int atIndex ) const$/;"	f	class:FormationTypeInfo
getPlayerType	src/Formations.cpp	/^PlayerT Formations::getPlayerType( ObjectT obj, FormationT ft ) const$/;"	f	class:Formations
getPlayerType	src/Formations.cpp	/^PlayerT Formations::getPlayerType( int iIndex, FormationT ft ) const$/;"	f	class:Formations
getPlayerType	src/Formations.cpp	/^PlayerT PlayerTypeInfo::getPlayerType( ) const$/;"	f	class:PlayerTypeInfo
getPlayerType	src/WorldModel.cpp	/^PlayerT WorldModel::getPlayerType ( ObjectT o )$/;"	f	class:WorldModel
getPlayerTypeInfo	src/Formations.cpp	/^PlayerTypeInfo* FormationTypeInfo::getPlayerTypeInfo( int atIndex )$/;"	f	class:FormationTypeInfo
getPlayerTypeInfoOfPlayer	src/Formations.cpp	/^PlayerTypeInfo* FormationTypeInfo::getPlayerTypeInfoOfPlayer($/;"	f	class:FormationTypeInfo
getPlayerTypes	src/ServerSettings.cpp	/^int ServerSettings::getPlayerTypes( ) const$/;"	f	class:ServerSettings
getPlayerWeight	src/ServerSettings.cpp	/^double ServerSettings::getPlayerWeight( ) const$/;"	f	class:ServerSettings
getPlayerWhenToIntercept	src/PlayerSettings.cpp	/^int PlayerSettings::getPlayerWhenToIntercept( ) const$/;"	f	class:PlayerSettings
getPlayerWhenToKick	src/PlayerSettings.cpp	/^double PlayerSettings::getPlayerWhenToKick( ) const$/;"	f	class:PlayerSettings
getPlayerWhenToTurnAngle	src/PlayerSettings.cpp	/^double PlayerSettings::getPlayerWhenToTurnAngle( ) const$/;"	f	class:PlayerSettings
getPointOnLineClosestTo	src/Geometry.cpp	/^VecPosition Line::getPointOnLineClosestTo( VecPosition pos )$/;"	f	class:Line
getPort	src/ServerSettings.cpp	/^int ServerSettings::getPort( ) const$/;"	f	class:ServerSettings
getPosClosestOpponentTo	src/WorldModelHighLevel.cpp	/^VecPosition WorldModel::getPosClosestOpponentTo( double *dDist, ObjectT o )$/;"	f	class:WorldModel
getPosHome	src/Formations.cpp	/^VecPosition FormationTypeInfo::getPosHome( int atIndex ) const$/;"	f	class:FormationTypeInfo
getPosLeftTop	src/Geometry.cpp	/^VecPosition Rect::getPosLeftTop(  )$/;"	f	class:Rect
getPosOpponentGoal	src/WorldModel.cpp	/^VecPosition WorldModel::getPosOpponentGoal( )$/;"	f	class:WorldModel
getPosOwnGoal	src/WorldModel.cpp	/^VecPosition WorldModel::getPosOwnGoal( )$/;"	f	class:WorldModel
getPosRightBottom	src/Geometry.cpp	/^VecPosition Rect::getPosRightBottom(  )$/;"	f	class:Rect
getPositionDifference	src/Objects.cpp	/^VecPosition AgentObject::getPositionDifference() const$/;"	f	class:AgentObject
getPowerForDash	src/WorldModelHighLevel.cpp	/^double WorldModel::getPowerForDash( VecPosition posRelTo, AngDeg angBody,$/;"	f	class:WorldModel
getPrimaryCommand	src/ActHandler.cpp	/^SoccerCommand ActHandler::getPrimaryCommand(  )$/;"	f	class:ActHandler
getProbTackleClosestOpp	src/WorldModel.cpp	/^double WorldModel::getProbTackleClosestOpp( int iExtraCycles )$/;"	f	class:WorldModel
getProbTackleSucceeds	src/WorldModel.cpp	/^double WorldModel::getProbTackleSucceeds( ObjectT o, int iExtraCycles,$/;"	f	class:WorldModel
getQuantizeStep	src/ServerSettings.cpp	/^double ServerSettings::getQuantizeStep( ) const$/;"	f	class:ServerSettings
getQuantizeStepL	src/ServerSettings.cpp	/^double ServerSettings::getQuantizeStepL( ) const$/;"	f	class:ServerSettings
getRadius	src/Geometry.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
getRecordLog	src/ServerSettings.cpp	/^bool ServerSettings::getRecordLog( ) const$/;"	f	class:ServerSettings
getRecordVersion	src/ServerSettings.cpp	/^int ServerSettings::getRecordVersion( ) const$/;"	f	class:ServerSettings
getRecoverDec	src/ServerSettings.cpp	/^double ServerSettings::getRecoverDec( ) const$/;"	f	class:ServerSettings
getRecoverDecThr	src/ServerSettings.cpp	/^double ServerSettings::getRecoverDecThr( ) const$/;"	f	class:ServerSettings
getRecoverMin	src/ServerSettings.cpp	/^double ServerSettings::getRecoverMin( ) const$/;"	f	class:ServerSettings
getRecovery	src/Objects.cpp	/^double Stamina::getRecovery() const$/;"	f	class:Stamina
getRecvStep	src/ServerSettings.cpp	/^int ServerSettings::getRecvStep( ) const$/;"	f	class:ServerSettings
getRecvThink	src/WorldModel.cpp	/^bool WorldModel::getRecvThink( )$/;"	f	class:WorldModel
getRefereeMessageFromStr	src/SoccerTypes.cpp	/^RefereeMessageT SoccerTypes::getRefereeMessageFromStr( char* str )$/;"	f	class:SoccerTypes
getRefereeMessageStr	src/SoccerTypes.cpp	/^char* SoccerTypes::getRefereeMessageStr( RefereeMessageT rm )$/;"	f	class:SoccerTypes
getRelAngleOpponentGoal	src/WorldModel.cpp	/^double  WorldModel::getRelAngleOpponentGoal()$/;"	f	class:WorldModel
getRelDistanceOpponentGoal	src/WorldModel.cpp	/^double  WorldModel::getRelDistanceOpponentGoal()$/;"	f	class:WorldModel
getRelativeAngle	src/Objects.cpp	/^AngDeg Object::getRelativeAngle( )$/;"	f	class:Object
getRelativeAngle	src/WorldModel.cpp	/^AngDeg WorldModel::getRelativeAngle( ObjectT o, bool bWithBody )$/;"	f	class:WorldModel
getRelativeAngleChange	src/Objects.cpp	/^double DynamicObject::getRelativeAngleChange() const$/;"	f	class:DynamicObject
getRelativeBodyAngle	src/Objects.cpp	/^AngDeg PlayerObject::getRelativeBodyAngle( )  const$/;"	f	class:PlayerObject
getRelativeDistance	src/Objects.cpp	/^double Object::getRelativeDistance( )$/;"	f	class:Object
getRelativeDistance	src/WorldModel.cpp	/^double WorldModel::getRelativeDistance( ObjectT o )$/;"	f	class:WorldModel
getRelativeDistanceChange	src/Objects.cpp	/^double DynamicObject::getRelativeDistanceChange() const$/;"	f	class:DynamicObject
getRelativeNeckAngle	src/Objects.cpp	/^AngDeg PlayerObject::getRelativeNeckAngle( )  const$/;"	f	class:PlayerObject
getRelativePosition	src/Objects.cpp	/^VecPosition Object::getRelativePosition() const$/;"	f	class:Object
getRelativePosition	src/WorldModel.cpp	/^VecPosition  WorldModel::getRelativePosition( ObjectT o )$/;"	f	class:WorldModel
getSayCoachCntMax	src/ServerSettings.cpp	/^int ServerSettings::getSayCoachCntMax( ) const$/;"	f	class:ServerSettings
getSayCoachMsgSize	src/ServerSettings.cpp	/^int ServerSettings::getSayCoachMsgSize( ) const$/;"	f	class:ServerSettings
getSayMsgSize	src/ServerSettings.cpp	/^int ServerSettings::getSayMsgSize( ) const$/;"	f	class:ServerSettings
getSecondClosestInSetTo	src/WorldModelHighLevel.cpp	/^ObjectT WorldModel::getSecondClosestInSetTo ( ObjectSetT set, ObjectT obj,$/;"	f	class:WorldModel
getSecondClosestRelativeInSet	src/WorldModelHighLevel.cpp	/^ObjectT WorldModel::getSecondClosestRelativeInSet( ObjectSetT set, $/;"	f	class:WorldModel
getSendLog	src/ServerSettings.cpp	/^bool ServerSettings::getSendLog( ) const$/;"	f	class:ServerSettings
getSendStep	src/ServerSettings.cpp	/^int ServerSettings::getSendStep( ) const$/;"	f	class:ServerSettings
getSendViStep	src/ServerSettings.cpp	/^int ServerSettings::getSendViStep( ) const$/;"	f	class:ServerSettings
getSenseBodyStep	src/ServerSettings.cpp	/^int ServerSettings::getSenseBodyStep( ) const$/;"	f	class:ServerSettings
getServerTimeOut	src/PlayerSettings.cpp	/^int PlayerSettings::getServerTimeOut( ) const$/;"	f	class:PlayerSettings
getShootPositionOnLine	src/BasicPlayer.cpp	/^VecPosition BasicPlayer::getShootPositionOnLine( VecPosition p1,$/;"	f	class:BasicPlayer
getShootRiskProbability	src/PlayerSettings.cpp	/^double PlayerSettings::getShootRiskProbability( ) const$/;"	f	class:PlayerSettings
getSide	src/WorldModel.cpp	/^SideT WorldModel::getSide( ) const$/;"	f	class:WorldModel
getSideDashRate	src/ServerSettings.cpp	/^double ServerSettings::getSideDashRate() const$/;"	f	class:ServerSettings
getSideFromStr	src/SoccerTypes.cpp	/^SideT SoccerTypes::getSideFromStr( char* str )$/;"	f	class:SoccerTypes
getSidePenalty	src/WorldModel.cpp	/^SideT WorldModel::getSidePenalty( )$/;"	f	class:WorldModel
getSideStr	src/SoccerTypes.cpp	/^char* SoccerTypes::getSideStr( SideT s )$/;"	f	class:SoccerTypes
getSimulatorStep	src/ServerSettings.cpp	/^int ServerSettings::getSimulatorStep( ) const$/;"	f	class:ServerSettings
getSlowDownFactor	src/ServerSettings.cpp	/^int ServerSettings::getSlowDownFactor( ) const$/;"	f	class:ServerSettings
getSpeed	src/Objects.cpp	/^double DynamicObject::getSpeed( ) const$/;"	f	class:DynamicObject
getSpeedRelToNeck	src/Objects.cpp	/^VecPosition AgentObject::getSpeedRelToNeck( ) const$/;"	f	class:AgentObject
getStamina	src/Objects.cpp	/^Stamina AgentObject::getStamina( ) const$/;"	f	class:AgentObject
getStamina	src/Objects.cpp	/^double Stamina::getStamina() const$/;"	f	class:Stamina
getStaminaCapacity	src/ServerSettings.cpp	/^double ServerSettings::getStaminaCapacity() const$/;"	f	class:ServerSettings
getStaminaIncMax	src/ServerSettings.cpp	/^double ServerSettings::getStaminaIncMax( ) const$/;"	f	class:ServerSettings
getStaminaIncMax	src/WorldModel.cpp	/^double WorldModel::getStaminaIncMax( ObjectT obj )$/;"	f	class:WorldModel
getStaminaIncMaxDeltaFactor	src/ServerSettings.cpp	/^double ServerSettings::getStaminaIncMaxDeltaFactor( ) const$/;"	f	class:ServerSettings
getStaminaMax	src/ServerSettings.cpp	/^double ServerSettings::getStaminaMax( ) const$/;"	f	class:ServerSettings
getStratAreaRadius	src/PlayerSettings.cpp	/^double PlayerSettings::getStratAreaRadius( ) const$/;"	f	class:PlayerSettings
getStrategicPosition	src/Formations.cpp	/^VecPosition Formations::getStrategicPosition( int iPlayer, VecPosition posBall,$/;"	f	class:Formations
getStrategicPosition	src/WorldModelHighLevel.cpp	/^VecPosition WorldModel::getStrategicPosition( ObjectT obj, FormationT ft )$/;"	f	class:WorldModel
getStrategicPosition	src/WorldModelHighLevel.cpp	/^VecPosition WorldModel::getStrategicPosition( int iPlayer, FormationT ft )$/;"	f	class:WorldModel
getSubsMax	src/ServerSettings.cpp	/^int ServerSettings::getSubsMax( ) const$/;"	f	class:ServerSettings
getSubstitutedOpp	src/WorldModel.cpp	/^ObjectT WorldModel::getSubstitutedOpp( )$/;"	f	class:WorldModel
getSumGeomSeries	src/Geometry.cpp	/^double Geometry::getSumGeomSeries( double dFirst, double dRatio, double dLength)$/;"	f	class:Geometry
getSumInfGeomSeries	src/Geometry.cpp	/^double Geometry::getSumInfGeomSeries( double dFirst, double dRatio )$/;"	f	class:Geometry
getSynchMode	src/ServerSettings.cpp	/^bool ServerSettings::getSynchMode( ) const$/;"	f	class:ServerSettings
getTackleBackDist	src/ServerSettings.cpp	/^double ServerSettings::getTackleBackDist( ) const$/;"	f	class:ServerSettings
getTackleCycles	src/ServerSettings.cpp	/^int ServerSettings::getTackleCycles( ) const$/;"	f	class:ServerSettings
getTackleDist	src/ServerSettings.cpp	/^double ServerSettings::getTackleDist( ) const$/;"	f	class:ServerSettings
getTackleExpires	src/Objects.cpp	/^int AgentObject::getTackleExpires( ) const$/;"	f	class:AgentObject
getTackleExpires	src/WorldModel.cpp	/^int WorldModel::getTackleExpires( ObjectT o )$/;"	f	class:WorldModel
getTackleExponent	src/ServerSettings.cpp	/^double ServerSettings::getTackleExponent( ) const$/;"	f	class:ServerSettings
getTacklePowerRate	src/ServerSettings.cpp	/^double ServerSettings::getTacklePowerRate( ) const$/;"	f	class:ServerSettings
getTackleWidth	src/ServerSettings.cpp	/^double ServerSettings::getTackleWidth( ) const$/;"	f	class:ServerSettings
getTangentLine	src/Geometry.cpp	/^Line Line::getTangentLine( VecPosition pos )$/;"	f	class:Line
getTeamName	src/WorldModel.cpp	/^const char* WorldModel::getTeamName( ) const$/;"	f	class:WorldModel
getTeammateObjectFromIndex	src/SoccerTypes.cpp	/^ObjectT SoccerTypes::getTeammateObjectFromIndex( int iIndex )$/;"	f	class:SoccerTypes
getThroughPassShootingPoint	src/BasicPlayer.cpp	/^VecPosition BasicPlayer::getThroughPassShootingPoint( ObjectT objTeam,$/;"	f	class:BasicPlayer
getTime	src/SoccerTypes.cpp	/^int Time::getTime( )$/;"	f	class:Time
getTimeAddedWith	src/SoccerTypes.cpp	/^Time Time::getTimeAddedWith( int iCycles )$/;"	f	class:Time
getTimeChangeInformation	src/Objects.cpp	/^Time DynamicObject::getTimeChangeInformation()  const$/;"	f	class:DynamicObject
getTimeChangeInformation	src/WorldModel.cpp	/^Time WorldModel::getTimeChangeInformation( ObjectT o )$/;"	f	class:WorldModel
getTimeCheckBall	src/WorldModel.cpp	/^Time WorldModel::getTimeCheckBall( ) const$/;"	f	class:WorldModel
getTimeDifference	src/Logger.cpp	/^double Timing::getTimeDifference( DWORD tv1, DWORD tv2 )$/;"	f	class:Timing
getTimeDifference	src/Logger.cpp	/^double Timing::getTimeDifference( struct timeval tv1, struct timeval tv2 )$/;"	f	class:Timing
getTimeDifference	src/SoccerTypes.cpp	/^int Time::getTimeDifference( Time t )$/;"	f	class:Time
getTimeFromConfidence	src/WorldModelHighLevel.cpp	/^Time WorldModel::getTimeFromConfidence( double dConf )$/;"	f	class:WorldModel
getTimeGlobalAngles	src/Objects.cpp	/^Time PlayerObject::getTimeGlobalAngles( ) const$/;"	f	class:PlayerObject
getTimeGlobalAngles	src/WorldModel.cpp	/^Time WorldModel::getTimeGlobalAngles( ObjectT o )$/;"	f	class:WorldModel
getTimeGlobalArm	src/Objects.cpp	/^Time PlayerObject::getTimeGlobalArm( ) const$/;"	f	class:PlayerObject
getTimeGlobalArmDirection	src/WorldModel.cpp	/^Time  WorldModel::getTimeGlobalArmDirection( ObjectT o )$/;"	f	class:WorldModel
getTimeGlobalPosDerivedFromSee	src/Objects.cpp	/^Time Object::getTimeGlobalPosDerivedFromSee() const$/;"	f	class:Object
getTimeGlobalPosition	src/Objects.cpp	/^Time Object::getTimeGlobalPosition() const$/;"	f	class:Object
getTimeGlobalPosition	src/WorldModel.cpp	/^Time WorldModel::getTimeGlobalPosition( ObjectT o )$/;"	f	class:WorldModel
getTimeGlobalPositionLastSee	src/WorldModel.cpp	/^Time WorldModel::getTimeGlobalPositionLastSee( ObjectT o )$/;"	f	class:WorldModel
getTimeGlobalVelocity	src/Objects.cpp	/^Time DynamicObject::getTimeGlobalVelocity() const$/;"	f	class:DynamicObject
getTimeGlobalVelocity	src/WorldModel.cpp	/^Time WorldModel::getTimeGlobalVelocity( ObjectT o )$/;"	f	class:WorldModel
getTimeHear	src/SoccerTypes.cpp	/^Time Feature::getTimeHear( )$/;"	f	class:Feature
getTimeLastHearMessage	src/WorldModel.cpp	/^Time WorldModel::getTimeLastHearMessage( ) const$/;"	f	class:WorldModel
getTimeLastRecvSeeMessage	src/WorldModel.cpp	/^Time WorldModel::getTimeLastRecvSeeMessage( ) const$/;"	f	class:WorldModel
getTimeLastRecvSenseMessage	src/WorldModel.cpp	/^Time WorldModel::getTimeLastRecvSenseMessage( ) const$/;"	f	class:WorldModel
getTimeLastRefereeMessage	src/WorldModel.cpp	/^Time WorldModel::getTimeLastRefereeMessage( )$/;"	f	class:WorldModel
getTimeLastSeeGlobalMessage	src/WorldModel.cpp	/^Time WorldModel::getTimeLastSeeGlobalMessage( ) const$/;"	f	class:WorldModel
getTimeLastSeeMessage	src/WorldModel.cpp	/^Time WorldModel::getTimeLastSeeMessage( ) const$/;"	f	class:WorldModel
getTimeLastSeen	src/Objects.cpp	/^Time Object::getTimeLastSeen() const$/;"	f	class:Object
getTimeLastSeen	src/WorldModel.cpp	/^Time WorldModel::getTimeLastSeen( ObjectT o )$/;"	f	class:WorldModel
getTimeLastSenseMessage	src/WorldModel.cpp	/^Time WorldModel::getTimeLastSenseMessage( ) const$/;"	f	class:WorldModel
getTimeRelativeAngles	src/Objects.cpp	/^Time PlayerObject::getTimeRelativeAngles( ) const$/;"	f	class:PlayerObject
getTimeRelativePosition	src/Objects.cpp	/^Time Object::getTimeRelativePosition() const$/;"	f	class:Object
getTimeSee	src/SoccerTypes.cpp	/^Time Feature::getTimeSee( )$/;"	f	class:Feature
getTimeSense	src/SoccerTypes.cpp	/^Time Feature::getTimeSense( )$/;"	f	class:Feature
getTimeSinceLastCatch	src/WorldModel.cpp	/^int WorldModel::getTimeSinceLastCatch()$/;"	f	class:WorldModel
getTimeStopped	src/SoccerTypes.cpp	/^int Time::getTimeStopped( )$/;"	f	class:Time
getTimeTackle	src/Objects.cpp	/^Time PlayerObject::getTimeTackle( ) const$/;"	f	class:PlayerObject
getTiming	src/Logger.cpp	/^Timing Logger::getTiming( )$/;"	f	class:Logger
getTiredNess	src/Objects.cpp	/^TiredNessT  Stamina::getTiredNess( double dRecDecThr, double dStaminaMax )$/;"	f	class:Stamina
getTurnWithBallAngThr	src/PlayerSettings.cpp	/^double PlayerSettings::getTurnWithBallAngThr( ) const$/;"	f	class:PlayerSettings
getTurnWithBallFreezeThr	src/PlayerSettings.cpp	/^double PlayerSettings::getTurnWithBallFreezeThr( ) const$/;"	f	class:PlayerSettings
getType	src/Objects.cpp	/^ObjectT  Object::getType() const$/;"	f	class:Object
getUseOffside	src/ServerSettings.cpp	/^bool ServerSettings::getUseOffside( ) const$/;"	f	class:ServerSettings
getValue	src/GenericValues.cpp	/^char* GenericValueT::getValue( char *strValue )$/;"	f	class:GenericValueT
getValue	src/GenericValues.cpp	/^char* GenericValues::getValue( const char *strName, char *strValue )$/;"	f	class:GenericValues
getValuePtr	src/GenericValues.cpp	/^GenericValueT* GenericValues::getValuePtr( const char *strName )$/;"	f	class:GenericValues
getValuesTotal	src/GenericValues.cpp	/^int GenericValues::getValuesTotal( )$/;"	f	class:GenericValues
getVec	src/SoccerTypes.cpp	/^VecPosition Feature::getVec( )$/;"	f	class:Feature
getVecPositionFromPolar	src/Geometry.cpp	/^VecPosition VecPosition::getVecPositionFromPolar( double dMag, AngDeg ang )$/;"	f	class:VecPosition
getVecPositionOnLineFraction	src/Geometry.cpp	/^VecPosition VecPosition::getVecPositionOnLineFraction( VecPosition &p,$/;"	f	class:VecPosition
getVerbose	src/ServerSettings.cpp	/^bool ServerSettings::getVerbose( ) const$/;"	f	class:ServerSettings
getViewAngle	src/Objects.cpp	/^ViewAngleT AgentObject::getViewAngle() const$/;"	f	class:AgentObject
getViewAngleFromStr	src/SoccerTypes.cpp	/^ViewAngleT SoccerTypes::getViewAngleFromStr( char* str )$/;"	f	class:SoccerTypes
getViewAngleStr	src/SoccerTypes.cpp	/^char* SoccerTypes::getViewAngleStr( ViewAngleT va )$/;"	f	class:SoccerTypes
getViewQuality	src/Objects.cpp	/^ViewQualityT AgentObject::getViewQuality() const$/;"	f	class:AgentObject
getViewQualityFromStr	src/SoccerTypes.cpp	/^ViewQualityT SoccerTypes::getViewQualityFromStr( char* str )$/;"	f	class:SoccerTypes
getViewQualityStr	src/SoccerTypes.cpp	/^char* SoccerTypes::getViewQualityStr( ViewQualityT vq )$/;"	f	class:SoccerTypes
getVisibleAngle	src/ServerSettings.cpp	/^double ServerSettings::getVisibleAngle( ) const$/;"	f	class:ServerSettings
getVisibleDistance	src/ServerSettings.cpp	/^double ServerSettings::getVisibleDistance( ) const$/;"	f	class:ServerSettings
getWindDir	src/ServerSettings.cpp	/^double ServerSettings::getWindDir( ) const$/;"	f	class:ServerSettings
getWindForce	src/ServerSettings.cpp	/^double ServerSettings::getWindForce( ) const$/;"	f	class:ServerSettings
getWindRand	src/ServerSettings.cpp	/^double ServerSettings::getWindRand( ) const$/;"	f	class:ServerSettings
getWindRandom	src/ServerSettings.cpp	/^bool ServerSettings::getWindRandom( ) const$/;"	f	class:ServerSettings
getX	src/Geometry.cpp	/^double VecPosition::getX( ) const$/;"	f	class:VecPosition
getXGivenY	src/Geometry.cpp	/^double Line::getXGivenY( double y )$/;"	f	class:Line
getY	src/Geometry.cpp	/^double VecPosition::getY( ) const$/;"	f	class:VecPosition
getYGivenX	src/Geometry.cpp	/^double Line::getYGivenX( double x )$/;"	f	class:Line
globalToRelative	src/Geometry.cpp	/^VecPosition VecPosition::globalToRelative( VecPosition origin, AngDeg ang )$/;"	f	class:VecPosition
goToPosition	src/PlayerTeams.cpp	/^SoccerCommand Player::goToPosition(VecPosition target, double entfernung)$/;"	f	class:Player
goToStrategicPosition	src/PlayerTeams.cpp	/^SoccerCommand Player::goToStrategicPosition(double entfernung)$/;"	f	class:Player
goalieMainLoop	src/Player.cpp	/^SoccerCommand Player::goalieMainLoop( )$/;"	f	class:Player
gotoFirstNonSpace	src/Parse.cpp	/^char Parse::gotoFirstNonSpace( char** strMsg )$/;"	f	class:Parse
gotoFirstOccurenceOf	src/Parse.cpp	/^int Parse::gotoFirstOccurenceOf( char c, char** strMsg )$/;"	f	class:Parse
gotoFirstSpaceOrClosingBracket	src/Parse.cpp	/^char Parse::gotoFirstSpaceOrClosingBracket( char** strMsg )$/;"	f	class:Parse
handleMessagesFromServer	src/SenseHandler.cpp	/^void SenseHandler::handleMessagesFromServer( )$/;"	f	class:SenseHandler
handleStdin	src/BasicCoach.cpp	/^void BasicCoach::handleStdin( )$/;"	f	class:BasicCoach
handleStdin	src/Player.cpp	/^void Player::handleStdin( )$/;"	f	class:Player
holdBall	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::holdBall( )$/;"	f	class:BasicPlayer
initParticlesAgent	src/WorldModelUpdate.cpp	/^void WorldModel::initParticlesAgent( AngDeg angGlobal )$/;"	f	class:WorldModel
initParticlesAgent	src/WorldModelUpdate.cpp	/^void WorldModel::initParticlesAgent( VecPosition posInitial )$/;"	f	class:WorldModel
initParticlesBall	src/WorldModelUpdate.cpp	/^void WorldModel::initParticlesBall( VecPosition posArray[],$/;"	f	class:WorldModel
intercept	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::intercept( bool isGoalie )$/;"	f	class:BasicPlayer
interceptClose	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::interceptClose( )$/;"	f	class:BasicPlayer
interceptCloseGoalie	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::interceptCloseGoalie( )$/;"	f	class:BasicPlayer
interceptScoringAttempt	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::interceptScoringAttempt( )$/;"	f	class:BasicPlayer
invQuantizeMax	src/WorldModelUpdate.cpp	/^double WorldModel::invQuantizeMax( double dOutput, double dQuantizeStep )$/;"	f	class:WorldModel
invQuantizeMin	src/WorldModelUpdate.cpp	/^double WorldModel::invQuantizeMin( double dOutput, double dQuantizeStep )$/;"	f	class:WorldModel
isAngInInterval	src/Geometry.cpp	/^bool isAngInInterval( AngDeg ang, AngDeg angMin, AngDeg angMax )$/;"	f
isBackPassThem	src/WorldModel.cpp	/^bool WorldModel::isBackPassThem( PlayModeT pm )$/;"	f	class:WorldModel
isBackPassUs	src/WorldModel.cpp	/^bool WorldModel::isBackPassUs( PlayModeT pm )$/;"	f	class:WorldModel
isBall	src/SoccerTypes.cpp	/^bool SoccerTypes::isBall( ObjectT o )$/;"	f	class:SoccerTypes
isBallCatchable	src/WorldModelHighLevel.cpp	/^bool WorldModel::isBallCatchable()$/;"	f	class:WorldModel
isBallHeadingToGoal	src/WorldModelHighLevel.cpp	/^bool WorldModel::isBallHeadingToGoal(  )$/;"	f	class:WorldModel
isBallInOurPossesion	src/WorldModelHighLevel.cpp	/^bool WorldModel::isBallInOurPossesion( )$/;"	f	class:WorldModel
isBallInOwnPenaltyArea	src/WorldModelHighLevel.cpp	/^bool WorldModel::isBallInOwnPenaltyArea( )$/;"	f	class:WorldModel
isBallKickable	src/WorldModelHighLevel.cpp	/^bool WorldModel::isBallKickable()$/;"	f	class:WorldModel
isBeforeGoal	src/WorldModelHighLevel.cpp	/^bool WorldModel::isBeforeGoal( VecPosition pos )$/;"	f	class:WorldModel
isBeforeKickOff	src/WorldModel.cpp	/^bool WorldModel::isBeforeKickOff( PlayModeT pm )$/;"	f	class:WorldModel
isBehindOf	src/Geometry.cpp	/^bool VecPosition::isBehindOf( const VecPosition &p )$/;"	f	class:VecPosition
isBehindOf	src/Geometry.cpp	/^bool VecPosition::isBehindOf( const double &d )$/;"	f	class:VecPosition
isBetweenX	src/Geometry.cpp	/^bool VecPosition::isBetweenX( const VecPosition &p1, const VecPosition &p2 )$/;"	f	class:VecPosition
isBetweenX	src/Geometry.cpp	/^bool VecPosition::isBetweenX( const double &d1, const double &d2 )$/;"	f	class:VecPosition
isBetweenY	src/Geometry.cpp	/^bool VecPosition::isBetweenY( const VecPosition &p1, const VecPosition &p2 )$/;"	f	class:VecPosition
isBetweenY	src/Geometry.cpp	/^bool VecPosition::isBetweenY( const double &d1, const double &d2 )$/;"	f	class:VecPosition
isCollisionAfterCommand	src/WorldModelPredict.cpp	/^bool WorldModel::isCollisionAfterCommand( SoccerCommand soc )$/;"	f	class:WorldModel
isConfidenceGood	src/WorldModelHighLevel.cpp	/^bool WorldModel::isConfidenceGood( ObjectT o )$/;"	f	class:WorldModel
isConfidenceVeryGood	src/WorldModelHighLevel.cpp	/^bool WorldModel::isConfidenceVeryGood( ObjectT o )$/;"	f	class:WorldModel
isConnected	src/Connection.cpp	/^bool Connection::isConnected(void) const$/;"	f	class:Connection
isCornerKickThem	src/WorldModel.cpp	/^bool WorldModel::isCornerKickThem( PlayModeT pm )$/;"	f	class:WorldModel
isCornerKickUs	src/WorldModel.cpp	/^bool WorldModel::isCornerKickUs( PlayModeT pm )$/;"	f	class:WorldModel
isDeadBallThem	src/WorldModel.cpp	/^bool WorldModel::isDeadBallThem( PlayModeT pm )$/;"	f	class:WorldModel
isDeadBallUs	src/WorldModel.cpp	/^bool WorldModel::isDeadBallUs( PlayModeT pm )$/;"	f	class:WorldModel
isDribbleFast	src/Player.cpp	/^bool Player::isDribbleFast(AngDeg& ang)$/;"	f	class:Player
isEmptySpace	src/WorldModelHighLevel.cpp	/^bool WorldModel::isEmptySpace( ObjectT obj, AngDeg ang, double dDist )$/;"	f	class:WorldModel
isFeatureRelevant	src/WorldModel.cpp	/^bool WorldModel::isFeatureRelevant( FeatureT type )$/;"	f	class:WorldModel
isFlag	src/SoccerTypes.cpp	/^bool SoccerTypes::isFlag( ObjectT o )$/;"	f	class:SoccerTypes
isFreeKickFaultThem	src/WorldModel.cpp	/^bool WorldModel::isFreeKickFaultThem( PlayModeT pm )$/;"	f	class:WorldModel
isFreeKickFaultUs	src/WorldModel.cpp	/^bool WorldModel::isFreeKickFaultUs( PlayModeT pm )$/;"	f	class:WorldModel
isFreeKickThem	src/WorldModel.cpp	/^bool WorldModel::isFreeKickThem( PlayModeT pm )$/;"	f	class:WorldModel
isFreeKickUs	src/WorldModel.cpp	/^bool WorldModel::isFreeKickUs( PlayModeT pm )$/;"	f	class:WorldModel
isFullStateOn	src/WorldModel.cpp	/^bool WorldModel::isFullStateOn( SideT s )$/;"	f	class:WorldModel
isGoal	src/SoccerTypes.cpp	/^bool SoccerTypes::isGoal( ObjectT o )$/;"	f	class:SoccerTypes
isGoalKickThem	src/WorldModel.cpp	/^bool WorldModel::isGoalKickThem( PlayModeT pm )$/;"	f	class:WorldModel
isGoalKickUs	src/WorldModel.cpp	/^bool WorldModel::isGoalKickUs( PlayModeT pm )$/;"	f	class:WorldModel
isGoalie	src/SoccerTypes.cpp	/^bool SoccerTypes::isGoalie( ObjectT o )$/;"	f	class:SoccerTypes
isIllegal	src/SoccerTypes.cpp	/^bool SoccerCommand::isIllegal( )$/;"	f	class:SoccerCommand
isInBetween	src/Geometry.cpp	/^bool Line::isInBetween( VecPosition pos, VecPosition point1,VecPosition point2)$/;"	f	class:Line
isInField	src/WorldModelHighLevel.cpp	/^bool WorldModel::isInField( VecPosition pos, double dMargin )$/;"	f	class:WorldModel
isInFrontOf	src/Geometry.cpp	/^bool VecPosition::isInFrontOf( const VecPosition &p )$/;"	f	class:VecPosition
isInFrontOf	src/Geometry.cpp	/^bool VecPosition::isInFrontOf( const double &d )$/;"	f	class:VecPosition
isInLogLevel	src/Logger.cpp	/^bool Logger::isInLogLevel( int iLevel )$/;"	f	class:Logger
isInOwnPenaltyArea	src/WorldModelHighLevel.cpp	/^bool WorldModel::isInOwnPenaltyArea( VecPosition pos )$/;"	f	class:WorldModel
isInPlayerSet	src/WorldModel.cpp	/^bool WorldModel::isInPlayerSet( ObjectT o, PlayerSetT ps )$/;"	f	class:WorldModel
isInRange	src/Objects.cpp	/^bool PlayerObject::isInRange( ObjectT obj, bool bTeammatesFirst )$/;"	f	class:PlayerObject
isInSet	src/SoccerTypes.cpp	/^bool SoccerTypes::isInSet( ObjectT o, ObjectSetT o_g, ObjectT objGoalie )$/;"	f	class:SoccerTypes
isInTheirPenaltyArea	src/WorldModelHighLevel.cpp	/^bool WorldModel::isInTheirPenaltyArea( VecPosition pos )$/;"	f	class:WorldModel
isInside	src/Geometry.cpp	/^bool Circle::isInside( VecPosition pos )$/;"	f	class:Circle
isInside	src/Geometry.cpp	/^bool Rect::isInside( VecPosition pos )$/;"	f	class:Rect
isKickInThem	src/WorldModel.cpp	/^bool WorldModel::isKickInThem( PlayModeT pm )$/;"	f	class:WorldModel
isKickInUs	src/WorldModel.cpp	/^bool WorldModel::isKickInUs( PlayModeT pm )$/;"	f	class:WorldModel
isKickOffThem	src/WorldModel.cpp	/^bool WorldModel::isKickOffThem( PlayModeT pm )$/;"	f	class:WorldModel
isKickOffUs	src/WorldModel.cpp	/^bool WorldModel::isKickOffUs( PlayModeT pm )$/;"	f	class:WorldModel
isKickable	src/Player.cpp	/^bool Player:: isKickable( VecPosition & pos )$/;"	f	class:Player
isKnownPlayer	src/SoccerTypes.cpp	/^bool SoccerTypes::isKnownPlayer( ObjectT o )$/;"	f	class:SoccerTypes
isKnownPlayer	src/WorldModel.cpp	/^bool WorldModel::isKnownPlayer( ObjectT o )$/;"	f	class:WorldModel
isLastMessageSee	src/WorldModel.cpp	/^bool WorldModel::isLastMessageSee() const$/;"	f	class:WorldModel
isLeftOf	src/Geometry.cpp	/^bool VecPosition::isLeftOf( const VecPosition &p )$/;"	f	class:VecPosition
isLeftOf	src/Geometry.cpp	/^bool VecPosition::isLeftOf( const double &d )$/;"	f	class:VecPosition
isLine	src/SoccerTypes.cpp	/^bool SoccerTypes::isLine( ObjectT o )$/;"	f	class:SoccerTypes
isOffsideThem	src/WorldModel.cpp	/^bool WorldModel::isOffsideThem( PlayModeT pm )$/;"	f	class:WorldModel
isOffsideUs	src/WorldModel.cpp	/^bool WorldModel::isOffsideUs( PlayModeT pm )$/;"	f	class:WorldModel
isOnside	src/WorldModelHighLevel.cpp	/^bool WorldModel::isOnside( ObjectT obj )$/;"	f	class:WorldModel
isOpponent	src/SoccerTypes.cpp	/^bool SoccerTypes::isOpponent( ObjectT o )$/;"	f	class:SoccerTypes
isOpponentAtAngle	src/WorldModelHighLevel.cpp	/^bool WorldModel::isOpponentAtAngle( AngDeg ang , double dDist )$/;"	f	class:WorldModel
isPassingPractical	src/PlayerTeams.cpp	/^bool Player::isPassingPractical(VecPosition source, VecPosition target)$/;"	f	class:Player
isPenaltyThem	src/WorldModel.cpp	/^bool WorldModel::isPenaltyThem( PlayModeT pm )$/;"	f	class:WorldModel
isPenaltyUs	src/WorldModel.cpp	/^bool WorldModel::isPenaltyUs( PlayModeT pm )$/;"	f	class:WorldModel
isPlayer	src/SoccerTypes.cpp	/^bool SoccerTypes::isPlayer( ObjectT o )$/;"	f	class:SoccerTypes
isPlayerTypeInSet	src/SoccerTypes.cpp	/^bool SoccerTypes::isPlayerTypeInSet( PlayerT p, PlayerSetT p_s )$/;"	f	class:SoccerTypes
isPositionReached	src/PlayerTeams.cpp	/^bool Player::isPositionReached(VecPosition target, double entfernung)$/;"	f	class:Player
isPrimaryCommand	src/SoccerTypes.cpp	/^bool SoccerTypes::isPrimaryCommand( CommandT com )$/;"	f	class:SoccerTypes
isQueueEmpty	src/ActHandler.cpp	/^bool ActHandler::isQueueEmpty()$/;"	f	class:ActHandler
isQueuedActionPerformed	src/WorldModel.cpp	/^bool WorldModel::isQueuedActionPerformed()$/;"	f	class:WorldModel
isRightOf	src/Geometry.cpp	/^bool VecPosition::isRightOf( const VecPosition &p )$/;"	f	class:VecPosition
isRightOf	src/Geometry.cpp	/^bool VecPosition::isRightOf( const double &d )$/;"	f	class:VecPosition
isStopped	src/SoccerTypes.cpp	/^bool Time::isStopped( )$/;"	f	class:Time
isTeammate	src/SoccerTypes.cpp	/^bool SoccerTypes::isTeammate( ObjectT o )$/;"	f	class:SoccerTypes
isTimeStopped	src/WorldModel.cpp	/^bool WorldModel::isTimeStopped()$/;"	f	class:WorldModel
isVisible	src/WorldModelHighLevel.cpp	/^bool WorldModel::isVisible( ObjectT o )$/;"	f	class:WorldModel
iterateObjectDone	src/WorldModel.cpp	/^void WorldModel::iterateObjectDone( int &iIndex )$/;"	f	class:WorldModel
iterateObjectNext	src/WorldModel.cpp	/^ObjectT WorldModel::iterateObjectNext(int& iIndex,ObjectSetT g, double dConf,$/;"	f	class:WorldModel
iterateObjectStart	src/WorldModel.cpp	/^ObjectT WorldModel::iterateObjectStart(int& iIndex,ObjectSetT g,double dConf,$/;"	f	class:WorldModel
kickBallCloseToBody	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::kickBallCloseToBody( AngDeg ang, double dKickRatio )$/;"	f	class:BasicPlayer
kickTo	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::kickTo( VecPosition posTarget, double dEndSpeed )$/;"	f	class:BasicPlayer
leadingPass	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::leadingPass( ObjectT o, double dDist, DirectionT dir)$/;"	f	class:BasicPlayer
letTackle	src/Player.cpp	/^bool Player::letTackle()$/;"	f	class:Player
listenTo	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::listenTo( ObjectT obj )$/;"	f	class:BasicPlayer
log	src/Logger.cpp	/^bool Logger::log( int iLevel, char *str, ... )$/;"	f	class:Logger
log	src/Logger.cpp	/^bool Logger::log( int iLevel, string str)$/;"	f	class:Logger
logCircle	src/WorldModel.cpp	/^bool WorldModel::logCircle( int iLogLevel, VecPosition pos, double  dRadius,$/;"	f	class:WorldModel
logCoordInfo	src/WorldModel.cpp	/^void WorldModel::logCoordInfo( int iLogLevel  )$/;"	f	class:WorldModel
logDrawBallInfo	src/WorldModel.cpp	/^bool WorldModel::logDrawBallInfo( int  iLogLevel )$/;"	f	class:WorldModel
logDrawInfo	src/WorldModel.cpp	/^void WorldModel::logDrawInfo( int iLogLevel  )$/;"	f	class:WorldModel
logFromSignal	src/Logger.cpp	/^bool Logger::logFromSignal( int iLevel, char   *str, ...        )$/;"	f	class:Logger
logLine	src/WorldModel.cpp	/^bool WorldModel::logLine( int  iLogLevel, VecPosition pos1, VecPosition pos2,$/;"	f	class:WorldModel
logObjectInformation	src/WorldModel.cpp	/^void WorldModel::logObjectInformation( int iLogLevel, ObjectT obj )$/;"	f	class:WorldModel
logSignal	src/Logger.cpp	/^bool Logger::logSignal( )$/;"	f	class:Logger
logWithTime	src/Logger.cpp	/^bool Logger::logWithTime( int iLevel, char *str, ... )$/;"	f	class:Logger
lowDistanceToOpponentGoal	src/Player.cpp	/^double Player::lowDistanceToOpponentGoal()$/;"	f	class:Player
main	src/main.cpp	/^int main( int argc, char * argv[] )$/;"	f
main	src/mainCoach.cpp	/^int main( int argc, char * argv[] )$/;"	f
mainLoop	src/Player.cpp	/^void Player::mainLoop( )$/;"	f	class:Player
mainLoopNormal	src/BasicCoach.cpp	/^void BasicCoach::mainLoopNormal( )$/;"	f	class:BasicCoach
makeAttentionToCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makeAttentionToCommand( char *str  )$/;"	f	class:SoccerCommand
makeBallInfo	src/Player.cpp	/^void Player::makeBallInfo( VecPosition posBall, VecPosition velBall, int iDiff,$/;"	f	class:Player
makeCatchCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makeCatchCommand( char *str  )$/;"	f	class:SoccerCommand
makeChangePlayerCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makeChangePlayerCommand( char *str  )$/;"	f	class:SoccerCommand
makeChangeViewCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makeChangeViewCommand( char *str  )$/;"	f	class:SoccerCommand
makeCommand	src/SoccerTypes.cpp	/^void SoccerCommand::makeCommand( CommandT com, ViewAngleT v, ViewQualityT q )$/;"	f	class:SoccerCommand
makeCommand	src/SoccerTypes.cpp	/^void SoccerCommand::makeCommand( CommandT com, char* msg )$/;"	f	class:SoccerCommand
makeCommand	src/SoccerTypes.cpp	/^void SoccerCommand::makeCommand( CommandT com, double d1, $/;"	f	class:SoccerCommand
makeDashCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makeDashCommand( char *str  )$/;"	f	class:SoccerCommand
makeKickCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makeKickCommand( char *str  )$/;"	f	class:SoccerCommand
makeLineFromPositionAndAngle	src/Geometry.cpp	/^Line Line::makeLineFromPositionAndAngle( VecPosition vec, AngDeg angle )$/;"	f	class:Line
makeLineFromTwoPoints	src/Geometry.cpp	/^Line Line::makeLineFromTwoPoints( VecPosition pos1, VecPosition pos2 )$/;"	f	class:Line
makeMoveCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makeMoveCommand( char *str  )$/;"	f	class:SoccerCommand
makePointToCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makePointToCommand( char *str  )$/;"	f	class:SoccerCommand
makeSayCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makeSayCommand( char *str_com  )$/;"	f	class:SoccerCommand
makeSenseBodyCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makeSenseBodyCommand( char *str  )$/;"	f	class:SoccerCommand
makeSynchSeeToCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makeSynchSeeToCommand( char *str  )$/;"	f	class:SoccerCommand
makeTackleCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makeTackleCommand( char *str  )$/;"	f	class:SoccerCommand
makeTurnCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makeTurnCommand( char *str  )$/;"	f	class:SoccerCommand
makeTurnNeckCommand	src/SoccerTypes.cpp	/^bool SoccerCommand::makeTurnNeckCommand( char *str  )$/;"	f	class:SoccerCommand
mapUnknownPlayers	src/WorldModelUpdate.cpp	/^void WorldModel::mapUnknownPlayers( Time time)$/;"	f	class:WorldModel
mark	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::mark( ObjectT o, double dDist, MarkT mark )$/;"	f	class:BasicPlayer
max	src/Geometry.cpp	/^double max( double d1, double d2 )$/;"	f
message_loop	src/Connection.cpp	/^int Connection::message_loop( FILE *fpin, FILE *fpout )$/;"	f	class:Connection
midfielderMainLoop	src/Player.cpp	/^SoccerCommand Player::midfielderMainLoop( )$/;"	f	class:Player
min	src/Geometry.cpp	/^double min( double d1, double d2 )$/;"	f
moveToPos	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::moveToPos( VecPosition posTo, AngDeg angWhenToTurn,$/;"	f	class:BasicPlayer
moveToPosAlongLine	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::moveToPosAlongLine( VecPosition pos, AngDeg ang,$/;"	f	class:BasicPlayer
myRelativeDirection	src/Player.cpp	/^AngDeg Player::myRelativeDirection(VecPosition posAgent)$/;"	f	class:Player
normalize	src/Geometry.cpp	/^VecPosition VecPosition::normalize( )$/;"	f	class:VecPosition
normalizeAngle	src/Geometry.cpp	/^AngDeg VecPosition::normalizeAngle( AngDeg angle )$/;"	f	class:VecPosition
operator !=	src/Geometry.cpp	/^bool VecPosition::operator !=( const VecPosition &p )$/;"	f	class:VecPosition
operator !=	src/Geometry.cpp	/^bool VecPosition::operator !=( const double &d )$/;"	f	class:VecPosition
operator !=	src/SoccerTypes.cpp	/^bool Time::operator != ( Time t )$/;"	f	class:Time
operator !=	src/SoccerTypes.cpp	/^bool Time::operator != ( const int &i )$/;"	f	class:Time
operator *	src/Geometry.cpp	/^VecPosition VecPosition::operator * ( const VecPosition &p )$/;"	f	class:VecPosition
operator *	src/Geometry.cpp	/^VecPosition VecPosition::operator * ( const double &d  )$/;"	f	class:VecPosition
operator *=	src/Geometry.cpp	/^void VecPosition::operator *=( const VecPosition &p )$/;"	f	class:VecPosition
operator *=	src/Geometry.cpp	/^void VecPosition::operator *=( const double &d )$/;"	f	class:VecPosition
operator +	src/Geometry.cpp	/^VecPosition VecPosition::operator + ( const VecPosition &p )$/;"	f	class:VecPosition
operator +	src/Geometry.cpp	/^VecPosition VecPosition::operator + ( const double &d )$/;"	f	class:VecPosition
operator +	src/SoccerTypes.cpp	/^Time Time::operator + ( Time t )$/;"	f	class:Time
operator +	src/SoccerTypes.cpp	/^Time Time::operator + ( const int &i )$/;"	f	class:Time
operator +=	src/Geometry.cpp	/^void VecPosition::operator += ( const double &d )$/;"	f	class:VecPosition
operator +=	src/Geometry.cpp	/^void VecPosition::operator +=( const VecPosition &p )$/;"	f	class:VecPosition
operator +=	src/SoccerTypes.cpp	/^void Time::operator += ( Time t )$/;"	f	class:Time
operator +=	src/SoccerTypes.cpp	/^void Time::operator += ( const int &i )$/;"	f	class:Time
operator -	src/Geometry.cpp	/^VecPosition VecPosition::operator - ( )$/;"	f	class:VecPosition
operator -	src/Geometry.cpp	/^VecPosition VecPosition::operator - ( const VecPosition &p )$/;"	f	class:VecPosition
operator -	src/Geometry.cpp	/^VecPosition VecPosition::operator - ( const double &d )$/;"	f	class:VecPosition
operator -	src/SoccerTypes.cpp	/^Time Time::operator - ( const int &i )$/;"	f	class:Time
operator -	src/SoccerTypes.cpp	/^int Time::operator - ( Time t )$/;"	f	class:Time
operator -=	src/Geometry.cpp	/^void VecPosition::operator -=( const VecPosition &p )$/;"	f	class:VecPosition
operator -=	src/Geometry.cpp	/^void VecPosition::operator -=( const double &d )$/;"	f	class:VecPosition
operator -=	src/SoccerTypes.cpp	/^void Time::operator -= ( Time t )$/;"	f	class:Time
operator -=	src/SoccerTypes.cpp	/^void Time::operator -= ( const int &i )$/;"	f	class:Time
operator /	src/Geometry.cpp	/^VecPosition VecPosition::operator \/ ( const VecPosition &p )$/;"	f	class:VecPosition
operator /	src/Geometry.cpp	/^VecPosition VecPosition::operator \/ ( const double &d )$/;"	f	class:VecPosition
operator /=	src/Geometry.cpp	/^void VecPosition::operator \/=( const VecPosition &p )$/;"	f	class:VecPosition
operator /=	src/Geometry.cpp	/^void VecPosition::operator \/=( const double &d )$/;"	f	class:VecPosition
operator <	src/SoccerTypes.cpp	/^bool Time::operator <  ( Time t )$/;"	f	class:Time
operator <	src/SoccerTypes.cpp	/^bool Time::operator <  ( const int  &i )$/;"	f	class:Time
operator <<	src/Geometry.cpp	/^ostream& operator <<( ostream &os, VecPosition v )$/;"	f
operator <<	src/Geometry.cpp	/^ostream& operator <<(ostream & os, Line l)$/;"	f
operator <<	src/SoccerTypes.cpp	/^ostream& operator <<( ostream &os, Time t )$/;"	f
operator <=	src/SoccerTypes.cpp	/^bool Time::operator <= ( Time t )$/;"	f	class:Time
operator <=	src/SoccerTypes.cpp	/^bool Time::operator <= ( const int  &i )$/;"	f	class:Time
operator =	src/Geometry.cpp	/^void VecPosition::operator = ( const double &d )$/;"	f	class:VecPosition
operator =	src/SoccerTypes.cpp	/^void Time::operator = ( const int &i )$/;"	f	class:Time
operator ==	src/Geometry.cpp	/^bool VecPosition::operator ==( const VecPosition &p )$/;"	f	class:VecPosition
operator ==	src/Geometry.cpp	/^bool VecPosition::operator ==( const double &d )$/;"	f	class:VecPosition
operator ==	src/SoccerTypes.cpp	/^bool Time::operator == ( Time t )$/;"	f	class:Time
operator ==	src/SoccerTypes.cpp	/^bool Time::operator == ( const int &i )$/;"	f	class:Time
operator >	src/SoccerTypes.cpp	/^bool Time::operator >  ( Time t )$/;"	f	class:Time
operator >	src/SoccerTypes.cpp	/^bool Time::operator >  ( const int  &i )$/;"	f	class:Time
operator >=	src/SoccerTypes.cpp	/^bool Time::operator >= ( Time t )$/;"	f	class:Time
operator >=	src/SoccerTypes.cpp	/^bool Time::operator >= ( const int  &i )$/;"	f	class:Time
outplayOpponent	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::outplayOpponent( ObjectT o, VecPosition pos,$/;"	f	class:BasicPlayer
parseFirstDouble	src/Parse.cpp	/^double Parse::parseFirstDouble( char** strMsg )$/;"	f	class:Parse
parseFirstInt	src/Parse.cpp	/^int Parse::parseFirstInt( char** strMsg )$/;"	f	class:Parse
pass	src/PlayerTeams.cpp	/^SoccerCommand Player::pass(VecPosition target)$/;"	f	class:Player
performPenalty	src/Player.cpp	/^void Player::performPenalty( )$/;"	f	class:Player
predictAgentPos	src/WorldModelPredict.cpp	/^VecPosition WorldModel::predictAgentPos( int iCycles, int iDashPower )$/;"	f	class:WorldModel
predictAgentPosAfterCommand	src/WorldModelPredict.cpp	/^VecPosition WorldModel::predictAgentPosAfterCommand( SoccerCommand com )$/;"	f	class:WorldModel
predictAgentStateAfterCommand	src/WorldModelPredict.cpp	/^bool WorldModel::predictAgentStateAfterCommand( SoccerCommand com,$/;"	f	class:WorldModel
predictBallInfoAfterCommand	src/WorldModelPredict.cpp	/^void WorldModel::predictBallInfoAfterCommand( SoccerCommand soc,$/;"	f	class:WorldModel
predictCommandToInterceptBall	src/WorldModelPredict.cpp	/^SoccerCommand WorldModel::predictCommandToInterceptBall( ObjectT obj,$/;"	f	class:WorldModel
predictCommandToMoveToPos	src/WorldModelPredict.cpp	/^SoccerCommand WorldModel::predictCommandToMoveToPos( ObjectT obj, $/;"	f	class:WorldModel
predictCommandTurnTowards	src/WorldModelPredict.cpp	/^SoccerCommand WorldModel::predictCommandTurnTowards( ObjectT obj, VecPosition$/;"	f	class:WorldModel
predictFinalAgentPos	src/WorldModelPredict.cpp	/^VecPosition WorldModel::predictFinalAgentPos(VecPosition *pos,VecPosition *vel)$/;"	f	class:WorldModel
predictNrCyclesForDistance	src/WorldModelPredict.cpp	/^int WorldModel::predictNrCyclesForDistance ( ObjectT o, double dDist,$/;"	f	class:WorldModel
predictNrCyclesToObject	src/WorldModelPredict.cpp	/^int WorldModel::predictNrCyclesToObject( ObjectT objFrom, ObjectT objTo )$/;"	f	class:WorldModel
predictNrCyclesToPoint	src/WorldModelPredict.cpp	/^int WorldModel::predictNrCyclesToPoint( ObjectT o, VecPosition posTo )$/;"	f	class:WorldModel
predictObjectStateAfterCommand	src/WorldModelPredict.cpp	/^bool WorldModel::predictObjectStateAfterCommand( ObjectT obj,SoccerCommand com,$/;"	f	class:WorldModel
predictPosAfterNrCycles	src/WorldModelPredict.cpp	/^VecPosition WorldModel::predictPosAfterNrCycles( ObjectT o, double dCycles,$/;"	f	class:WorldModel
predictStaminaAfterDash	src/WorldModelPredict.cpp	/^void WorldModel::predictStaminaAfterDash( double dPower, Stamina *stamina )$/;"	f	class:WorldModel
predictStateAfterCommand	src/WorldModelPredict.cpp	/^bool WorldModel::predictStateAfterCommand( SoccerCommand com,$/;"	f	class:WorldModel
predictStateAfterDash	src/WorldModelPredict.cpp	/^void WorldModel::predictStateAfterDash( double dActualPower, VecPosition *pos,$/;"	f	class:WorldModel
predictStateAfterTurn	src/WorldModelPredict.cpp	/^void WorldModel::predictStateAfterTurn( AngDeg dSendAngle, VecPosition *pos,$/;"	f	class:WorldModel
printOptions	src/main.cpp	/^void printOptions( )$/;"	f
printOptions	src/mainCoach.cpp	/^void printOptions( )$/;"	f
printTimeDiffWithText	src/Logger.cpp	/^void Timing::printTimeDiffWithText( ostream &os, char *str, int iFactor )$/;"	f	class:Timing
processCatchedBall	src/WorldModelUpdate.cpp	/^void WorldModel::processCatchedBall( RefereeMessageT rm, Time time )$/;"	f	class:WorldModel
processLastSeeMessage	src/WorldModelUpdate.cpp	/^void  WorldModel::processLastSeeMessage( )$/;"	f	class:WorldModel
processLastSenseMessage	src/WorldModelUpdate.cpp	/^void WorldModel::processLastSenseMessage( )$/;"	f	class:WorldModel
processNewAgentInfo	src/WorldModelUpdate.cpp	/^bool WorldModel::processNewAgentInfo( ViewQualityT vq, ViewAngleT va,$/;"	f	class:WorldModel
processNewHeteroPlayer	src/WorldModelUpdate.cpp	/^bool WorldModel::processNewHeteroPlayer( int iIndex,    double dPlayerSpeedMax,$/;"	f	class:WorldModel
processNewObjectInfo	src/WorldModelUpdate.cpp	/^void WorldModel::processNewObjectInfo( ObjectT o, Time time,$/;"	f	class:WorldModel
processPerfectHearInfo	src/WorldModelUpdate.cpp	/^bool WorldModel::processPerfectHearInfo( ObjectT o, VecPosition posGlobal,$/;"	f	class:WorldModel
processPerfectHearInfoBall	src/WorldModelUpdate.cpp	/^bool WorldModel::processPerfectHearInfoBall( VecPosition posGlobal,$/;"	f	class:WorldModel
processPlayerMessage	src/WorldModelUpdate.cpp	/^bool WorldModel::processPlayerMessage( )$/;"	f	class:WorldModel
processQueuedCommands	src/WorldModelUpdate.cpp	/^void WorldModel::processQueuedCommands( SoccerCommand commands[],$/;"	f	class:WorldModel
processRecvThink	src/WorldModelUpdate.cpp	/^bool WorldModel::processRecvThink( bool b )$/;"	f	class:WorldModel
processSeeGlobalInfo	src/WorldModelUpdate.cpp	/^void WorldModel::processSeeGlobalInfo( ObjectT o, Time time,$/;"	f	class:WorldModel
processUnsureHearInfo	src/WorldModelUpdate.cpp	/^bool WorldModel::processUnsureHearInfo( ObjectT o, VecPosition pos,$/;"	f	class:WorldModel
putCommandInQueue	src/ActHandler.cpp	/^bool ActHandler::putCommandInQueue( SoccerCommand command )$/;"	f	class:ActHandler
readFormations	src/Formations.cpp	/^bool Formations::readFormations( const char *strFile )$/;"	f	class:Formations
readServerParam	src/SenseHandler.cpp	/^bool SenseHandler::readServerParam( char *strParam, char *strMsg )$/;"	f	class:SenseHandler
readValues	src/GenericValues.cpp	/^bool GenericValues::readValues( const char *strFile, const char *strSeparator )$/;"	f	class:GenericValues
readValues	src/ServerSettings.cpp	/^bool ServerSettings::readValues( const char *strFileName, $/;"	f	class:ServerSettings
receiveMessage	src/Connection.cpp	/^int Connection::receiveMessage( char *msg, int maxsize )$/;"	f	class:Connection
relativeToGlobal	src/Geometry.cpp	/^VecPosition VecPosition::relativeToGlobal( VecPosition origin, AngDeg ang )$/;"	f	class:VecPosition
removeGhosts	src/WorldModelUpdate.cpp	/^void WorldModel::removeGhosts( )$/;"	f	class:WorldModel
resampleParticlesAgent	src/WorldModelUpdate.cpp	/^void WorldModel::resampleParticlesAgent( int iLeft )$/;"	f	class:WorldModel
resampleParticlesBall	src/WorldModelUpdate.cpp	/^void WorldModel::resampleParticlesBall( VecPosition posArray[],$/;"	f	class:WorldModel
resetTimeObjects	src/WorldModelUpdate.cpp	/^bool WorldModel::resetTimeObjects( )$/;"	f	class:WorldModel
restartTime	src/Logger.cpp	/^void Timing::restartTime( )$/;"	f	class:Timing
restartTimer	src/Logger.cpp	/^void Logger::restartTimer()$/;"	f	class:Logger
rotate	src/Geometry.cpp	/^VecPosition VecPosition::rotate( AngDeg angle )$/;"	f	class:VecPosition
saveValues	src/GenericValues.cpp	/^bool GenericValues::saveValues( const char *strFile, const char *strSeparator,$/;"	f	class:GenericValues
sayBallStatus	src/Player.cpp	/^void Player::sayBallStatus( char * strMsg  )$/;"	f	class:Player
sayOppAttackerStatus	src/Player.cpp	/^void Player::sayOppAttackerStatus( char* strMsg )$/;"	f	class:Player
searchBall	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::searchBall()$/;"	f	class:BasicPlayer
sendAssignment	src/BasicCoach.cpp	/^void BasicCoach::sendAssignment( int *assignment )$/;"	f	class:BasicCoach
sendCommand	src/ActHandler.cpp	/^bool ActHandler::sendCommand( SoccerCommand soc )$/;"	f	class:ActHandler
sendCommandDirect	src/ActHandler.cpp	/^bool ActHandler::sendCommandDirect( SoccerCommand soc )$/;"	f	class:ActHandler
sendCommands	src/ActHandler.cpp	/^bool ActHandler::sendCommands( )$/;"	f	class:ActHandler
sendMessage	src/ActHandler.cpp	/^bool ActHandler::sendMessage( char * str )$/;"	f	class:ActHandler
sendMessage	src/Connection.cpp	/^bool Connection::sendMessage( const char *msg )$/;"	f	class:Connection
sendMessageDirect	src/ActHandler.cpp	/^bool ActHandler::sendMessageDirect( char * str )$/;"	f	class:ActHandler
sense_callback	src/SenseHandler.cpp	/^DWORD WINAPI sense_callback( LPVOID v )$/;"	f
setAgentObjectType	src/WorldModel.cpp	/^bool WorldModel::setAgentObjectType( ObjectT o )$/;"	f	class:WorldModel
setAgentViewAngle	src/WorldModel.cpp	/^bool WorldModel::setAgentViewAngle( ViewAngleT va ) $/;"	f	class:WorldModel
setAgentViewQuality	src/WorldModel.cpp	/^bool WorldModel::setAgentViewQuality( ViewQualityT vq ) $/;"	f	class:WorldModel
setArmExpires	src/Objects.cpp	/^bool AgentObject::setArmExpires( int i )$/;"	f	class:AgentObject
setArmMovable	src/Objects.cpp	/^bool AgentObject::setArmMovable( bool b ) $/;"	f	class:AgentObject
setAttrX	src/Formations.cpp	/^bool PlayerTypeInfo::setAttrX( double dAttractionX )$/;"	f	class:PlayerTypeInfo
setAttrY	src/Formations.cpp	/^bool PlayerTypeInfo::setAttrY( double dAttractionY )$/;"	f	class:PlayerTypeInfo
setAudioCutDist	src/ServerSettings.cpp	/^bool ServerSettings::setAudioCutDist( double d )$/;"	f	class:ServerSettings
setBackDashRate	src/ServerSettings.cpp	/^bool ServerSettings::setBackDashRate( double d )$/;"	f	class:ServerSettings
setBallAccelMax	src/ServerSettings.cpp	/^bool ServerSettings::setBallAccelMax( double d )$/;"	f	class:ServerSettings
setBallConfThr	src/PlayerSettings.cpp	/^bool PlayerSettings::setBallConfThr( double d )$/;"	f	class:PlayerSettings
setBallDecay	src/ServerSettings.cpp	/^bool ServerSettings::setBallDecay( double d )$/;"	f	class:ServerSettings
setBallRand	src/ServerSettings.cpp	/^bool ServerSettings::setBallRand( double d )$/;"	f	class:ServerSettings
setBallSize	src/ServerSettings.cpp	/^bool ServerSettings::setBallSize( double d )$/;"	f	class:ServerSettings
setBallSpeedMax	src/ServerSettings.cpp	/^bool ServerSettings::setBallSpeedMax( double d )$/;"	f	class:ServerSettings
setBallWeight	src/ServerSettings.cpp	/^bool ServerSettings::setBallWeight( double d )$/;"	f	class:ServerSettings
setBehindBall	src/Formations.cpp	/^bool PlayerTypeInfo::setBehindBall( bool b )$/;"	f	class:PlayerTypeInfo
setBodyAngleRelToNeck	src/Objects.cpp	/^bool AgentObject::setBodyAngleRelToNeck( AngDeg ang )$/;"	f	class:AgentObject
setCatchBanCycle	src/ServerSettings.cpp	/^bool ServerSettings::setCatchBanCycle( int i )$/;"	f	class:ServerSettings
setCatchProbability	src/ServerSettings.cpp	/^bool ServerSettings::setCatchProbability( double d )$/;"	f	class:ServerSettings
setCatchableAreaL	src/ServerSettings.cpp	/^bool ServerSettings::setCatchableAreaL( double d )$/;"	f	class:ServerSettings
setCatchableAreaW	src/ServerSettings.cpp	/^bool ServerSettings::setCatchableAreaW( double d )$/;"	f	class:ServerSettings
setCenter	src/Geometry.cpp	/^bool Circle::setCenter( VecPosition pos )$/;"	f	class:Circle
setChangeViewCommand	src/WorldModel.cpp	/^bool WorldModel::setChangeViewCommand( SoccerCommand soc )$/;"	f	class:WorldModel
setCheckBallStatus	src/WorldModel.cpp	/^bool WorldModel::setCheckBallStatus( BallStatusT bs )$/;"	f	class:WorldModel
setCircle	src/Geometry.cpp	/^bool Circle::setCircle( VecPosition pos, double dR )$/;"	f	class:Circle
setCkickMargin	src/ServerSettings.cpp	/^bool ServerSettings::setCkickMargin( double d )$/;"	f	class:ServerSettings
setClangAdviceWin	src/ServerSettings.cpp	/^bool ServerSettings::setClangAdviceWin( int i )$/;"	f	class:ServerSettings
setClangDefineWin	src/ServerSettings.cpp	/^bool ServerSettings::setClangDefineWin( int i )$/;"	f	class:ServerSettings
setClangInfoWin	src/ServerSettings.cpp	/^bool ServerSettings::setClangInfoWin( int i )$/;"	f	class:ServerSettings
setClangMessDelay	src/ServerSettings.cpp	/^bool ServerSettings::setClangMessDelay( int i )$/;"	f	class:ServerSettings
setClangMessPerCycle	src/ServerSettings.cpp	/^bool ServerSettings::setClangMessPerCycle( int i )$/;"	f	class:ServerSettings
setClangMetaWin	src/ServerSettings.cpp	/^bool ServerSettings::setClangMetaWin( int i )$/;"	f	class:ServerSettings
setClangWinSize	src/ServerSettings.cpp	/^bool ServerSettings::setClangWinSize( int i )$/;"	f	class:ServerSettings
setClearBallDist	src/PlayerSettings.cpp	/^bool PlayerSettings::setClearBallDist( double d )$/;"	f	class:PlayerSettings
setClearBallOppMaxDist	src/PlayerSettings.cpp	/^bool PlayerSettings::setClearBallOppMaxDist( double d )$/;"	f	class:PlayerSettings
setClearBallToSideAngle	src/PlayerSettings.cpp	/^bool PlayerSettings::setClearBallToSideAngle( double d )$/;"	f	class:PlayerSettings
setCoachPort	src/ServerSettings.cpp	/^bool ServerSettings::setCoachPort( int i )$/;"	f	class:ServerSettings
setCommand	src/SoccerTypes.cpp	/^bool Feature::setCommand( SoccerCommand soc )$/;"	f	class:Feature
setCommunicationString	src/WorldModel.cpp	/^bool WorldModel::setCommunicationString( char *str )$/;"	f	class:WorldModel
setConeWidth	src/PlayerSettings.cpp	/^bool PlayerSettings::setConeWidth( double d )$/;"	f	class:PlayerSettings
setCyclesCatchWait	src/PlayerSettings.cpp	/^bool PlayerSettings::setCyclesCatchWait( int i )$/;"	f	class:PlayerSettings
setDashAngleStep	src/ServerSettings.cpp	/^bool ServerSettings::setDashAngleStep( double d )$/;"	f	class:ServerSettings
setDashPowerRate	src/ServerSettings.cpp	/^bool ServerSettings::setDashPowerRate( double d )$/;"	f	class:ServerSettings
setDashPowerRateDeltaMax	src/ServerSettings.cpp	/^bool ServerSettings::setDashPowerRateDeltaMax( double d )$/;"	f	class:ServerSettings
setDashPowerRateDeltaMin	src/ServerSettings.cpp	/^bool ServerSettings::setDashPowerRateDeltaMin( double d )$/;"	f	class:ServerSettings
setDribbleAngThr	src/PlayerSettings.cpp	/^bool PlayerSettings::setDribbleAngThr( double d )$/;"	f	class:PlayerSettings
setDropBallTime	src/ServerSettings.cpp	/^bool ServerSettings::setDropBallTime( int i )$/;"	f	class:ServerSettings
setEffort	src/Objects.cpp	/^bool Stamina::setEffort( double d )$/;"	f	class:Stamina
setEffortDec	src/ServerSettings.cpp	/^bool ServerSettings::setEffortDec( double d )$/;"	f	class:ServerSettings
setEffortDecThr	src/ServerSettings.cpp	/^bool ServerSettings::setEffortDecThr( double d )$/;"	f	class:ServerSettings
setEffortInc	src/ServerSettings.cpp	/^bool ServerSettings::setEffortInc( double d )$/;"	f	class:ServerSettings
setEffortIncThr	src/ServerSettings.cpp	/^bool ServerSettings::setEffortIncThr( double d )$/;"	f	class:ServerSettings
setEffortMax	src/ServerSettings.cpp	/^bool ServerSettings::setEffortMax( double d )$/;"	f	class:ServerSettings
setEffortMaxDeltaFactor	src/ServerSettings.cpp	/^bool ServerSettings::setEffortMaxDeltaFactor( double d )$/;"	f	class:ServerSettings
setEffortMin	src/ServerSettings.cpp	/^bool ServerSettings::setEffortMin( double d )$/;"	f	class:ServerSettings
setEffortMinDeltaFactor	src/ServerSettings.cpp	/^bool ServerSettings::setEffortMinDeltaFactor( double d )$/;"	f	class:ServerSettings
setExtraStamina	src/ServerSettings.cpp	/^bool ServerSettings::setExtraStamina( double d )$/;"	f	class:ServerSettings
setExtraStaminaDeltaMax	src/ServerSettings.cpp	/^bool ServerSettings::setExtraStaminaDeltaMax( double d )$/;"	f	class:ServerSettings
setExtraStaminaDeltaMin	src/ServerSettings.cpp	/^bool ServerSettings::setExtraStaminaDeltaMin( double d )$/;"	f	class:ServerSettings
setFastPassEndSpeed	src/PlayerSettings.cpp	/^bool PlayerSettings::setFastPassEndSpeed( double d )$/;"	f	class:PlayerSettings
setFeature	src/SoccerTypes.cpp	/^bool Feature::setFeature( Time timeSee,  Time timeSense, Time timeHear,$/;"	f	class:Feature
setFeature	src/WorldModel.cpp	/^bool WorldModel::setFeature( FeatureT type, Feature feature )$/;"	f	class:WorldModel
setForbidKickOffOffside	src/ServerSettings.cpp	/^bool ServerSettings::setForbidKickOffOffside( bool b )$/;"	f	class:ServerSettings
setFormation	src/Formations.cpp	/^bool Formations::setFormation( FormationT formation )$/;"	f	class:Formations
setFormationType	src/Formations.cpp	/^bool FormationTypeInfo::setFormationType( FormationT type )$/;"	f	class:FormationTypeInfo
setFractionWaitNoSee	src/PlayerSettings.cpp	/^bool PlayerSettings::setFractionWaitNoSee( double d )$/;"	f	class:PlayerSettings
setFractionWaitSeeBegin	src/PlayerSettings.cpp	/^bool PlayerSettings::setFractionWaitSeeBegin( double d )$/;"	f	class:PlayerSettings
setFractionWaitSeeEnd	src/PlayerSettings.cpp	/^bool PlayerSettings::setFractionWaitSeeEnd( double d )$/;"	f	class:PlayerSettings
setFullStateLeft	src/ServerSettings.cpp	/^bool ServerSettings::setFullStateLeft( bool b ) $/;"	f	class:ServerSettings
setFullStateRight	src/ServerSettings.cpp	/^bool ServerSettings::setFullStateRight( bool b ) $/;"	f	class:ServerSettings
setGlobalArm	src/Objects.cpp	/^bool PlayerObject::setGlobalArm( AngDeg ang, Time time )$/;"	f	class:PlayerObject
setGlobalArmPosition	src/Objects.cpp	/^bool AgentObject::setGlobalArmPosition ( VecPosition  v )$/;"	f	class:AgentObject
setGlobalBodyAngle	src/Objects.cpp	/^bool PlayerObject::setGlobalBodyAngle( AngDeg ang, Time time)$/;"	f	class:PlayerObject
setGlobalBodyAngleLastSee	src/Objects.cpp	/^bool PlayerObject::setGlobalBodyAngleLastSee( AngDeg ang )$/;"	f	class:PlayerObject
setGlobalNeckAngle	src/Objects.cpp	/^bool AgentObject::setGlobalNeckAngle( AngDeg ang )$/;"	f	class:AgentObject
setGlobalNeckAngle	src/Objects.cpp	/^bool PlayerObject::setGlobalNeckAngle( AngDeg ang, Time time )$/;"	f	class:PlayerObject
setGlobalPosition	src/Objects.cpp	/^bool Object::setGlobalPosition( VecPosition p, Time time )$/;"	f	class:Object
setGlobalPositionLastSee	src/Objects.cpp	/^bool Object::setGlobalPositionLastSee( VecPosition p, Time time )$/;"	f	class:Object
setGlobalVelocity	src/Objects.cpp	/^bool DynamicObject::setGlobalVelocity( VecPosition v, Time time)$/;"	f	class:DynamicObject
setGlobalVelocityLastSee	src/Objects.cpp	/^bool DynamicObject::setGlobalVelocityLastSee ( VecPosition vec )$/;"	f	class:DynamicObject
setGoalWidth	src/ServerSettings.cpp	/^bool ServerSettings::setGoalWidth( double d )$/;"	f	class:ServerSettings
setGoalieMaxMoves	src/ServerSettings.cpp	/^bool ServerSettings::setGoalieMaxMoves( int i )$/;"	f	class:ServerSettings
setHalfTime	src/ServerSettings.cpp	/^bool ServerSettings::setHalfTime( int i )$/;"	f	class:ServerSettings
setHeader	src/Logger.cpp	/^bool Logger::setHeader( char *str )$/;"	f	class:Logger
setHeader	src/Logger.cpp	/^bool Logger::setHeader( int i )$/;"	f	class:Logger
setHeader	src/Logger.cpp	/^bool Logger::setHeader( int i1, int i2 )$/;"	f	class:Logger
setHearDecay	src/ServerSettings.cpp	/^bool ServerSettings::setHearDecay( int i )$/;"	f	class:ServerSettings
setHearInc	src/ServerSettings.cpp	/^bool ServerSettings::setHearInc( int i )$/;"	f	class:ServerSettings
setHearMax	src/ServerSettings.cpp	/^bool ServerSettings::setHearMax( int i )$/;"	f	class:ServerSettings
setHeteroPlayerType	src/Objects.cpp	/^bool PlayerObject::setHeteroPlayerType( int index )$/;"	f	class:PlayerObject
setHeteroPlayerType	src/WorldModel.cpp	/^bool WorldModel::setHeteroPlayerType( ObjectT  o, int iPlayerType )$/;"	f	class:WorldModel
setInertiaMoment	src/ServerSettings.cpp	/^bool ServerSettings::setInertiaMoment( double d )$/;"	f	class:ServerSettings
setInertiaMomentDeltaFactor	src/ServerSettings.cpp	/^bool ServerSettings::setInertiaMomentDeltaFactor( double d )$/;"	f	class:ServerSettings
setInfo	src/SoccerTypes.cpp	/^bool Feature::setInfo( double d )$/;"	f	class:Feature
setInitialFormation	src/PlayerSettings.cpp	/^bool PlayerSettings::setInitialFormation( int i )$/;"	f	class:PlayerSettings
setIsGoalie	src/Objects.cpp	/^bool PlayerObject::setIsGoalie( bool b )$/;"	f	class:PlayerObject
setIsKnownPlayer	src/Objects.cpp	/^bool PlayerObject::setIsKnownPlayer( bool b )$/;"	f	class:PlayerObject
setIsKnownPlayer	src/WorldModel.cpp	/^bool WorldModel::setIsKnownPlayer( ObjectT o, bool isKnownPlayer )$/;"	f	class:WorldModel
setKickPowerRate	src/ServerSettings.cpp	/^bool ServerSettings::setKickPowerRate( double d )$/;"	f	class:ServerSettings
setKickRand	src/ServerSettings.cpp	/^bool ServerSettings::setKickRand( double d )$/;"	f	class:ServerSettings
setKickRandDeltaFactor	src/ServerSettings.cpp	/^bool ServerSettings::setKickRandDeltaFactor( double d )$/;"	f	class:ServerSettings
setKickableMargin	src/ServerSettings.cpp	/^bool ServerSettings::setKickableMargin( double d )$/;"	f	class:ServerSettings
setKickableMarginDeltaMax	src/ServerSettings.cpp	/^bool ServerSettings::setKickableMarginDeltaMax( double d )$/;"	f	class:ServerSettings
setKickableMarginDeltaMin	src/ServerSettings.cpp	/^bool ServerSettings::setKickableMarginDeltaMin( double d )$/;"	f	class:ServerSettings
setLogFile	src/ServerSettings.cpp	/^bool ServerSettings::setLogFile( char *str )$/;"	f	class:ServerSettings
setLogTimes	src/ServerSettings.cpp	/^bool ServerSettings::setLogTimes( bool b )$/;"	f	class:ServerSettings
setMagnitude	src/Geometry.cpp	/^VecPosition VecPosition::setMagnitude( double d )$/;"	f	class:VecPosition
setMarkDistance	src/PlayerSettings.cpp	/^bool PlayerSettings::setMarkDistance( double d )$/;"	f	class:PlayerSettings
setMaxDashAngle	src/ServerSettings.cpp	/^bool ServerSettings::setMaxDashAngle( double d )$/;"	f	class:ServerSettings
setMaxDashPower	src/ServerSettings.cpp	/^bool ServerSettings::setMaxDashPower( double d )$/;"	f	class:ServerSettings
setMaxMoment	src/ServerSettings.cpp	/^bool ServerSettings::setMaxMoment( int i )$/;"	f	class:ServerSettings
setMaxNeckAng	src/ServerSettings.cpp	/^bool ServerSettings::setMaxNeckAng( int i )$/;"	f	class:ServerSettings
setMaxNeckMoment	src/ServerSettings.cpp	/^bool ServerSettings::setMaxNeckMoment( int i )$/;"	f	class:ServerSettings
setMaxPower	src/ServerSettings.cpp	/^bool ServerSettings::setMaxPower( int i )$/;"	f	class:ServerSettings
setMaxX	src/Formations.cpp	/^bool PlayerTypeInfo::setMaxX( double dMaximalX )$/;"	f	class:PlayerTypeInfo
setMaxYPercentage	src/PlayerSettings.cpp	/^bool PlayerSettings::setMaxYPercentage( double d )$/;"	f	class:PlayerSettings
setMaximalKickDist	src/ServerSettings.cpp	/^bool ServerSettings::setMaximalKickDist( double d )$/;"	f	class:ServerSettings
setMinDashAngle	src/ServerSettings.cpp	/^bool ServerSettings::setMinDashAngle( double d )$/;"	f	class:ServerSettings
setMinDashPower	src/ServerSettings.cpp	/^bool ServerSettings::setMinDashPower( double d )$/;"	f	class:ServerSettings
setMinMoment	src/ServerSettings.cpp	/^bool ServerSettings::setMinMoment( int i )$/;"	f	class:ServerSettings
setMinNeckAng	src/ServerSettings.cpp	/^bool ServerSettings::setMinNeckAng( int i )$/;"	f	class:ServerSettings
setMinNeckMoment	src/ServerSettings.cpp	/^bool ServerSettings::setMinNeckMoment( int i )$/;"	f	class:ServerSettings
setMinPower	src/ServerSettings.cpp	/^bool ServerSettings::setMinPower( int i )$/;"	f	class:ServerSettings
setMinX	src/Formations.cpp	/^bool PlayerTypeInfo::setMinX( double dMinimalX )$/;"	f	class:PlayerTypeInfo
setNewDashPowerRateDeltaMax	src/ServerSettings.cpp	/^bool ServerSettings::setNewDashPowerRateDeltaMax( double d )$/;"	f	class:ServerSettings
setNewDashPowerRateDeltaMin	src/ServerSettings.cpp	/^bool ServerSettings::setNewDashPowerRateDeltaMin( double d )$/;"	f	class:ServerSettings
setNewStaminaIncMaxDeltaFactor	src/ServerSettings.cpp	/^bool ServerSettings::setNewStaminaIncMaxDeltaFactor( double d )$/;"	f	class:ServerSettings
setNrOfCommands	src/WorldModel.cpp	/^bool WorldModel::setNrOfCommands( CommandT c, int i )$/;"	f	class:WorldModel
setObject	src/SoccerTypes.cpp	/^bool Feature::setObject ( ObjectT object )$/;"	f	class:Feature
setObjectFocus	src/WorldModel.cpp	/^bool WorldModel::setObjectFocus( ObjectT obj )$/;"	f	class:WorldModel
setOffsideActiveAreaSize	src/ServerSettings.cpp	/^bool ServerSettings::setOffsideActiveAreaSize( double d )$/;"	f	class:ServerSettings
setOffsideKickMargin	src/ServerSettings.cpp	/^bool ServerSettings::setOffsideKickMargin( double d )$/;"	f	class:ServerSettings
setOlCoachPort	src/ServerSettings.cpp	/^bool ServerSettings::setOlCoachPort( int i )$/;"	f	class:ServerSettings
setOutputStream	src/Logger.cpp	/^bool Logger::setOutputStream( ostream& o )$/;"	f	class:Logger
setPassEndSpeed	src/PlayerSettings.cpp	/^bool PlayerSettings::setPassEndSpeed( double d )$/;"	f	class:PlayerSettings
setPassExtraX	src/PlayerSettings.cpp	/^bool PlayerSettings::setPassExtraX( double d )$/;"	f	class:PlayerSettings
setPenAllowMultKicks	src/ServerSettings.cpp	/^bool ServerSettings::setPenAllowMultKicks( bool b )$/;"	f	class:ServerSettings
setPenDistX	src/ServerSettings.cpp	/^bool ServerSettings::setPenDistX( double d )$/;"	f	class:ServerSettings
setPenMaxGoalieDistX	src/ServerSettings.cpp	/^bool ServerSettings::setPenMaxGoalieDistX( double d )$/;"	f	class:ServerSettings
setPlayMode	src/WorldModel.cpp	/^bool WorldModel::setPlayMode( PlayModeT pm )$/;"	f	class:WorldModel
setPlayerAccelMax	src/ServerSettings.cpp	/^bool ServerSettings::setPlayerAccelMax( double d )$/;"	f	class:ServerSettings
setPlayerConfThr	src/PlayerSettings.cpp	/^bool PlayerSettings::setPlayerConfThr( double d )$/;"	f	class:PlayerSettings
setPlayerDecay	src/ServerSettings.cpp	/^bool ServerSettings::setPlayerDecay( double d )$/;"	f	class:ServerSettings
setPlayerDecayDeltaMax	src/ServerSettings.cpp	/^bool ServerSettings::setPlayerDecayDeltaMax( double d )$/;"	f	class:ServerSettings
setPlayerDecayDeltaMin	src/ServerSettings.cpp	/^bool ServerSettings::setPlayerDecayDeltaMin( double d )$/;"	f	class:ServerSettings
setPlayerDistTolerance	src/PlayerSettings.cpp	/^bool PlayerSettings::setPlayerDistTolerance( double d )$/;"	f	class:PlayerSettings
setPlayerHighConfThr	src/PlayerSettings.cpp	/^bool PlayerSettings::setPlayerHighConfThr( double d )$/;"	f	class:PlayerSettings
setPlayerInFormation	src/Formations.cpp	/^bool Formations::setPlayerInFormation( int iNumber )$/;"	f	class:Formations
setPlayerNumber	src/WorldModel.cpp	/^bool WorldModel::setPlayerNumber( int i )$/;"	f	class:WorldModel
setPlayerRand	src/ServerSettings.cpp	/^bool ServerSettings::setPlayerRand( double d )$/;"	f	class:ServerSettings
setPlayerSize	src/ServerSettings.cpp	/^bool ServerSettings::setPlayerSize( double d )$/;"	f	class:ServerSettings
setPlayerSizeDeltaFactor	src/ServerSettings.cpp	/^bool ServerSettings::setPlayerSizeDeltaFactor( double d )$/;"	f	class:ServerSettings
setPlayerSpeedMax	src/ServerSettings.cpp	/^bool ServerSettings::setPlayerSpeedMax( double d )$/;"	f	class:ServerSettings
setPlayerSpeedMaxDeltaMax	src/ServerSettings.cpp	/^bool ServerSettings::setPlayerSpeedMaxDeltaMax( double d )$/;"	f	class:ServerSettings
setPlayerSpeedMaxDeltaMin	src/ServerSettings.cpp	/^bool ServerSettings::setPlayerSpeedMaxDeltaMin( double d )$/;"	f	class:ServerSettings
setPlayerType	src/Formations.cpp	/^bool FormationTypeInfo::setPlayerType( PlayerT type, int atIndex )$/;"	f	class:FormationTypeInfo
setPlayerType	src/Formations.cpp	/^bool PlayerTypeInfo::setPlayerType( PlayerT type )$/;"	f	class:PlayerTypeInfo
setPlayerTypeInfo	src/Formations.cpp	/^bool FormationTypeInfo::setPlayerTypeInfo( PlayerTypeInfo info, int atIndex )$/;"	f	class:FormationTypeInfo
setPlayerTypes	src/ServerSettings.cpp	/^bool ServerSettings::setPlayerTypes( int i )$/;"	f	class:ServerSettings
setPlayerWeight	src/ServerSettings.cpp	/^bool ServerSettings::setPlayerWeight( double d )$/;"	f	class:ServerSettings
setPlayerWhenToIntercept	src/PlayerSettings.cpp	/^bool PlayerSettings::setPlayerWhenToIntercept( int i )$/;"	f	class:PlayerSettings
setPlayerWhenToKick	src/PlayerSettings.cpp	/^bool PlayerSettings::setPlayerWhenToKick( double d )$/;"	f	class:PlayerSettings
setPlayerWhenToTurnAngle	src/PlayerSettings.cpp	/^bool PlayerSettings::setPlayerWhenToTurnAngle( double d )$/;"	f	class:PlayerSettings
setPort	src/ServerSettings.cpp	/^bool ServerSettings::setPort( int i )$/;"	f	class:ServerSettings
setPosHome	src/Formations.cpp	/^bool FormationTypeInfo::setPosHome( VecPosition pos, int atIndex )$/;"	f	class:FormationTypeInfo
setPosLeftTop	src/Geometry.cpp	/^bool Rect::setPosLeftTop( VecPosition pos )$/;"	f	class:Rect
setPosRightBottom	src/Geometry.cpp	/^bool Rect::setPosRightBottom( VecPosition pos )$/;"	f	class:Rect
setPositionDifference	src/Objects.cpp	/^bool  AgentObject::setPositionDifference( VecPosition p )$/;"	f	class:AgentObject
setPossibleRange	src/Objects.cpp	/^bool PlayerObject::setPossibleRange( ObjectT objMin, ObjectT objMax )$/;"	f	class:PlayerObject
setQuantizeStep	src/ServerSettings.cpp	/^bool ServerSettings::setQuantizeStep( double d )$/;"	f	class:ServerSettings
setQuantizeStepL	src/ServerSettings.cpp	/^bool ServerSettings::setQuantizeStepL( double d )$/;"	f	class:ServerSettings
setRadius	src/Geometry.cpp	/^bool Circle::setRadius( double dR )$/;"	f	class:Circle
setRecordLog	src/ServerSettings.cpp	/^bool ServerSettings::setRecordLog( bool b )$/;"	f	class:ServerSettings
setRecordVersion	src/ServerSettings.cpp	/^bool ServerSettings::setRecordVersion( int i )$/;"	f	class:ServerSettings
setRecoverDec	src/ServerSettings.cpp	/^bool ServerSettings::setRecoverDec( double d )$/;"	f	class:ServerSettings
setRecoverDecThr	src/ServerSettings.cpp	/^bool ServerSettings::setRecoverDecThr( double d )$/;"	f	class:ServerSettings
setRecoverMin	src/ServerSettings.cpp	/^bool ServerSettings::setRecoverMin( double d )$/;"	f	class:ServerSettings
setRecovery	src/Objects.cpp	/^bool Stamina::setRecovery( double d )$/;"	f	class:Stamina
setRectanglePoints	src/Geometry.cpp	/^void Rect::setRectanglePoints( VecPosition pos1, VecPosition pos2 )$/;"	f	class:Rect
setRecvStep	src/ServerSettings.cpp	/^bool ServerSettings::setRecvStep( int i )$/;"	f	class:ServerSettings
setRelativeAngleChange	src/Objects.cpp	/^bool DynamicObject::setRelativeAngleChange( double d, Time time )$/;"	f	class:DynamicObject
setRelativeBodyAngle	src/Objects.cpp	/^bool PlayerObject::setRelativeBodyAngle( AngDeg ang, Time time )$/;"	f	class:PlayerObject
setRelativeDistanceChange	src/Objects.cpp	/^bool DynamicObject::setRelativeDistanceChange( double d, Time time )$/;"	f	class:DynamicObject
setRelativeNeckAngle	src/Objects.cpp	/^bool PlayerObject::setRelativeNeckAngle( AngDeg ang, Time time )$/;"	f	class:PlayerObject
setRelativePosition	src/Objects.cpp	/^bool Object::setRelativePosition( VecPosition v, Time time )$/;"	f	class:Object
setRelativePosition	src/Objects.cpp	/^bool Object::setRelativePosition( double dDist, AngDeg ang, Time time )$/;"	f	class:Object
setSayCoachCntMax	src/ServerSettings.cpp	/^bool ServerSettings::setSayCoachCntMax( int i )$/;"	f	class:ServerSettings
setSayCoachMsgSize	src/ServerSettings.cpp	/^bool ServerSettings::setSayCoachMsgSize( int i )$/;"	f	class:ServerSettings
setSayMsgSize	src/ServerSettings.cpp	/^bool ServerSettings::setSayMsgSize( int i )$/;"	f	class:ServerSettings
setSendLog	src/ServerSettings.cpp	/^bool ServerSettings::setSendLog( bool b )$/;"	f	class:ServerSettings
setSendStep	src/ServerSettings.cpp	/^bool ServerSettings::setSendStep( int i )$/;"	f	class:ServerSettings
setSendViStep	src/ServerSettings.cpp	/^bool ServerSettings::setSendViStep( int i )$/;"	f	class:ServerSettings
setSenseBodyStep	src/ServerSettings.cpp	/^bool ServerSettings::setSenseBodyStep( int i )$/;"	f	class:ServerSettings
setServerTimeOut	src/PlayerSettings.cpp	/^bool PlayerSettings::setServerTimeOut( int i )$/;"	f	class:PlayerSettings
setShootRiskProbability	src/PlayerSettings.cpp	/^bool PlayerSettings::setShootRiskProbability( double d )$/;"	f	class:PlayerSettings
setSide	src/WorldModel.cpp	/^bool WorldModel::setSide( SideT s )$/;"	f	class:WorldModel
setSideDashRate	src/ServerSettings.cpp	/^bool ServerSettings::setSideDashRate( double d )$/;"	f	class:ServerSettings
setSidePenalty	src/WorldModel.cpp	/^bool WorldModel::setSidePenalty( SideT side )$/;"	f	class:WorldModel
setSimulatorStep	src/ServerSettings.cpp	/^bool ServerSettings::setSimulatorStep( int i )$/;"	f	class:ServerSettings
setSlowDownFactor	src/ServerSettings.cpp	/^bool ServerSettings::setSlowDownFactor( int i )$/;"	f	class:ServerSettings
setSpeedRelToNeck	src/Objects.cpp	/^bool AgentObject::setSpeedRelToNeck( VecPosition v )$/;"	f	class:AgentObject
setStamina	src/Objects.cpp	/^bool AgentObject::setStamina( Stamina sta )$/;"	f	class:AgentObject
setStamina	src/Objects.cpp	/^bool Stamina::setStamina( double d )$/;"	f	class:Stamina
setStaminaCapacity	src/ServerSettings.cpp	/^bool ServerSettings::setStaminaCapacity( double d)$/;"	f	class:ServerSettings
setStaminaIncMax	src/ServerSettings.cpp	/^bool ServerSettings::setStaminaIncMax( double d )$/;"	f	class:ServerSettings
setStaminaIncMaxDeltaFactor	src/ServerSettings.cpp	/^bool ServerSettings::setStaminaIncMaxDeltaFactor( double d )$/;"	f	class:ServerSettings
setStaminaMax	src/ServerSettings.cpp	/^bool ServerSettings::setStaminaMax( double d )$/;"	f	class:ServerSettings
setStratAreaRadius	src/PlayerSettings.cpp	/^bool PlayerSettings::setStratAreaRadius( double d )$/;"	f	class:PlayerSettings
setSubsMax	src/ServerSettings.cpp	/^bool ServerSettings::setSubsMax( int i )$/;"	f	class:ServerSettings
setSubstitutedOpp	src/WorldModel.cpp	/^bool WorldModel::setSubstitutedOpp( ObjectT obj )$/;"	f	class:WorldModel
setSynchMode	src/ServerSettings.cpp	/^bool ServerSettings::setSynchMode( bool b )$/;"	f	class:ServerSettings
setTackleBackDist	src/ServerSettings.cpp	/^bool ServerSettings::setTackleBackDist( double d )$/;"	f	class:ServerSettings
setTackleCycles	src/ServerSettings.cpp	/^bool ServerSettings::setTackleCycles( int i )$/;"	f	class:ServerSettings
setTackleDist	src/ServerSettings.cpp	/^bool ServerSettings::setTackleDist( double d )$/;"	f	class:ServerSettings
setTackleExpires	src/Objects.cpp	/^bool AgentObject::setTackleExpires( int i )$/;"	f	class:AgentObject
setTackleExponent	src/ServerSettings.cpp	/^bool ServerSettings::setTackleExponent( double d )$/;"	f	class:ServerSettings
setTacklePowerRate	src/ServerSettings.cpp	/^bool ServerSettings::setTacklePowerRate( double d )$/;"	f	class:ServerSettings
setTackleWidth	src/ServerSettings.cpp	/^bool ServerSettings::setTackleWidth( double d )$/;"	f	class:ServerSettings
setTeamName	src/WorldModel.cpp	/^bool WorldModel::setTeamName( char * str )$/;"	f	class:WorldModel
setTimeChangeInformation	src/Objects.cpp	/^bool DynamicObject::setTimeChangeInformation( Time time )$/;"	f	class:DynamicObject
setTimeCheckBall	src/WorldModel.cpp	/^bool WorldModel::setTimeCheckBall( Time time )$/;"	f	class:WorldModel
setTimeGlobalAngles	src/Objects.cpp	/^bool PlayerObject::setTimeGlobalAngles( Time time )$/;"	f	class:PlayerObject
setTimeGlobalArm	src/Objects.cpp	/^bool PlayerObject::setTimeGlobalArm( Time time )$/;"	f	class:PlayerObject
setTimeGlobalPosDerivedFromSee	src/Objects.cpp	/^bool Object::setTimeGlobalPosDerivedFromSee( Time time )$/;"	f	class:Object
setTimeGlobalPosition	src/Objects.cpp	/^bool Object::setTimeGlobalPosition( Time time )$/;"	f	class:Object
setTimeGlobalVelocity	src/Objects.cpp	/^bool DynamicObject::setTimeGlobalVelocity( Time time )$/;"	f	class:DynamicObject
setTimeHear	src/SoccerTypes.cpp	/^bool Feature::setTimeHear( Time time )$/;"	f	class:Feature
setTimeLastCatch	src/WorldModel.cpp	/^void WorldModel::setTimeLastCatch( Time time )$/;"	f	class:WorldModel
setTimeLastHearMessage	src/WorldModel.cpp	/^bool WorldModel::setTimeLastHearMessage( Time time )$/;"	f	class:WorldModel
setTimeLastRefereeMessage	src/WorldModel.cpp	/^bool WorldModel::setTimeLastRefereeMessage( Time time )$/;"	f	class:WorldModel
setTimeLastSeeGlobalMessage	src/WorldModel.cpp	/^bool WorldModel::setTimeLastSeeGlobalMessage( Time time )$/;"	f	class:WorldModel
setTimeLastSeeMessage	src/WorldModel.cpp	/^bool WorldModel::setTimeLastSeeMessage( Time time )$/;"	f	class:WorldModel
setTimeLastSeen	src/Objects.cpp	/^bool Object::setTimeLastSeen( Time time)$/;"	f	class:Object
setTimeLastSeen	src/WorldModel.cpp	/^bool WorldModel::setTimeLastSeen( ObjectT o, Time time )$/;"	f	class:WorldModel
setTimeLastSenseMessage	src/WorldModel.cpp	/^bool WorldModel::setTimeLastSenseMessage( Time time )$/;"	f	class:WorldModel
setTimeRelativeAngles	src/Objects.cpp	/^bool PlayerObject::setTimeRelativeAngles( Time time )$/;"	f	class:PlayerObject
setTimeRelativePosition	src/Objects.cpp	/^bool Object::setTimeRelativePosition( Time time )$/;"	f	class:Object
setTimeSee	src/SoccerTypes.cpp	/^bool Feature::setTimeSee( Time time )$/;"	f	class:Feature
setTimeSense	src/SoccerTypes.cpp	/^bool Feature::setTimeSense( Time time )$/;"	f	class:Feature
setTimeSignal	src/SenseHandler.cpp	/^void SenseHandler::setTimeSignal( )$/;"	f	class:SenseHandler
setTimeStopped	src/SoccerTypes.cpp	/^bool Time::setTimeStopped( int iTime )$/;"	f	class:Time
setTimeTackle	src/Objects.cpp	/^bool PlayerObject::setTimeTackle( Time time )$/;"	f	class:PlayerObject
setTurnWithBallAngThr	src/PlayerSettings.cpp	/^bool PlayerSettings::setTurnWithBallAngThr( double d )$/;"	f	class:PlayerSettings
setTurnWithBallFreezeThr	src/PlayerSettings.cpp	/^bool PlayerSettings::setTurnWithBallFreezeThr( double d )$/;"	f	class:PlayerSettings
setType	src/Objects.cpp	/^bool Object::setType( ObjectT o )$/;"	f	class:Object
setUseOffside	src/ServerSettings.cpp	/^bool ServerSettings::setUseOffside( bool b )$/;"	f	class:ServerSettings
setValue	src/GenericValues.cpp	/^bool GenericValueT::setValue( const char *strValue )$/;"	f	class:GenericValueT
setValue	src/GenericValues.cpp	/^bool GenericValues::setValue( const char *strName, const char *strValue )$/;"	f	class:GenericValues
setValue	src/ServerSettings.cpp	/^bool ServerSettings::setValue( const char *strName, const char *strValue )$/;"	f	class:ServerSettings
setValues	src/Formations.cpp	/^bool PlayerTypeInfo::setValues( PlayerT pt,   double ax,   double ay,$/;"	f	class:PlayerTypeInfo
setVec	src/SoccerTypes.cpp	/^bool Feature::setVec( VecPosition   pos )$/;"	f	class:Feature
setVecPosition	src/Geometry.cpp	/^void VecPosition::setVecPosition( double dX, double dY, CoordSystemT cs)$/;"	f	class:VecPosition
setVerbose	src/ServerSettings.cpp	/^bool ServerSettings::setVerbose( bool b )$/;"	f	class:ServerSettings
setViewAngle	src/Objects.cpp	/^bool AgentObject::setViewAngle( ViewAngleT v )$/;"	f	class:AgentObject
setViewQuality	src/Objects.cpp	/^bool AgentObject::setViewQuality( ViewQualityT v )$/;"	f	class:AgentObject
setVisibleAngle	src/ServerSettings.cpp	/^bool ServerSettings::setVisibleAngle( double d )$/;"	f	class:ServerSettings
setVisibleDistance	src/ServerSettings.cpp	/^bool ServerSettings::setVisibleDistance( double d )$/;"	f	class:ServerSettings
setWindDir	src/ServerSettings.cpp	/^bool ServerSettings::setWindDir( double d )$/;"	f	class:ServerSettings
setWindForce	src/ServerSettings.cpp	/^bool ServerSettings::setWindForce( double d )$/;"	f	class:ServerSettings
setWindRand	src/ServerSettings.cpp	/^bool ServerSettings::setWindRand( double d )$/;"	f	class:ServerSettings
setWindRandom	src/ServerSettings.cpp	/^bool ServerSettings::setWindRandom( bool b )$/;"	f	class:ServerSettings
setX	src/Geometry.cpp	/^bool VecPosition::setX( double dX )$/;"	f	class:VecPosition
setXPosHome	src/Formations.cpp	/^bool FormationTypeInfo::setXPosHome( double x, int atIndex )$/;"	f	class:FormationTypeInfo
setY	src/Geometry.cpp	/^bool VecPosition::setY( double dY )$/;"	f	class:VecPosition
setYPosHome	src/Formations.cpp	/^bool FormationTypeInfo::setYPosHome( double y, int atIndex )$/;"	f	class:FormationTypeInfo
shallISaySomething	src/Player.cpp	/^bool Player::shallISaySomething( SoccerCommand socPri )$/;"	f	class:Player
show	src/Connection.cpp	/^void Connection::show( ostream os )$/;"	f	class:Connection
show	src/Formations.cpp	/^void FormationTypeInfo::show( ostream &os )$/;"	f	class:FormationTypeInfo
show	src/Formations.cpp	/^void Formations::show( ostream &os )$/;"	f	class:Formations
show	src/Formations.cpp	/^void PlayerTypeInfo::show( ostream &os )$/;"	f	class:PlayerTypeInfo
show	src/GenericValues.cpp	/^void GenericValueT::show( ostream& out, const char *strSeparator )$/;"	f	class:GenericValueT
show	src/GenericValues.cpp	/^void GenericValues::show( ostream& out, const char *strSeparator )$/;"	f	class:GenericValues
show	src/Geometry.cpp	/^void Circle::show( ostream& os)$/;"	f	class:Circle
show	src/Geometry.cpp	/^void Line::show( ostream& os)$/;"	f	class:Line
show	src/Geometry.cpp	/^void Rect::show( ostream& os )$/;"	f	class:Rect
show	src/Geometry.cpp	/^void VecPosition::show( CoordSystemT cs )$/;"	f	class:VecPosition
show	src/Objects.cpp	/^void AgentObject::show( const char * strTeamName, ostream & os )$/;"	f	class:AgentObject
show	src/Objects.cpp	/^void AgentObject::show( ostream& os )$/;"	f	class:AgentObject
show	src/Objects.cpp	/^void BallObject::show( ostream& os)$/;"	f	class:BallObject
show	src/Objects.cpp	/^void FixedObject::show( ostream & os )$/;"	f	class:FixedObject
show	src/Objects.cpp	/^void PlayerObject::show( const char* strTeamName , ostream & os )$/;"	f	class:PlayerObject
show	src/Objects.cpp	/^void PlayerObject::show( ostream & os )$/;"	f	class:PlayerObject
show	src/Objects.cpp	/^void Stamina::show( ostream & os)$/;"	f	class:Stamina
show	src/ServerSettings.cpp	/^void HeteroPlayerSettings::show( ostream &os )$/;"	f	class:HeteroPlayerSettings
show	src/SoccerTypes.cpp	/^void SoccerCommand::show( ostream& os )$/;"	f	class:SoccerCommand
show	src/SoccerTypes.cpp	/^void Time::show( ostream &os )$/;"	f	class:Time
show	src/WorldModel.cpp	/^void WorldModel::show( ObjectSetT set, ostream & os )$/;"	f	class:WorldModel
show	src/WorldModel.cpp	/^void WorldModel::show( ObjectT o, ostream &os )$/;"	f	class:WorldModel
show	src/WorldModel.cpp	/^void WorldModel::show( ostream & os )$/;"	f	class:WorldModel
showLogLevels	src/Logger.cpp	/^void Logger::showLogLevels( ostream &os )$/;"	f	class:Logger
showQueuedCommands	src/WorldModel.cpp	/^void WorldModel::showQueuedCommands( ostream & os )$/;"	f	class:WorldModel
showStringCommands	src/BasicCoach.cpp	/^void BasicCoach::showStringCommands( ostream& out )$/;"	f	class:BasicCoach
showStringCommands	src/Player.cpp	/^void Player::showStringCommands( ostream& out )$/;"	f	class:Player
sigalarmHandler	src/ActHandler.cpp	/^extern void CALLBACK sigalarmHandler(UINT , UINT , DWORD , DWORD , DWORD )$/;"	f
sign	src/Geometry.cpp	/^int sign( double d1 )$/;"	f
sinDeg	src/Geometry.cpp	/^double sinDeg( AngDeg x )$/;"	f
standardsituationen	src/PlayerTeams.cpp	/^SoccerCommand Player::standardsituationen()$/;"	f	class:Player
stdin_callback	src/BasicCoach.cpp	/^DWORD WINAPI stdin_callback( LPVOID v )$/;"	f
stdin_callback	src/Player.cpp	/^DWORD WINAPI stdin_callback( LPVOID v )$/;"	f
storePlayerMessage	src/WorldModelUpdate.cpp	/^bool WorldModel::storePlayerMessage( int iPlayer, char *strMsg, int iCycle )$/;"	f	class:WorldModel
str	src/Geometry.cpp	/^string VecPosition::str( CoordSystemT cs )$/;"	f	class:VecPosition
substitutePlayer	src/BasicCoach.cpp	/^void BasicCoach::substitutePlayer( int iPlayer, int iPlayerType )$/;"	f	class:BasicCoach
subtractOneFromGoalDiff	src/WorldModel.cpp	/^int WorldModel::subtractOneFromGoalDiff()$/;"	f	class:WorldModel
suitablePass1	src/Player.cpp	/^int Player::suitablePass1()$/;"	f	class:Player
tackle	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::tackle( )$/;"	f	class:BasicPlayer
tanDeg	src/Geometry.cpp	/^double tanDeg( AngDeg x )$/;"	f
teleportToPos	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::teleportToPos( VecPosition pos )$/;"	f	class:BasicPlayer
throughPass	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::throughPass( ObjectT o, VecPosition posEnd,$/;"	f	class:BasicPlayer
turnBackToPoint	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::turnBackToPoint( VecPosition pos, int iCycles )$/;"	f	class:BasicPlayer
turnBodyToObject	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::turnBodyToObject( ObjectT o )$/;"	f	class:BasicPlayer
turnBodyToPoint	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::turnBodyToPoint( VecPosition pos, int iCycles )$/;"	f	class:BasicPlayer
turnNeckToObject	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::turnNeckToObject( ObjectT o, SoccerCommand soc )$/;"	f	class:BasicPlayer
turnNeckToPoint	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::turnNeckToPoint(VecPosition pos, SoccerCommand soc)$/;"	f	class:BasicPlayer
turnWithBallTo	src/BasicPlayer.cpp	/^SoccerCommand BasicPlayer::turnWithBallTo( AngDeg ang, AngDeg, double )$/;"	f	class:BasicPlayer
updateAfterSeeMessage	src/WorldModelUpdate.cpp	/^bool WorldModel::updateAfterSeeMessage( )$/;"	f	class:WorldModel
updateAfterSenseMessage	src/WorldModelUpdate.cpp	/^bool WorldModel::updateAfterSenseMessage( )$/;"	f	class:WorldModel
updateAgentAndBallAfterSense	src/WorldModelUpdate.cpp	/^bool WorldModel::updateAgentAndBallAfterSense( )$/;"	f	class:WorldModel
updateAgentObjectAfterSee	src/WorldModelUpdate.cpp	/^bool WorldModel::updateAgentObjectAfterSee(  )$/;"	f	class:WorldModel
updateAll	src/WorldModelUpdate.cpp	/^bool WorldModel::updateAll( )$/;"	f	class:WorldModel
updateBallAfterKick	src/WorldModelUpdate.cpp	/^bool WorldModel::updateBallAfterKick( SoccerCommand soc )$/;"	f	class:WorldModel
updateBallForCollision	src/WorldModelUpdate.cpp	/^bool WorldModel::updateBallForCollision( VecPosition posAgent )$/;"	f	class:WorldModel
updateDynamicObjectAfterSee	src/WorldModelUpdate.cpp	/^bool WorldModel::updateDynamicObjectAfterSee( ObjectT o )$/;"	f	class:WorldModel
updateDynamicObjectForNextCycle	src/WorldModelUpdate.cpp	/^bool WorldModel::updateDynamicObjectForNextCycle( ObjectT obj, int iCycles)$/;"	f	class:WorldModel
updateObjectRelativeFromGlobal	src/WorldModelUpdate.cpp	/^bool WorldModel::updateObjectRelativeFromGlobal( ObjectT o )$/;"	f	class:WorldModel
updateParticlesAgent	src/WorldModelUpdate.cpp	/^void WorldModel::updateParticlesAgent( VecPosition vel, bool bAfterSense )$/;"	f	class:WorldModel
updateParticlesBall	src/WorldModelUpdate.cpp	/^void WorldModel::updateParticlesBall( VecPosition posArray[],$/;"	f	class:WorldModel
updateRelativeFromGlobal	src/WorldModelUpdate.cpp	/^bool WorldModel::updateRelativeFromGlobal()$/;"	f	class:WorldModel
updateSSToHeteroPlayerType	src/WorldModelUpdate.cpp	/^bool WorldModel::updateSSToHeteroPlayerType( int iIndex )$/;"	f	class:WorldModel
updateTime	src/SoccerTypes.cpp	/^bool Time::updateTime( int iTime )$/;"	f	class:Time
waitForNewInformation	src/WorldModel.cpp	/^bool WorldModel::waitForNewInformation( )$/;"	f	class:WorldModel
~BasicCoach	src/BasicCoach.cpp	/^BasicCoach::~BasicCoach( )$/;"	f	class:BasicCoach
~Connection	src/Connection.cpp	/^Connection::~Connection()$/;"	f	class:Connection
~GenericValueT	src/GenericValues.cpp	/^GenericValueT::~GenericValueT( )$/;"	f	class:GenericValueT
~GenericValues	src/GenericValues.cpp	/^GenericValues::~GenericValues( void )$/;"	f	class:GenericValues
~WorldModel	src/WorldModel.cpp	/^WorldModel::~WorldModel()$/;"	f	class:WorldModel
