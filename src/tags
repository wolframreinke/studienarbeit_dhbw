!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/reinke.wolfram-tit13\/data\/programFiles\/robocup\/src\/tit11\/missing --run aclocal-1.7$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACT	ActHandler.cpp	/^ActHandler* ACT; \/*!< Pointer to ActHandler class needed by signal handler *\/$/;"	v
ACT	BasicCoach.h	/^  ActHandler     *ACT; \/*!< ActHandler to which commands can be sent         *\/$/;"	m	class:BasicCoach
ACT	BasicPlayer.h	/^  ActHandler      *ACT; \/*!< ActHandler to which commands can be sent        *\/$/;"	m	class:BasicPlayer
ACT_ANTICIPATE_BALL	SoccerTypes.h	/^  ACT_ANTICIPATE_BALL,            \/*!< turn in anticipation for ball         *\/$/;"	e	enum:ActionT
ACT_CATCH_BALL	SoccerTypes.h	/^  ACT_CATCH_BALL,                 \/*!< catch the ball                        *\/$/;"	e	enum:ActionT
ACT_DEFEND_GOALLINE	SoccerTypes.h	/^  ACT_DEFEND_GOALLINE,            \/*!< defend the goalline (for goalkeeper   *\/$/;"	e	enum:ActionT
ACT_GOTO_STRATEGIC_POSITION	SoccerTypes.h	/^  ACT_GOTO_STRATEGIC_POSITION,    \/*!< go to a strategic position (dash)     *\/$/;"	e	enum:ActionT
ACT_HOLD_BALL	SoccerTypes.h	/^  ACT_HOLD_BALL                   \/*!< hold the ball                         *\/$/;"	e	enum:ActionT
ACT_ILLEGAL	SoccerTypes.h	/^  ACT_ILLEGAL,                    \/*!< illegal action (default)              *\/$/;"	e	enum:ActionT
ACT_INTERCEPT	SoccerTypes.h	/^  ACT_INTERCEPT,                  \/*!< intercept the ball                    *\/$/;"	e	enum:ActionT
ACT_INTERCEPT_SCORING_ATTEMPT	SoccerTypes.h	/^  ACT_INTERCEPT_SCORING_ATTEMPT,  \/*!< intercept ball heading to goal        *\/$/;"	e	enum:ActionT
ACT_KICK_BALL	SoccerTypes.h	/^  ACT_KICK_BALL,                  \/*!< kick the ball                         *\/$/;"	e	enum:ActionT
ACT_MARK	SoccerTypes.h	/^  ACT_MARK,                       \/*!< mark an opponent                      *\/$/;"	e	enum:ActionT
ACT_MOVE_TO_DEAD_BALL_POSITION	SoccerTypes.h	/^  ACT_MOVE_TO_DEAD_BALL_POSITION, \/*!< move to pos in dead ball situation    *\/$/;"	e	enum:ActionT
ACT_SEARCH_BALL	SoccerTypes.h	/^  ACT_SEARCH_BALL,                \/*!< search for the ball                   *\/$/;"	e	enum:ActionT
ACT_TACKLE	SoccerTypes.h	/^  ACT_TACKLE,                     \/*!< tackle the ball                       *\/$/;"	e	enum:ActionT
ACT_TELEPORT_AFTER_CATCH	SoccerTypes.h	/^  ACT_TELEPORT_AFTER_CATCH,       \/*!< teleport after catch (for goalkeeper) *\/$/;"	e	enum:ActionT
ACT_TELEPORT_TO_STRATEGIC_POSITION	SoccerTypes.h	/^  ACT_TELEPORT_TO_STRATEGIC_POSITION, \/*!< move to a strategic position(move)*\/$/;"	e	enum:ActionT
ACT_TURN_BODY_TO_CENTER	SoccerTypes.h	/^  ACT_TURN_BODY_TO_CENTER,        \/*!< turn body to center of field          *\/$/;"	e	enum:ActionT
ACT_WATCH_BALL	SoccerTypes.h	/^  ACT_WATCH_BALL,                 \/*!< watch the ball                        *\/$/;"	e	enum:ActionT
AMDEP_FALSE	Makefile	/^AMDEP_FALSE = #$/;"	m
AMDEP_TRUE	Makefile	/^AMDEP_TRUE = $/;"	m
AMTAR	Makefile	/^AMTAR = ${SHELL} \/home\/reinke.wolfram-tit13\/data\/programFiles\/robocup\/src\/tit11\/missing --run tar$/;"	m
AR	Makefile	/^AR = ar$/;"	m
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/reinke.wolfram-tit13\/data\/programFiles\/robocup\/src\/tit11\/missing --run autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/reinke.wolfram-tit13\/data\/programFiles\/robocup\/src\/tit11\/missing --run autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/reinke.wolfram-tit13\/data\/programFiles\/robocup\/src\/tit11\/missing --run automake-1.7$/;"	m
AWK	Makefile	/^AWK = gawk$/;"	m
ActHandler	ActHandler.cpp	/^ActHandler::ActHandler( Connection *c, WorldModel *wm, ServerSettings *ss )$/;"	f	class:ActHandler
ActHandler	ActHandler.h	/^class ActHandler {$/;"	c
ActionT	SoccerTypes.h	/^enum ActionT {$/;"	g
AgentObject	Objects.cpp	/^AgentObject::AgentObject( double dStaminaMax ):PlayerObject( )$/;"	f	class:AgentObject
AgentObject	Objects.h	/^class AgentObject: public PlayerObject$/;"	c
AngDeg	Geometry.h	/^typedef double AngDeg;  \/*!< Type definition for angles in radians. *\/$/;"	t
AngRad	Geometry.h	/^typedef double AngRad;  \/*!< Type definition for angles in degrees. *\/$/;"	t
BS_GOAL_LEFT	SoccerTypes.h	/^  BS_GOAL_LEFT,         \/*!< ball is in left goal     *\/$/;"	e	enum:BallStatusT
BS_GOAL_RIGHT	SoccerTypes.h	/^  BS_GOAL_RIGHT,        \/*!< ball is in right goal    *\/$/;"	e	enum:BallStatusT
BS_ILLEGAL	SoccerTypes.h	/^  BS_ILLEGAL,           \/*!< illegal ball status      *\/$/;"	e	enum:BallStatusT
BS_IN_FIELD	SoccerTypes.h	/^  BS_IN_FIELD,          \/*!< ball is in the field     *\/$/;"	e	enum:BallStatusT
BS_OUT_OF_FIELD	SoccerTypes.h	/^  BS_OUT_OF_FIELD       \/*!< ball is not in the field *\/$/;"	e	enum:BallStatusT
Ball	WorldModel.h	/^  BallObject    Ball;                    \/*!< information of the ball        *\/$/;"	m	class:WorldModel
BallObject	Objects.cpp	/^BallObject::BallObject():DynamicObject()$/;"	f	class:BallObject
BallObject	Objects.h	/^class BallObject: public DynamicObject$/;"	c
BallStatusT	SoccerTypes.h	/^enum BallStatusT {$/;"	g
BasicCoach	BasicCoach.cpp	/^BasicCoach::BasicCoach( ActHandler* act, WorldModel *wm, ServerSettings *ss,$/;"	f	class:BasicCoach
BasicCoach	BasicCoach.h	/^class BasicCoach$/;"	c
BasicPlayer	BasicPlayer.h	/^class BasicPlayer$/;"	c
CARTESIAN	Geometry.h	/^  CARTESIAN,$/;"	e	enum:CoordSystemT
CC	Makefile	/^CC = gcc$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -g -O2$/;"	m
CLEAR_BALL_DEFENSIVE	SoccerTypes.h	/^  CLEAR_BALL_DEFENSIVE,  \/*!< clear ball to the center line of the field    *\/$/;"	e	enum:ClearBallT
CLEAR_BALL_GOAL	SoccerTypes.h	/^  CLEAR_BALL_GOAL        \/*!< clear ball to position in front of the goal   *\/$/;"	e	enum:ClearBallT
CLEAR_BALL_ILLEGAL	SoccerTypes.h	/^  CLEAR_BALL_ILLEGAL,    \/*!< illegal clear ball                            *\/$/;"	e	enum:ClearBallT
CLEAR_BALL_OFFENSIVE	SoccerTypes.h	/^  CLEAR_BALL_OFFENSIVE,  \/*!< clear ball to the front of the field          *\/$/;"	e	enum:ClearBallT
CLEAR_BALL_OFFENSIVE_SIDE	SoccerTypes.h	/^  CLEAR_BALL_OFFENSIVE_SIDE, \/*!< clear ball to front and side of the field *\/$/;"	e	enum:ClearBallT
CMD_ATTENTIONTO	SoccerTypes.h	/^  CMD_ATTENTIONTO,  \/*!< pay attention to specific player   *\/$/;"	e	enum:CommandT
CMD_CATCH	SoccerTypes.h	/^  CMD_CATCH,        \/*!< catch command (goalie only)        *\/$/;"	e	enum:CommandT
CMD_CHANGEPLAYER	SoccerTypes.h	/^  CMD_CHANGEPLAYER, \/*!< change_player command (coach only) *\/$/;"	e	enum:CommandT
CMD_CHANGEVIEW	SoccerTypes.h	/^  CMD_CHANGEVIEW,   \/*!< change view command (player only)  *\/$/;"	e	enum:CommandT
CMD_DASH	SoccerTypes.h	/^  CMD_DASH,         \/*!< dash command (player only)         *\/$/;"	e	enum:CommandT
CMD_ILLEGAL	SoccerTypes.h	/^  CMD_ILLEGAL,      \/*!< illegal command *\/$/;"	e	enum:CommandT
CMD_KICK	SoccerTypes.h	/^  CMD_KICK,         \/*!< kick command (player only)         *\/$/;"	e	enum:CommandT
CMD_MAX_COMMANDS	SoccerTypes.h	/^  CMD_MAX_COMMANDS, \/*!< maximum number of commands         *\/$/;"	e	enum:CommandT
CMD_MOVE	SoccerTypes.h	/^  CMD_MOVE,         \/*!< move command                       *\/$/;"	e	enum:CommandT
CMD_POINTTO	SoccerTypes.h	/^  CMD_POINTTO,      \/*!< point arm towards a point on field *\/$/;"	e	enum:CommandT
CMD_SAY	SoccerTypes.h	/^  CMD_SAY,          \/*!< say command                        *\/$/;"	e	enum:CommandT
CMD_SENSEBODY	SoccerTypes.h	/^  CMD_SENSEBODY,    \/*!< sense_body command (player only)   *\/$/;"	e	enum:CommandT
CMD_Synch_See	SoccerTypes.h	/^  CMD_Synch_See     \/*!<synch_see command*\/$/;"	e	enum:CommandT
CMD_TACKLE	SoccerTypes.h	/^  CMD_TACKLE,       \/*!< tackle in current body direction   *\/$/;"	e	enum:CommandT
CMD_TURN	SoccerTypes.h	/^  CMD_TURN,         \/*!< turn command (player only)         *\/$/;"	e	enum:CommandT
CMD_TURNNECK	SoccerTypes.h	/^  CMD_TURNNECK,     \/*!< turn_neck command (player only)    *\/$/;"	e	enum:CommandT
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CTAGSFLAGS	Makefile	/^CTAGSFLAGS =$/;"	m
CXX	Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCPP	Makefile	/^CXXCPP = g++ -E$/;"	m
CXXDEPMODE	Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -g -O2$/;"	m
CXXLD	Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	Makefile	/^CXXLINK = $(LIBTOOL) --mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) \\$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
Circle	Geometry.cpp	/^Circle::Circle( )$/;"	f	class:Circle
Circle	Geometry.cpp	/^Circle::Circle( VecPosition pos, double dR )$/;"	f	class:Circle
Circle	Geometry.h	/^class Circle$/;"	c
ClearBallT	SoccerTypes.h	/^enum ClearBallT {$/;"	g
CommandT	SoccerTypes.h	/^enum CommandT {$/;"	g
Connection	Connection.cpp	/^Connection::Connection( )$/;"	f	class:Connection
Connection	Connection.cpp	/^Connection::Connection(const char *hostname, int port, int iMaxSize)$/;"	f	class:Connection
Connection	Connection.h	/^class Connection {$/;"	c
CoordSystemT	Geometry.h	/^enum CoordSystemT {$/;"	g
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)$/;"	m
DEFAULT_OPPONENT_NAME	SoccerTypes.h	71;"	d
DEFAULT_TEAM_NAME	SoccerTypes.h	70;"	d
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DEP_FILES	Makefile	/^DEP_FILES = .\/$(DEPDIR)\/ActHandler.Po \\$/;"	m
DIR_CENTER	SoccerTypes.h	/^  DIR_CENTER,                  \/*!< center direction                         *\/$/;"	e	enum:DirectionT
DIR_EAST	SoccerTypes.h	/^  DIR_EAST,                    \/*!< east direction                           *\/$/;"	e	enum:DirectionT
DIR_ILLEGAL	SoccerTypes.h	/^  DIR_ILLEGAL,                 \/*!< illegal message                          *\/$/;"	e	enum:DirectionT
DIR_MAX	SoccerTypes.h	/^  DIR_MAX                      \/*!< number of directions                     *\/$/;"	e	enum:DirectionT
DIR_NORTH	SoccerTypes.h	/^  DIR_NORTH,                   \/*!< north direction                          *\/$/;"	e	enum:DirectionT
DIR_NORTHEAST	SoccerTypes.h	/^  DIR_NORTHEAST,               \/*!< north east direction                     *\/$/;"	e	enum:DirectionT
DIR_NORTHWEST	SoccerTypes.h	/^  DIR_NORTHWEST,               \/*!< north west direction                     *\/$/;"	e	enum:DirectionT
DIR_SOUTH	SoccerTypes.h	/^  DIR_SOUTH,                   \/*!< south direction                          *\/$/;"	e	enum:DirectionT
DIR_SOUTHEAST	SoccerTypes.h	/^  DIR_SOUTHEAST,               \/*!< south east direction                     *\/$/;"	e	enum:DirectionT
DIR_SOUTHWEST	SoccerTypes.h	/^  DIR_SOUTHWEST,               \/*!< south west direction                     *\/$/;"	e	enum:DirectionT
DIR_WEST	SoccerTypes.h	/^  DIR_WEST,                    \/*!< west direction                           *\/$/;"	e	enum:DirectionT
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = Makefile.am Makefile.in$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(trilearn_coach_SOURCES) $(trilearn_player_SOURCES)$/;"	m
DRIBBLE_FAST	SoccerTypes.h	/^  DRIBBLE_FAST     \/*!< dribble fast by kicking ball up front               *\/$/;"	e	enum:DribbleT
DRIBBLE_ILLEGAL	SoccerTypes.h	/^  DRIBBLE_ILLEGAL, \/*!< illegal dribbling                                   *\/$/;"	e	enum:DribbleT
DRIBBLE_SLOW	SoccerTypes.h	/^  DRIBBLE_SLOW,    \/*!< dribble slowly but kicking ball slightly ahead      *\/$/;"	e	enum:DribbleT
DRIBBLE_WITHBALL	SoccerTypes.h	/^  DRIBBLE_WITHBALL,\/*!< dribble with ball very close                        *\/$/;"	e	enum:DribbleT
Deg2Rad	Geometry.cpp	/^AngRad Deg2Rad( AngDeg x )$/;"	f
DirectionT	SoccerTypes.h	/^enum DirectionT {$/;"	g
DribbleT	SoccerTypes.h	/^enum DribbleT {$/;"	g
DynamicObject	Objects.cpp	/^DynamicObject::DynamicObject( ):Object( )$/;"	f	class:DynamicObject
DynamicObject	Objects.h	/^class DynamicObject: public Object$/;"	c
ECHO	Makefile	/^ECHO = echo$/;"	m
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EDribble	Player.cpp	/^bool Player::EDribble(AngDeg& ang)$/;"	f	class:Player
EGREP	Makefile	/^EGREP = grep -E$/;"	m
EPSILON	Geometry.h	63;"	d
ETAGS	Makefile	/^ETAGS = etags$/;"	m
ETAGSFLAGS	Makefile	/^ETAGSFLAGS =$/;"	m
EXEEXT	Makefile	/^EXEEXT = $/;"	m
EXTRA_DIST	Makefile	/^EXTRA_DIST = formations.conf player.conf$/;"	m
Esuitable	Player.cpp	/^int Player::Esuitable()$/;"	f	class:Player
F77	Makefile	/^F77 = $/;"	m
FEATURE_BEST_SCORING_POINT	SoccerTypes.h	/^  FEATURE_BEST_SCORING_POINT,        \/*!< best scoring point in the goal     *\/$/;"	e	enum:FeatureT
FEATURE_FASTEST_OPPONENT_TO_BALL	SoccerTypes.h	/^  FEATURE_FASTEST_OPPONENT_TO_BALL,  \/*!< fastest opponent to the ball       *\/$/;"	e	enum:FeatureT
FEATURE_FASTEST_PLAYER_TO_BALL	SoccerTypes.h	/^  FEATURE_FASTEST_PLAYER_TO_BALL,    \/*!< fastest player to the ball         *\/$/;"	e	enum:FeatureT
FEATURE_FASTEST_TEAMMATE_TO_BALL	SoccerTypes.h	/^  FEATURE_FASTEST_TEAMMATE_TO_BALL,  \/*!< fastest teammate to the ball       *\/$/;"	e	enum:FeatureT
FEATURE_FASTEST_TEAMMATE_TO_BALL_NO_GOALIE	SoccerTypes.h	/^  FEATURE_FASTEST_TEAMMATE_TO_BALL_NO_GOALIE, \/*!< fastest teammate, no goali*\/$/;"	e	enum:FeatureT
FEATURE_ILLEGAL	SoccerTypes.h	/^  FEATURE_ILLEGAL,                   \/*!< illegal feature                    *\/$/;"	e	enum:FeatureT
FEATURE_INTERCEPTION_POINT_BALL	SoccerTypes.h	/^  FEATURE_INTERCEPTION_POINT_BALL,   \/*!< interception point ball            *\/$/;"	e	enum:FeatureT
FEATURE_INTERCEPT_CLOSE	SoccerTypes.h	/^  FEATURE_INTERCEPT_CLOSE,           \/*!< close interception point ball      *\/$/;"	e	enum:FeatureT
FEATURE_INTERCEPT_CYCLES_ME	SoccerTypes.h	/^  FEATURE_INTERCEPT_CYCLES_ME,       \/*!< nr of cycles for me to intercept   *\/$/;"	e	enum:FeatureT
FFLAGS	Makefile	/^FFLAGS = $/;"	m
FT_DEFENSIVE	SoccerTypes.h	/^  FT_DEFENSIVE,           \/*!< defensive formation type                *\/$/;"	e	enum:FormationT
FT_ILLEGAL	SoccerTypes.h	/^  FT_ILLEGAL,             \/*!< illegal formation type                  *\/$/;"	e	enum:FormationT
FT_INITIAL	SoccerTypes.h	/^  FT_INITIAL,             \/*!< initial formation type (before kick off)*\/$/;"	e	enum:FormationT
FT_OFFENSIVE	SoccerTypes.h	/^  FT_OFFENSIVE,       	  \/*!< offensive formation                 		*\/$/;"	e	enum:FormationT
Feature	SoccerTypes.cpp	/^Feature::Feature( )$/;"	f	class:Feature
Feature	SoccerTypes.cpp	/^Feature::Feature( Time timeSee, Time timeSense, Time timeHear, ObjectT object,$/;"	f	class:Feature
Feature	SoccerTypes.h	/^class Feature$/;"	c
FeatureT	SoccerTypes.h	/^enum FeatureT {$/;"	g
FixedObject	Objects.h	/^class FixedObject : public Object$/;"	c
Flags	WorldModel.h	/^  FixedObject   Flags[MAX_FLAGS];        \/*!< all flag information           *\/$/;"	m	class:WorldModel
FormationT	SoccerTypes.h	/^enum FormationT {$/;"	g
FormationTypeInfo	Formations.cpp	/^FormationTypeInfo::FormationTypeInfo( )$/;"	f	class:FormationTypeInfo
FormationTypeInfo	Formations.h	/^class FormationTypeInfo$/;"	c
Formations	Formations.cpp	/^Formations::Formations( const char *strFile, FormationT curFt, int iNr )$/;"	f	class:Formations
Formations	Formations.h	/^class Formations$/;"	c
GENERIC_VALUE_BOOLEAN	GenericValues.h	/^  GENERIC_VALUE_BOOLEAN = 2,$/;"	e	enum:GenericValueKind
GENERIC_VALUE_DOUBLE	GenericValues.h	/^  GENERIC_VALUE_DOUBLE  = 0,$/;"	e	enum:GenericValueKind
GENERIC_VALUE_INTEGER	GenericValues.h	/^  GENERIC_VALUE_INTEGER = 3,$/;"	e	enum:GenericValueKind
GENERIC_VALUE_STRING	GenericValues.h	/^  GENERIC_VALUE_STRING  = 1,$/;"	e	enum:GenericValueKind
GenericValueKind	GenericValues.h	/^enum GenericValueKind$/;"	g
GenericValueT	GenericValues.cpp	/^GenericValueT::GenericValueT( const char *str, void *vAddr, GenericValueKind t)$/;"	f	class:GenericValueT
GenericValueT	GenericValues.h	/^class GenericValueT$/;"	c
GenericValues	GenericValues.cpp	/^GenericValues::GenericValues( char *strName, int iMaxValues )$/;"	f	class:GenericValues
GenericValues	GenericValues.h	/^class GenericValues$/;"	c
Geometry	Geometry.h	/^class Geometry$/;"	c
HeteroPlayerSettings	ServerSettings.h	/^class HeteroPlayerSettings$/;"	c
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBS	Makefile	/^LIBS = -lpthread $/;"	m
LIBTOOL	Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LINK	Makefile	/^LINK = $(LIBTOOL) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\$/;"	m
LN_S	Makefile	/^LN_S = ln -s$/;"	m
LTCOMPILE	Makefile	/^LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) \\$/;"	m
LTCXXCOMPILE	Makefile	/^LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) \\$/;"	m
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
Line	Geometry.cpp	/^Line::Line( double dA, double dB, double dC )$/;"	f	class:Line
Line	Geometry.h	/^class Line$/;"	c
Lines	WorldModel.h	/^  FixedObject   Lines[MAX_LINES];        \/*!< all line information           *\/$/;"	m	class:WorldModel
Log	Logger.cpp	/^Logger Log;          \/*!<Logger instantation that can be used by all classes *\/$/;"	v
LogDraw	Logger.cpp	/^Logger LogDraw;      \/*!<Drawing logger instantation for all classes         *\/$/;"	v
Logger	Logger.cpp	/^Logger::Logger( ostream& o, int iMin, int iMax )$/;"	f	class:Logger
Logger	Logger.h	/^class Logger$/;"	c
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/reinke.wolfram-tit13\/data\/programFiles\/robocup\/src\/tit11\/missing --run makeinfo$/;"	m
MARK_BALL	SoccerTypes.h	/^  MARK_BALL        \/*!< mark ball (stand on obj-ball line)                  *\/$/;"	e	enum:MarkT
MARK_BISECTOR	SoccerTypes.h	/^  MARK_BISECTOR,   \/*!< mark bisector stand between goal,obj and ball,obj   *\/$/;"	e	enum:MarkT
MARK_GOAL	SoccerTypes.h	/^  MARK_GOAL,       \/*!< mark goal (stand on obj-goal line)                  *\/$/;"	e	enum:MarkT
MARK_ILLEGAL	SoccerTypes.h	/^  MARK_ILLEGAL,    \/*!< illegal marking                                     *\/$/;"	e	enum:MarkT
MAX_FEATURES	SoccerTypes.h	/^  MAX_FEATURES$/;"	e	enum:FeatureT
MAX_FLAGS	SoccerTypes.h	68;"	d
MAX_FORMATION_TYPES	SoccerTypes.h	/^  MAX_FORMATION_TYPES$/;"	e	enum:FormationT
MAX_HEADER	Logger.h	69;"	d
MAX_HETERO_PLAYERS	SoccerTypes.h	64;"	d
MAX_LINES	SoccerTypes.h	69;"	d
MAX_LOG_LINE	Logger.h	68;"	d
MAX_MSG	SoccerTypes.h	65;"	d
MAX_OPPONENTS	SoccerTypes.h	63;"	d
MAX_PLAYER_TYPES	SoccerTypes.h	/^  MAX_PLAYER_TYPES$/;"	e	enum:PlayerT
MAX_SAY_MSG	SoccerTypes.h	66;"	d
MAX_TEAMMATES	SoccerTypes.h	62;"	d
MAX_TEAM_NAME_LENGTH	SoccerTypes.h	67;"	d
MarkT	SoccerTypes.h	/^enum MarkT {$/;"	g
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
OBJECT_BALL	SoccerTypes.h	/^  OBJECT_BALL,             \/*!< Ball                     *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_B_0	SoccerTypes.h	/^  OBJECT_FLAG_B_0,         \/*!< Flag bottom 0            *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_B_L_10	SoccerTypes.h	/^  OBJECT_FLAG_B_L_10,      \/*!< Flag bottom left 10      *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_B_L_20	SoccerTypes.h	/^  OBJECT_FLAG_B_L_20,      \/*!< Flag bottom left 20      *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_B_L_30	SoccerTypes.h	/^  OBJECT_FLAG_B_L_30,      \/*!< Flag bottom left 30      *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_B_L_40	SoccerTypes.h	/^  OBJECT_FLAG_B_L_40,      \/*!< Flag bottom left 40      *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_B_L_50	SoccerTypes.h	/^  OBJECT_FLAG_B_L_50,      \/*!< Flag bottom left 50      *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_B_R_10	SoccerTypes.h	/^  OBJECT_FLAG_B_R_10,      \/*!< Flag bottom right 10     *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_B_R_20	SoccerTypes.h	/^  OBJECT_FLAG_B_R_20,      \/*!< Flag bottom right 20     *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_B_R_30	SoccerTypes.h	/^  OBJECT_FLAG_B_R_30,      \/*!< Flag bottom right 30     *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_B_R_40	SoccerTypes.h	/^  OBJECT_FLAG_B_R_40,      \/*!< Flag bottom right 40     *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_B_R_50	SoccerTypes.h	/^  OBJECT_FLAG_B_R_50,      \/*!< Flag bottom right 50     *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_C	SoccerTypes.h	/^  OBJECT_FLAG_C,           \/*!< Flag center field        *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_C_B	SoccerTypes.h	/^  OBJECT_FLAG_C_B,         \/*!< Flag center bottom       *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_C_T	SoccerTypes.h	/^  OBJECT_FLAG_C_T,         \/*!< Flag top center          *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_G_L_B	SoccerTypes.h	/^  OBJECT_FLAG_G_L_B,       \/*!< Flag goal left bottom    *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_G_L_T	SoccerTypes.h	/^  OBJECT_FLAG_G_L_T,       \/*!< Flag goal left top       *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_G_R_B	SoccerTypes.h	/^  OBJECT_FLAG_G_R_B,       \/*!< Flag goal right bottom   *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_G_R_T	SoccerTypes.h	/^  OBJECT_FLAG_G_R_T,       \/*!< Flag goal right top      *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_L_0	SoccerTypes.h	/^  OBJECT_FLAG_L_0,         \/*!< Flag left 0              *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_L_B	SoccerTypes.h	/^  OBJECT_FLAG_L_B,         \/*!< Flag left bottom         *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_L_B_10	SoccerTypes.h	/^  OBJECT_FLAG_L_B_10,      \/*!< Flag left bottom 10      *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_L_B_20	SoccerTypes.h	/^  OBJECT_FLAG_L_B_20,      \/*!< Flag left bottom 20      *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_L_B_30	SoccerTypes.h	/^  OBJECT_FLAG_L_B_30,      \/*!< Flag left bottom 30      *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_L_T	SoccerTypes.h	/^  OBJECT_FLAG_L_T,         \/*!< Flag left top            *\/   \/\/ 53 flags$/;"	e	enum:ObjectT
OBJECT_FLAG_L_T_10	SoccerTypes.h	/^  OBJECT_FLAG_L_T_10,      \/*!< Flag left bottom 10      *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_L_T_20	SoccerTypes.h	/^  OBJECT_FLAG_L_T_20,      \/*!< Flag left bottom 20      *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_L_T_30	SoccerTypes.h	/^  OBJECT_FLAG_L_T_30,      \/*!< Flag left bottom 30      *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_P_L_B	SoccerTypes.h	/^  OBJECT_FLAG_P_L_B,       \/*!< Flag penaly left bottom  *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_P_L_C	SoccerTypes.h	/^  OBJECT_FLAG_P_L_C,       \/*!< Flag penaly left center  *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_P_L_T	SoccerTypes.h	/^  OBJECT_FLAG_P_L_T,       \/*!< Flag penaly left top     *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_P_R_B	SoccerTypes.h	/^  OBJECT_FLAG_P_R_B,       \/*!< Flag penaly right bottom *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_P_R_C	SoccerTypes.h	/^  OBJECT_FLAG_P_R_C,       \/*!< Flag penaly right center *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_P_R_T	SoccerTypes.h	/^  OBJECT_FLAG_P_R_T,       \/*!< Flag penaly right top    *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_R_0	SoccerTypes.h	/^  OBJECT_FLAG_R_0,         \/*!< Flag right 0             *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_R_B	SoccerTypes.h	/^  OBJECT_FLAG_R_B,         \/*!< Flag right bottom        *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_R_B_10	SoccerTypes.h	/^  OBJECT_FLAG_R_B_10,      \/*!< Flag right bottom 10     *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_R_B_20	SoccerTypes.h	/^  OBJECT_FLAG_R_B_20,      \/*!< Flag right bottom 20     *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_R_B_30	SoccerTypes.h	/^  OBJECT_FLAG_R_B_30,      \/*!< Flag right bottom 30     *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_R_T	SoccerTypes.h	/^  OBJECT_FLAG_R_T,         \/*!< Flag right top           *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_R_T_10	SoccerTypes.h	/^  OBJECT_FLAG_R_T_10,      \/*!< Flag right top 10        *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_R_T_20	SoccerTypes.h	/^  OBJECT_FLAG_R_T_20,      \/*!< Flag right top 20        *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_R_T_30	SoccerTypes.h	/^  OBJECT_FLAG_R_T_30,      \/*!< Flag right top 30        *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_T_0	SoccerTypes.h	/^  OBJECT_FLAG_T_0,         \/*!< Flag top left 0          *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_T_L_10	SoccerTypes.h	/^  OBJECT_FLAG_T_L_10,      \/*!< Flag top left 10         *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_T_L_20	SoccerTypes.h	/^  OBJECT_FLAG_T_L_20,      \/*!< Flag top left 20         *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_T_L_30	SoccerTypes.h	/^  OBJECT_FLAG_T_L_30,      \/*!< Flag top left 30         *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_T_L_40	SoccerTypes.h	/^  OBJECT_FLAG_T_L_40,      \/*!< Flag top left 40         *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_T_L_50	SoccerTypes.h	/^  OBJECT_FLAG_T_L_50,      \/*!< Flag top left 50         *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_T_R_10	SoccerTypes.h	/^  OBJECT_FLAG_T_R_10,      \/*!< Flag top right 10        *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_T_R_20	SoccerTypes.h	/^  OBJECT_FLAG_T_R_20,      \/*!< Flag top right 20        *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_T_R_30	SoccerTypes.h	/^  OBJECT_FLAG_T_R_30,      \/*!< Flag top right 30        *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_T_R_40	SoccerTypes.h	/^  OBJECT_FLAG_T_R_40,      \/*!< Flag top right 40        *\/$/;"	e	enum:ObjectT
OBJECT_FLAG_T_R_50	SoccerTypes.h	/^  OBJECT_FLAG_T_R_50,      \/*!< Flag top right 50        *\/$/;"	e	enum:ObjectT
OBJECT_GOAL_L	SoccerTypes.h	/^  OBJECT_GOAL_L,           \/*!< Left goal                *\/    \/\/ 2 goals$/;"	e	enum:ObjectT
OBJECT_GOAL_R	SoccerTypes.h	/^  OBJECT_GOAL_R,           \/*!< Right goal               *\/$/;"	e	enum:ObjectT
OBJECT_GOAL_UNKNOWN	SoccerTypes.h	/^  OBJECT_GOAL_UNKNOWN,     \/*!< Unknown goal             *\/$/;"	e	enum:ObjectT
OBJECT_ILLEGAL	SoccerTypes.h	/^  OBJECT_ILLEGAL,          \/*!< illegal object           *\/$/;"	e	enum:ObjectT
OBJECT_LINE_B	SoccerTypes.h	/^  OBJECT_LINE_B,           \/*!< Bottom line              *\/$/;"	e	enum:ObjectT
OBJECT_LINE_L	SoccerTypes.h	/^  OBJECT_LINE_L,           \/*!< Left line                *\/    \/\/ 4 lines$/;"	e	enum:ObjectT
OBJECT_LINE_R	SoccerTypes.h	/^  OBJECT_LINE_R,           \/*!< Right line               *\/$/;"	e	enum:ObjectT
OBJECT_LINE_T	SoccerTypes.h	/^  OBJECT_LINE_T,           \/*!< Top line                 *\/$/;"	e	enum:ObjectT
OBJECT_MAX_OBJECTS	SoccerTypes.h	/^  OBJECT_MAX_OBJECTS       \/*!< maximum nr of objects    *\/ \/\/ 90$/;"	e	enum:ObjectT
OBJECT_OPPONENT_1	SoccerTypes.h	/^  OBJECT_OPPONENT_1,       \/*!< Opponent nr 1            *\/    \/\/ opponents 73$/;"	e	enum:ObjectT
OBJECT_OPPONENT_10	SoccerTypes.h	/^  OBJECT_OPPONENT_10,      \/*!< Opponent nr 10           *\/$/;"	e	enum:ObjectT
OBJECT_OPPONENT_11	SoccerTypes.h	/^  OBJECT_OPPONENT_11,      \/*!< Opponent nr 11           *\/$/;"	e	enum:ObjectT
OBJECT_OPPONENT_2	SoccerTypes.h	/^  OBJECT_OPPONENT_2,       \/*!< Opponent nr 2            *\/$/;"	e	enum:ObjectT
OBJECT_OPPONENT_3	SoccerTypes.h	/^  OBJECT_OPPONENT_3,       \/*!< Opponent nr 3            *\/$/;"	e	enum:ObjectT
OBJECT_OPPONENT_4	SoccerTypes.h	/^  OBJECT_OPPONENT_4,       \/*!< Opponent nr 4            *\/$/;"	e	enum:ObjectT
OBJECT_OPPONENT_5	SoccerTypes.h	/^  OBJECT_OPPONENT_5,       \/*!< Opponent nr 5            *\/$/;"	e	enum:ObjectT
OBJECT_OPPONENT_6	SoccerTypes.h	/^  OBJECT_OPPONENT_6,       \/*!< Opponent nr 6            *\/$/;"	e	enum:ObjectT
OBJECT_OPPONENT_7	SoccerTypes.h	/^  OBJECT_OPPONENT_7,       \/*!< Opponent nr 7            *\/$/;"	e	enum:ObjectT
OBJECT_OPPONENT_8	SoccerTypes.h	/^  OBJECT_OPPONENT_8,       \/*!< Opponent nr 8            *\/$/;"	e	enum:ObjectT
OBJECT_OPPONENT_9	SoccerTypes.h	/^  OBJECT_OPPONENT_9,       \/*!< Opponent nr 9            *\/$/;"	e	enum:ObjectT
OBJECT_OPPONENT_GOALIE	SoccerTypes.h	/^  OBJECT_OPPONENT_GOALIE,  \/*!< Goalie of opponent side  *\/$/;"	e	enum:ObjectT
OBJECT_OPPONENT_UNKNOWN	SoccerTypes.h	/^  OBJECT_OPPONENT_UNKNOWN, \/*!< Opponent nr unknown      *\/    \/\/ 84$/;"	e	enum:ObjectT
OBJECT_PLAYER_UNKNOWN	SoccerTypes.h	/^  OBJECT_PLAYER_UNKNOWN,   \/*!< Unknown player           *\/$/;"	e	enum:ObjectT
OBJECT_SET_FLAGS	SoccerTypes.h	/^  OBJECT_SET_FLAGS,            \/*!< flags                           *\/$/;"	e	enum:ObjectSetT
OBJECT_SET_ILLEGAL	SoccerTypes.h	/^  OBJECT_SET_ILLEGAL           \/*!< illegal                         *\/$/;"	e	enum:ObjectSetT
OBJECT_SET_LINES	SoccerTypes.h	/^  OBJECT_SET_LINES,            \/*!< lines                           *\/$/;"	e	enum:ObjectSetT
OBJECT_SET_OPPONENTS	SoccerTypes.h	/^  OBJECT_SET_OPPONENTS,        \/*!< opponents                       *\/$/;"	e	enum:ObjectSetT
OBJECT_SET_PLAYERS	SoccerTypes.h	/^  OBJECT_SET_PLAYERS,          \/*!< players                         *\/$/;"	e	enum:ObjectSetT
OBJECT_SET_TEAMMATES	SoccerTypes.h	/^  OBJECT_SET_TEAMMATES,        \/*!< teammates                       *\/$/;"	e	enum:ObjectSetT
OBJECT_SET_TEAMMATES_NO_GOALIE	SoccerTypes.h	/^  OBJECT_SET_TEAMMATES_NO_GOALIE,\/*!< teammates without the goalie  *\/$/;"	e	enum:ObjectSetT
OBJECT_TEAMMATE_1	SoccerTypes.h	/^  OBJECT_TEAMMATE_1,       \/*!< Teammate nr 1            *\/    \/\/ teammates 61$/;"	e	enum:ObjectT
OBJECT_TEAMMATE_10	SoccerTypes.h	/^  OBJECT_TEAMMATE_10,      \/*!< Teammate nr 10           *\/$/;"	e	enum:ObjectT
OBJECT_TEAMMATE_11	SoccerTypes.h	/^  OBJECT_TEAMMATE_11,      \/*!< Teammate nr 11           *\/$/;"	e	enum:ObjectT
OBJECT_TEAMMATE_2	SoccerTypes.h	/^  OBJECT_TEAMMATE_2,       \/*!< Teammate nr 2            *\/$/;"	e	enum:ObjectT
OBJECT_TEAMMATE_3	SoccerTypes.h	/^  OBJECT_TEAMMATE_3,       \/*!< Teammate nr 3            *\/$/;"	e	enum:ObjectT
OBJECT_TEAMMATE_4	SoccerTypes.h	/^  OBJECT_TEAMMATE_4,       \/*!< Teammate nr 4            *\/$/;"	e	enum:ObjectT
OBJECT_TEAMMATE_5	SoccerTypes.h	/^  OBJECT_TEAMMATE_5,       \/*!< Teammate nr 5            *\/$/;"	e	enum:ObjectT
OBJECT_TEAMMATE_6	SoccerTypes.h	/^  OBJECT_TEAMMATE_6,       \/*!< Teammate nr 6            *\/$/;"	e	enum:ObjectT
OBJECT_TEAMMATE_7	SoccerTypes.h	/^  OBJECT_TEAMMATE_7,       \/*!< Teammate nr 7            *\/$/;"	e	enum:ObjectT
OBJECT_TEAMMATE_8	SoccerTypes.h	/^  OBJECT_TEAMMATE_8,       \/*!< Teammate nr 8            *\/$/;"	e	enum:ObjectT
OBJECT_TEAMMATE_9	SoccerTypes.h	/^  OBJECT_TEAMMATE_9,       \/*!< Teammate nr 9            *\/$/;"	e	enum:ObjectT
OBJECT_TEAMMATE_GOALIE	SoccerTypes.h	/^  OBJECT_TEAMMATE_GOALIE,  \/*!< Goalie of your side      *\/$/;"	e	enum:ObjectT
OBJECT_TEAMMATE_UNKNOWN	SoccerTypes.h	/^  OBJECT_TEAMMATE_UNKNOWN, \/*!< Teammate nr unkown       *\/$/;"	e	enum:ObjectT
OBJECT_UNKNOWN	SoccerTypes.h	/^  OBJECT_UNKNOWN,          \/*!< Unknown object           *\/$/;"	e	enum:ObjectT
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
Object	Objects.cpp	/^Object::Object( )$/;"	f	class:Object
Object	Objects.h	/^class Object$/;"	c
ObjectNames	SoccerTypes.cpp	/^const char * ObjectNames[] =$/;"	v
ObjectSetT	SoccerTypes.h	/^enum ObjectSetT$/;"	g
ObjectT	SoccerTypes.h	/^enum ObjectT { \/\/ don't change order$/;"	g
Opponents	WorldModel.h	/^  PlayerObject  Opponents[MAX_OPPONENTS];\/*!< information of all opponents   *\/$/;"	m	class:WorldModel
PACKAGE	Makefile	/^PACKAGE = trilearn_base_sources$/;"	m
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = jellekok@science.uva.nl$/;"	m
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = trilearn__base_sources$/;"	m
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = trilearn__base_sources 3.3$/;"	m
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = trilearn__base_sources$/;"	m
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 3.3$/;"	m
PASS_FAST	SoccerTypes.h	/^  PASS_FAST,       \/*!< pass fast to a teammate                             *\/$/;"	e	enum:PassT
PASS_ILLEGAL	SoccerTypes.h	/^  PASS_ILLEGAL,    \/*!< illegal pass                                        *\/$/;"	e	enum:PassT
PASS_NORMAL	SoccerTypes.h	/^  PASS_NORMAL      \/*!< pass normal to a teammate                           *\/$/;"	e	enum:PassT
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
PENALTY_AREA_LENGTH	SoccerTypes.h	75;"	d
PENALTY_AREA_WIDTH	SoccerTypes.h	76;"	d
PENALTY_X	SoccerTypes.h	77;"	d
PITCH_LENGTH	SoccerTypes.h	72;"	d
PITCH_MARGIN	SoccerTypes.h	74;"	d
PITCH_WIDTH	SoccerTypes.h	73;"	d
PLAYER	Player.h	51;"	d
PM_BACK_PASS_LEFT	SoccerTypes.h	/^  PM_BACK_PASS_LEFT,         \/*!< back_pass_l:       left team passed back   *\/$/;"	e	enum:PlayModeT
PM_BACK_PASS_RIGHT	SoccerTypes.h	/^  PM_BACK_PASS_RIGHT,        \/*!< back_pass_r:       right team passed back  *\/$/;"	e	enum:PlayModeT
PM_BEFORE_KICK_OFF	SoccerTypes.h	/^  PM_BEFORE_KICK_OFF,        \/*!< before_kick_off:   before kick off         *\/$/;"	e	enum:PlayModeT
PM_CORNER_KICK_LEFT	SoccerTypes.h	/^  PM_CORNER_KICK_LEFT,       \/*!< corner_kick_l:     corner kick left team   *\/$/;"	e	enum:PlayModeT
PM_CORNER_KICK_RIGHT	SoccerTypes.h	/^  PM_CORNER_KICK_RIGHT,      \/*!< corner_kick_r:     corner kick right team  *\/$/;"	e	enum:PlayModeT
PM_FREE_KICK_FAULT_LEFT	SoccerTypes.h	/^  PM_FREE_KICK_FAULT_LEFT,   \/*!< free_kick_fault_l: free_kick to yourself   *\/$/;"	e	enum:PlayModeT
PM_FREE_KICK_FAULT_RIGHT	SoccerTypes.h	/^  PM_FREE_KICK_FAULT_RIGHT,	 \/*!< free_kick_fault_r: free_kick to self   *\/$/;"	e	enum:PlayModeT
PM_FREE_KICK_LEFT	SoccerTypes.h	/^  PM_FREE_KICK_LEFT,         \/*!< free_kick_l:       free kick for left team *\/$/;"	e	enum:PlayModeT
PM_FREE_KICK_RIGHT	SoccerTypes.h	/^  PM_FREE_KICK_RIGHT,        \/*!< free_kick_r:       free kick for right team*\/$/;"	e	enum:PlayModeT
PM_FROZEN	SoccerTypes.h	/^  PM_FROZEN,                 \/*!< game play is frozen                        *\/$/;"	e	enum:PlayModeT
PM_GOAL_KICK_LEFT	SoccerTypes.h	/^  PM_GOAL_KICK_LEFT,         \/*!< goal_kick_l:       goal kick for left team *\/$/;"	e	enum:PlayModeT
PM_GOAL_KICK_RIGHT	SoccerTypes.h	/^  PM_GOAL_KICK_RIGHT,        \/*!< goal_kick_r:       goal kick for right team*\/$/;"	e	enum:PlayModeT
PM_GOAL_LEFT	SoccerTypes.h	/^  PM_GOAL_LEFT,              \/*!< goal_l:            goal scored by team left*\/$/;"	e	enum:PlayModeT
PM_GOAL_RIGHT	SoccerTypes.h	/^  PM_GOAL_RIGHT,             \/*!< goal_r:            goal scored by team righ*\/$/;"	e	enum:PlayModeT
PM_ILLEGAL	SoccerTypes.h	/^  PM_ILLEGAL                 \/*!< unknown playmode                           *\/$/;"	e	enum:PlayModeT
PM_INDIRECT_FREE_KICK_LEFT	SoccerTypes.h	/^  PM_INDIRECT_FREE_KICK_LEFT,\/*!< indirect_free_kick_l: ind. free kick left  *\/$/;"	e	enum:PlayModeT
PM_INDIRECT_FREE_KICK_RIGHT	SoccerTypes.h	/^  PM_INDIRECT_FREE_KICK_RIGHT,\/*!<indirect_free_kick_r: ind. free kick right *\/$/;"	e	enum:PlayModeT
PM_KICK_IN_LEFT	SoccerTypes.h	/^  PM_KICK_IN_LEFT,           \/*!< kick_in_l:         kick in for left team   *\/$/;"	e	enum:PlayModeT
PM_KICK_IN_RIGHT	SoccerTypes.h	/^  PM_KICK_IN_RIGHT,          \/*!< kick_in_r:         kick in for right team  *\/$/;"	e	enum:PlayModeT
PM_KICK_OFF_LEFT	SoccerTypes.h	/^  PM_KICK_OFF_LEFT,          \/*!< kick_off_l:        kick off for left team  *\/$/;"	e	enum:PlayModeT
PM_KICK_OFF_RIGHT	SoccerTypes.h	/^  PM_KICK_OFF_RIGHT,         \/*!< kick_off_r:        kick off for right team *\/$/;"	e	enum:PlayModeT
PM_OFFSIDE_LEFT	SoccerTypes.h	/^  PM_OFFSIDE_LEFT,           \/*!< offside_l:         offside for left team   *\/$/;"	e	enum:PlayModeT
PM_OFFSIDE_RIGHT	SoccerTypes.h	/^  PM_OFFSIDE_RIGHT,          \/*!< offside_r:         offside for right team  *\/$/;"	e	enum:PlayModeT
PM_PENALTY_READY_LEFT	SoccerTypes.h	/^  PM_PENALTY_READY_LEFT,     \/*!< penalty_ready_left ready for penalty l team*\/$/;"	e	enum:PlayModeT
PM_PENALTY_READY_RIGHT	SoccerTypes.h	/^  PM_PENALTY_READY_RIGHT,    \/*!< penalty_ready_right ready for pen r team   *\/$/;"	e	enum:PlayModeT
PM_PENALTY_SETUP_LEFT	SoccerTypes.h	/^  PM_PENALTY_SETUP_LEFT,     \/*!< penalty_setup_left left setups for penalty *\/$/;"	e	enum:PlayModeT
PM_PENALTY_SETUP_RIGHT	SoccerTypes.h	/^  PM_PENALTY_SETUP_RIGHT,    \/*!< penalty_setup_right right setup for penalty*\/$/;"	e	enum:PlayModeT
PM_PENALTY_TAKEN_LEFT	SoccerTypes.h	/^  PM_PENALTY_TAKEN_LEFT,     \/*!< penalty_taken_left  penalty started left   *\/$/;"	e	enum:PlayModeT
PM_PENALTY_TAKEN_RIGHT	SoccerTypes.h	/^  PM_PENALTY_TAKEN_RIGHT,    \/*!< penalty_taken_right penalty started right  *\/$/;"	e	enum:PlayModeT
PM_PLAY_ON	SoccerTypes.h	/^  PM_PLAY_ON,                \/*!< play_on:           play on (during match)  *\/$/;"	e	enum:PlayModeT
PM_QUIT	SoccerTypes.h	/^  PM_QUIT,                   \/*!< quit                                       *\/$/;"	e	enum:PlayModeT
PM_TIME_OVER	SoccerTypes.h	/^  PM_TIME_OVER,              \/*!< time_over:         time over (after match) *\/$/;"	e	enum:PlayModeT
POLAR	Geometry.h	/^  POLAR$/;"	e	enum:CoordSystemT
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PS	BasicPlayer.h	/^  PlayerSettings  *PS;  \/*!< All parameters used for the player              *\/$/;"	m	class:BasicPlayer
PS	SenseHandler.h	/^  PlayerSettings *PS;        \/*!< PlayerSettings with all client settings    *\/$/;"	m	class:SenseHandler
PS	WorldModel.h	/^  PlayerSettings *PS;                     \/*!< Reference to all client params*\/$/;"	m	class:WorldModel
PS_ALL	SoccerTypes.h	/^  PS_ALL                  \/*!< all players         *\/$/;"	e	enum:PlayerSetT
PS_ATTACKERS	SoccerTypes.h	/^  PS_ATTACKERS,           \/*!< all attackers       *\/$/;"	e	enum:PlayerSetT
PS_DEFENDERS	SoccerTypes.h	/^  PS_DEFENDERS,           \/*!< all defenders       *\/$/;"	e	enum:PlayerSetT
PS_MIDFIELDERS	SoccerTypes.h	/^  PS_MIDFIELDERS,         \/*!< all midfielders     *\/$/;"	e	enum:PlayerSetT
PT_ATTACKER	SoccerTypes.h	/^  PT_ATTACKER,            \/*!< central attacker    *\/$/;"	e	enum:PlayerT
PT_ATTACKER_WING	SoccerTypes.h	/^  PT_ATTACKER_WING,       \/*!< wing attacker       *\/$/;"	e	enum:PlayerT
PT_DEFENDER_CENTRAL	SoccerTypes.h	/^  PT_DEFENDER_CENTRAL,    \/*!< central defender    *\/$/;"	e	enum:PlayerT
PT_DEFENDER_SWEEPER	SoccerTypes.h	/^  PT_DEFENDER_SWEEPER,    \/*!< sweeper defender    *\/$/;"	e	enum:PlayerT
PT_DEFENDER_WING	SoccerTypes.h	/^  PT_DEFENDER_WING,       \/*!< wing defender       *\/$/;"	e	enum:PlayerT
PT_GOALKEEPER	SoccerTypes.h	/^  PT_GOALKEEPER,          \/*!< goalkeeper          *\/$/;"	e	enum:PlayerT
PT_ILLEGAL	SoccerTypes.h	/^  PT_ILLEGAL,             \/*!< illegal player type *\/$/;"	e	enum:PlayerT
PT_MIDFIELDER_CENTER	SoccerTypes.h	/^  PT_MIDFIELDER_CENTER,   \/*!< central midfielder  *\/$/;"	e	enum:PlayerT
PT_MIDFIELDER_WING	SoccerTypes.h	/^  PT_MIDFIELDER_WING,     \/*!< wing midfielder     *\/$/;"	e	enum:PlayerT
Parse	Parse.h	/^class Parse$/;"	c
PassT	SoccerTypes.h	/^enum PassT {$/;"	g
PlayModeT	SoccerTypes.h	/^enum PlayModeT {$/;"	g
Player	Player.cpp	/^Player::Player( ActHandler* act, WorldModel *wm, ServerSettings *ss,$/;"	f	class:Player
Player	Player.h	/^class Player:public BasicPlayer$/;"	c
PlayerObject	Objects.cpp	/^PlayerObject::PlayerObject( ):DynamicObject( )$/;"	f	class:PlayerObject
PlayerObject	Objects.h	/^class PlayerObject: public DynamicObject$/;"	c
PlayerSetT	SoccerTypes.h	/^enum PlayerSetT {$/;"	g
PlayerSettings	PlayerSettings.cpp	/^PlayerSettings::PlayerSettings( ) : GenericValues("PlayerSettings", 27)$/;"	f	class:PlayerSettings
PlayerSettings	PlayerSettings.h	/^class PlayerSettings : public GenericValues$/;"	c
PlayerT	SoccerTypes.h	/^enum PlayerT {$/;"	g
PlayerTypeInfo	Formations.cpp	/^PlayerTypeInfo::PlayerTypeInfo( PlayerT pt, double dAttrX, double dAttrY,$/;"	f	class:PlayerTypeInfo
PlayerTypeInfo	Formations.cpp	/^PlayerTypeInfo::PlayerTypeInfo()$/;"	f	class:PlayerTypeInfo
PlayerTypeInfo	Formations.h	/^class PlayerTypeInfo$/;"	c
RANLIB	Makefile	/^RANLIB = ranlib$/;"	m
REFC_BACK_PASS_LEFT	SoccerTypes.h	/^  REFC_BACK_PASS_LEFT,         \/*!< back_pass_l:       left team passed back *\/$/;"	e	enum:RefereeMessageT
REFC_BACK_PASS_RIGHT	SoccerTypes.h	/^  REFC_BACK_PASS_RIGHT,        \/*!< back_pass_r:       right team passed back*\/$/;"	e	enum:RefereeMessageT
REFC_BEFORE_KICK_OFF	SoccerTypes.h	/^  REFC_BEFORE_KICK_OFF,        \/*!< before_kick_off:   before kick off       *\/$/;"	e	enum:RefereeMessageT
REFC_CORNER_KICK_LEFT	SoccerTypes.h	/^  REFC_CORNER_KICK_LEFT,       \/*!< corner_kick_l:     corner kick left team *\/$/;"	e	enum:RefereeMessageT
REFC_CORNER_KICK_RIGHT	SoccerTypes.h	/^  REFC_CORNER_KICK_RIGHT,      \/*!< corner_kick_r:     corner kick right team*\/$/;"	e	enum:RefereeMessageT
REFC_DROP_BALL	SoccerTypes.h	/^  REFC_DROP_BALL,              \/*!< drop_ball:         ball is dropped       *\/$/;"	e	enum:RefereeMessageT
REFC_FOUL_LEFT	SoccerTypes.h	/^  REFC_FOUL_LEFT,              \/*!< foul_l:            foul made by left     *\/$/;"	e	enum:RefereeMessageT
REFC_FOUL_RIGHT	SoccerTypes.h	/^  REFC_FOUL_RIGHT,             \/*!< foul_r:            foul made by right    *\/$/;"	e	enum:RefereeMessageT
REFC_FREE_KICK_FAULT_LEFT	SoccerTypes.h	/^  REFC_FREE_KICK_FAULT_LEFT,   \/*!< free_kick_fault_l: free_kick to yourself *\/$/;"	e	enum:RefereeMessageT
REFC_FREE_KICK_FAULT_RIGHT	SoccerTypes.h	/^  REFC_FREE_KICK_FAULT_RIGHT,  \/*!< free_kick_fault_r: free_kick to yourself *\/$/;"	e	enum:RefereeMessageT
REFC_FREE_KICK_LEFT	SoccerTypes.h	/^  REFC_FREE_KICK_LEFT,         \/*!< free_kick_l:       free kick left team   *\/$/;"	e	enum:RefereeMessageT
REFC_FREE_KICK_RIGHT	SoccerTypes.h	/^  REFC_FREE_KICK_RIGHT,        \/*!< free_kick_r:       free kick right team  *\/$/;"	e	enum:RefereeMessageT
REFC_FROZEN	SoccerTypes.h	/^  REFC_FROZEN,                 \/*!< frozen:            game play is frozen   *\/$/;"	e	enum:RefereeMessageT
REFC_GOALIE_CATCH_BALL_LEFT	SoccerTypes.h	/^  REFC_GOALIE_CATCH_BALL_LEFT, \/*!< goalie_catch_ball_l: left goalie catch   *\/$/;"	e	enum:RefereeMessageT
REFC_GOALIE_CATCH_BALL_RIGHT	SoccerTypes.h	/^  REFC_GOALIE_CATCH_BALL_RIGHT,\/*!< goalie_catch_ball_r: right goalie catch  *\/$/;"	e	enum:RefereeMessageT
REFC_GOAL_KICK_LEFT	SoccerTypes.h	/^  REFC_GOAL_KICK_LEFT,         \/*!< goal_kick_l:       goal kick left team   *\/$/;"	e	enum:RefereeMessageT
REFC_GOAL_KICK_RIGHT	SoccerTypes.h	/^  REFC_GOAL_KICK_RIGHT,        \/*!< goal_kick_r:       goal kick right team  *\/$/;"	e	enum:RefereeMessageT
REFC_GOAL_LEFT	SoccerTypes.h	/^  REFC_GOAL_LEFT,              \/*!< goal_l:            goal made by left     *\/$/;"	e	enum:RefereeMessageT
REFC_GOAL_RIGHT	SoccerTypes.h	/^  REFC_GOAL_RIGHT,             \/*!< goal_r:            goal made by right    *\/$/;"	e	enum:RefereeMessageT
REFC_HALF_TIME	SoccerTypes.h	/^  REFC_HALF_TIME,              \/*!< half_time:         it is half time       *\/$/;"	e	enum:RefereeMessageT
REFC_ILLEGAL	SoccerTypes.h	/^  REFC_ILLEGAL,                \/*!< unknown message                          *\/$/;"	e	enum:RefereeMessageT
REFC_INDIRECT_FREE_KICK_LEFT	SoccerTypes.h	/^  REFC_INDIRECT_FREE_KICK_LEFT,\/*!< indirect_free_kick_l: ind. free kick left*\/$/;"	e	enum:RefereeMessageT
REFC_INDIRECT_FREE_KICK_RIGHT	SoccerTypes.h	/^  REFC_INDIRECT_FREE_KICK_RIGHT,\/*!< indirect_free_kick_r: ind freekick right*\/$/;"	e	enum:RefereeMessageT
REFC_KICK_IN_LEFT	SoccerTypes.h	/^  REFC_KICK_IN_LEFT,           \/*!< kick_in_l:         kick in for left team *\/$/;"	e	enum:RefereeMessageT
REFC_KICK_IN_RIGHT	SoccerTypes.h	/^  REFC_KICK_IN_RIGHT,          \/*!< kick_in_r:         kick in for right team*\/$/;"	e	enum:RefereeMessageT
REFC_KICK_OFF_LEFT	SoccerTypes.h	/^  REFC_KICK_OFF_LEFT,          \/*!< kick_off_l:        kickoff for left team *\/$/;"	e	enum:RefereeMessageT
REFC_KICK_OFF_RIGHT	SoccerTypes.h	/^  REFC_KICK_OFF_RIGHT,         \/*!< kick_off_r:        kickoff for right team*\/$/;"	e	enum:RefereeMessageT
REFC_OFFSIDE_LEFT	SoccerTypes.h	/^  REFC_OFFSIDE_LEFT,           \/*!< offside_l          offside left          *\/$/;"	e	enum:RefereeMessageT
REFC_OFFSIDE_RIGHT	SoccerTypes.h	/^  REFC_OFFSIDE_RIGHT,          \/*!< offside_r          offside right         *\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_DRAW	SoccerTypes.h	/^  REFC_PENALTY_DRAW            \/*!< penalty_draw        penalty result = draw*\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_FOUL_LEFT	SoccerTypes.h	/^  REFC_PENALTY_FOUL_LEFT,      \/*!< penalty_foul_left   penalty foul l team  *\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_FOUL_RIGHT	SoccerTypes.h	/^  REFC_PENALTY_FOUL_RIGHT,     \/*!< penalty_foul_right  penalty foul r team  *\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_MISS_LEFT	SoccerTypes.h	/^  REFC_PENALTY_MISS_LEFT,      \/*!< penalty_miss_left   penalty missed r team*\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_MISS_RIGHT	SoccerTypes.h	/^  REFC_PENALTY_MISS_RIGHT,     \/*!< penalty_miss_right  penalty missed l team*\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_ONFIELD_LEFT	SoccerTypes.h	/^  REFC_PENALTY_ONFIELD_LEFT,   \/*!< penalty_onfield_left pen. on left field  *\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_ONFIELD_RIGHT	SoccerTypes.h	/^  REFC_PENALTY_ONFIELD_RIGHT,  \/*!< penalty_onfield_right pen. on right field*\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_READY_LEFT	SoccerTypes.h	/^  REFC_PENALTY_READY_LEFT,     \/*!< penalty_ready_left  ready for pen. l team*\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_READY_RIGHT	SoccerTypes.h	/^  REFC_PENALTY_READY_RIGHT,    \/*!< penalty_ready_right ready for pen. r team*\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_SCORE_LEFT	SoccerTypes.h	/^  REFC_PENALTY_SCORE_LEFT,     \/*!< penalty_score_left  penalty score l team *\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_SCORE_RIGHT	SoccerTypes.h	/^  REFC_PENALTY_SCORE_RIGHT,    \/*!< penalty_score_right penalty score r team *\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_SETUP_LEFT	SoccerTypes.h	/^  REFC_PENALTY_SETUP_LEFT,     \/*!< penalty_setup_left left setup for penalty*\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_SETUP_RIGHT	SoccerTypes.h	/^  REFC_PENALTY_SETUP_RIGHT,    \/*!< penalty_setup_right right setups for pen.*\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_TAKEN_LEFT	SoccerTypes.h	/^  REFC_PENALTY_TAKEN_LEFT,     \/*!< penalty_ready_left  pen. taken by  l team*\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_TAKEN_RIGHT	SoccerTypes.h	/^  REFC_PENALTY_TAKEN_RIGHT,    \/*!< penalty_ready_right pen. taken by  r team*\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_WINNER_LEFT	SoccerTypes.h	/^  REFC_PENALTY_WINNER_LEFT,    \/*!< penalty_winner_l    penalty won by r team*\/$/;"	e	enum:RefereeMessageT
REFC_PENALTY_WINNER_RIGHT	SoccerTypes.h	/^  REFC_PENALTY_WINNER_RIGHT,   \/*!< penalty_winner_r    penalty won by l team*\/$/;"	e	enum:RefereeMessageT
REFC_PLAY_ON	SoccerTypes.h	/^  REFC_PLAY_ON,                \/*!< play_on:           play on (during match)*\/$/;"	e	enum:RefereeMessageT
REFC_QUIT	SoccerTypes.h	/^  REFC_QUIT,                   \/*!< quit:              quit                  *\/$/;"	e	enum:RefereeMessageT
REFC_TIME_EXTENDED	SoccerTypes.h	/^  REFC_TIME_EXTENDED,          \/*!< time_extended:     time cont. overtime   *\/$/;"	e	enum:RefereeMessageT
REFC_TIME_OVER	SoccerTypes.h	/^  REFC_TIME_OVER,              \/*!< time_over:         time over(after match)*\/$/;"	e	enum:RefereeMessageT
REFC_TIME_UP	SoccerTypes.h	/^  REFC_TIME_UP,                \/*!< time_up:           match has finished    *\/$/;"	e	enum:RefereeMessageT
REFC_TIME_UP_WITHOUT_A_TEAM	SoccerTypes.h	/^  REFC_TIME_UP_WITHOUT_A_TEAM, \/*!< time_up_without_a_team: match finished   *\/$/;"	e	enum:RefereeMessageT
Rad2Deg	Geometry.cpp	/^AngDeg Rad2Deg( AngRad x )$/;"	f
Rect	Geometry.cpp	/^Rect::Rect( VecPosition pos, VecPosition pos2 )$/;"	f	class:Rect
Rect	Geometry.h	/^class Rect$/;"	c
RefereeMessageT	SoccerTypes.h	/^enum RefereeMessageT {$/;"	g
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SIDE_ILLEGAL	SoccerTypes.h	/^  SIDE_ILLEGAL   \/*!< illegal SIDE *\/$/;"	e	enum:SideT
SIDE_LEFT	SoccerTypes.h	/^  SIDE_LEFT,     \/*!< left side    *\/$/;"	e	enum:SideT
SIDE_RIGHT	SoccerTypes.h	/^  SIDE_RIGHT,    \/*!< right SIDE   *\/$/;"	e	enum:SideT
SOURCES	Makefile	/^SOURCES = Connection.cpp \\$/;"	m
SS	ActHandler.h	/^  ServerSettings *SS;          \/*!< ServerSettings with server parameters    *\/$/;"	m	class:ActHandler
SS	BasicCoach.h	/^  ServerSettings *SS;  \/*!< All parameters used by the server                *\/$/;"	m	class:BasicCoach
SS	BasicPlayer.h	/^  ServerSettings  *SS;  \/*!< All parameters used by the server               *\/$/;"	m	class:BasicPlayer
SS	SenseHandler.h	/^  ServerSettings *SS;        \/*!< ServerSettings with all server settings    *\/$/;"	m	class:SenseHandler
SS	SoccerTypes.h	/^  ServerSettings *SS; \/*!< ServerSettings are used to check ranges of command*\/$/;"	m	class:SoccerCommand
SS	WorldModel.h	/^  ServerSettings *SS;                     \/*!< Reference to all server params*\/$/;"	m	class:WorldModel
STRIP	Makefile	/^STRIP = strip$/;"	m
SUCCEED_ALWAYS	SoccerTypes.h	/^  SUCCEED_ALWAYS,              \/*!< wil always succeed                       *\/$/;"	e	enum:SucceedT
SUCCEED_DOUBTFUL	SoccerTypes.h	/^  SUCCEED_DOUBTFUL,            \/*!< in some occassions it may succeed        *\/$/;"	e	enum:SucceedT
SUCCEED_ILLEGAL	SoccerTypes.h	/^  SUCCEED_ILLEGAL,             \/*!< illegal message                          *\/$/;"	e	enum:SucceedT
SUCCEED_NEVER	SoccerTypes.h	/^  SUCCEED_NEVER                \/*!< this will never succeed                  *\/$/;"	e	enum:SucceedT
SenseHandler	SenseHandler.cpp	/^SenseHandler::SenseHandler( Connection *c, WorldModel *wm, ServerSettings *ss,$/;"	f	class:SenseHandler
SenseHandler	SenseHandler.h	/^class SenseHandler {$/;"	c
ServerSettings	ServerSettings.cpp	/^ServerSettings::ServerSettings( ):GenericValues( "ServerSettings", 136 )$/;"	f	class:ServerSettings
ServerSettings	ServerSettings.h	/^class ServerSettings:public GenericValues$/;"	c
SideT	SoccerTypes.h	/^enum SideT {$/;"	g
SoccerCommand	SoccerTypes.cpp	/^SoccerCommand::SoccerCommand( CommandT com, char *msg )$/;"	f	class:SoccerCommand
SoccerCommand	SoccerTypes.cpp	/^SoccerCommand::SoccerCommand( CommandT com, double d1, double d2, double d3 )$/;"	f	class:SoccerCommand
SoccerCommand	SoccerTypes.h	/^class SoccerCommand$/;"	c
SoccerTypes	SoccerTypes.h	/^class SoccerTypes$/;"	c
Socket	Connection.h	/^} Socket ;$/;"	t	typeref:struct:_socket
Stamina	Objects.cpp	/^Stamina::Stamina( double dSta, double dEff, double dRec )$/;"	f	class:Stamina
Stamina	Objects.h	/^class Stamina$/;"	c
SucceedT	SoccerTypes.h	/^enum SucceedT  {$/;"	g
SynchSee	WorldModel.cpp	/^  SoccerCommand   WorldModel::SynchSee                (                                  )$/;"	f	class:WorldModel
TIREDNESS_AVERAGE	SoccerTypes.h	/^  TIREDNESS_AVERAGE,     \/*!< average tiredness                             *\/$/;"	e	enum:TiredNessT
TIREDNESS_BAD	SoccerTypes.h	/^  TIREDNESS_BAD,         \/*!< player starts to get tired                    *\/$/;"	e	enum:TiredNessT
TIREDNESS_GOOD	SoccerTypes.h	/^  TIREDNESS_GOOD,        \/*!< player is not tired at all                    *\/$/;"	e	enum:TiredNessT
TIREDNESS_ILLEGAL	SoccerTypes.h	/^  TIREDNESS_ILLEGAL,     \/*!< illegal tiredness value                       *\/$/;"	e	enum:TiredNessT
TIREDNESS_TERRIBLE	SoccerTypes.h	/^  TIREDNESS_TERRIBLE     \/*!< player is so tired it cannot move             *\/ $/;"	e	enum:TiredNessT
TIREDNESS_VERY_BAD	SoccerTypes.h	/^  TIREDNESS_VERY_BAD,    \/*!< player is so tired it can hardly move         *\/$/;"	e	enum:TiredNessT
Teammates	WorldModel.h	/^  PlayerObject  Teammates[MAX_TEAMMATES];\/*!< information of all teammates   *\/$/;"	m	class:WorldModel
Time	SoccerTypes.cpp	/^Time::Time( int iTime, int iStopped )$/;"	f	class:Time
Time	SoccerTypes.h	/^class Time$/;"	c
Timing	Logger.h	/^class Timing$/;"	c
TiredNessT	SoccerTypes.h	/^enum TiredNessT {$/;"	g
UnknownAngleValue	SoccerTypes.h	/^const AngDeg  UnknownAngleValue   = -1000.0; \/*!< indicates unknown angle    *\/$/;"	v
UnknownDoubleValue	SoccerTypes.h	/^const double  UnknownDoubleValue  = -1000.0; \/*!< indicates unknown double   *\/$/;"	v
UnknownIntValue	SoccerTypes.h	/^const int     UnknownIntValue     = -1000;   \/*!< indicates unknown int      *\/$/;"	v
UnknownMessageNr	SoccerTypes.h	/^const long    UnknownMessageNr    = -30;     \/*!< indicates unknown messagenr*\/$/;"	v
UnknownPlayers	WorldModel.h	/^  PlayerObject  UnknownPlayers[MAX_TEAMMATES+MAX_OPPONENTS];$/;"	m	class:WorldModel
UnknownTime	SoccerTypes.h	/^const int     UnknownTime         = -20;     \/*!< indicates unknown time     *\/$/;"	v
VA_ILLEGAL	SoccerTypes.h	/^  VA_ILLEGAL  \/*!< illegal view angle *\/$/;"	e	enum:ViewAngleT
VA_NARROW	SoccerTypes.h	/^  VA_NARROW,  \/*!< view angle narrow  *\/$/;"	e	enum:ViewAngleT
VA_NORMAL	SoccerTypes.h	/^  VA_NORMAL,  \/*!< view angle normal  *\/$/;"	e	enum:ViewAngleT
VA_WIDE	SoccerTypes.h	/^  VA_WIDE,    \/*!< view angle wide    *\/$/;"	e	enum:ViewAngleT
VERSION	Makefile	/^VERSION = 3.3$/;"	m
VQ_HIGH	SoccerTypes.h	/^  VQ_HIGH,    \/*!< view quality high    *\/$/;"	e	enum:ViewQualityT
VQ_ILLEGAL	SoccerTypes.h	/^  VQ_ILLEGAL  \/*!< illegal view quality *\/$/;"	e	enum:ViewQualityT
VQ_LOW	SoccerTypes.h	/^  VQ_LOW,     \/*!< view quality low     *\/$/;"	e	enum:ViewQualityT
VecPosition	Geometry.cpp	/^VecPosition::VecPosition( double x, double y, CoordSystemT cs )$/;"	f	class:VecPosition
VecPosition	Geometry.h	/^class VecPosition$/;"	c
ViewAngleT	SoccerTypes.h	/^enum ViewAngleT  {$/;"	g
ViewQualityT	SoccerTypes.h	/^enum ViewQualityT {$/;"	g
WM	ActHandler.h	/^  WorldModel     *WM;          \/*!< needed to set performed actions          *\/$/;"	m	class:ActHandler
WM	BasicCoach.h	/^  WorldModel     *WM;  \/*!< WorldModel that contains information of world    *\/$/;"	m	class:BasicCoach
WM	BasicPlayer.h	/^  WorldModel      *WM;  \/*!< WorldModel that contains information of world   *\/$/;"	m	class:BasicPlayer
WM	SenseHandler.h	/^  WorldModel     *WM;        \/*!< Worldmodel containing all data of the match*\/$/;"	m	class:SenseHandler
WorldModel	WorldModel.cpp	/^WorldModel::WorldModel( ServerSettings *ss, PlayerSettings *ps, $/;"	f	class:WorldModel
WorldModel	WorldModel.h	/^class WorldModel$/;"	c
_ACTHANDLER_	ActHandler.h	49;"	d
_BASICCOACH_	BasicCoach.h	49;"	d
_BASICPLAYER_	BasicPlayer.h	49;"	d
_CONNECTION_	Connection.h	49;"	d
_FORMATIONS_	Formations.h	69;"	d
_GENERIC_VALUES_	GenericValues.h	56;"	d
_GEOMETRY_	Geometry.h	52;"	d
_LOGGER_	Logger.h	51;"	d
_OBJECTS_	Objects.h	47;"	d
_PARSE_	Parse.h	49;"	d
_PlayerSettings_	PlayerSettings.h	50;"	d
_SENSEHANDLER_	SenseHandler.h	48;"	d
_SERVERSETTINGS_	ServerSettings.h	62;"	d
_SOCCERTYPES_	SoccerTypes.h	51;"	d
_WORLD_MODEL_	WorldModel.h	50;"	d
_socket	Connection.h	/^typedef struct _socket{$/;"	s
abcFormula	Geometry.cpp	/^int Geometry::abcFormula(double a, double b, double c, double *s1, double *s2)$/;"	f	class:Geometry
ac_ct_AR	Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_F77	Makefile	/^ac_ct_F77 = $/;"	m
ac_ct_RANLIB	Makefile	/^ac_ct_RANLIB = ranlib$/;"	m
ac_ct_STRIP	Makefile	/^ac_ct_STRIP = strip$/;"	m
accelerateBallToVelocity	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::accelerateBallToVelocity( VecPosition velDes )$/;"	f	class:BasicPlayer
acosDeg	Geometry.cpp	/^AngDeg acosDeg( double x )$/;"	f
addLogLevel	Logger.cpp	/^bool  Logger::addLogLevel( int iLevel )$/;"	f	class:Logger
addLogRange	Logger.cpp	/^bool  Logger::addLogRange( int iMin, int iMax )$/;"	f	class:Logger
addOneToGoalDiff	WorldModel.cpp	/^int WorldModel::addOneToGoalDiff( )$/;"	f	class:WorldModel
addSetting	GenericValues.cpp	/^bool GenericValues::addSetting( const char *strName, void *vAddress,$/;"	f	class:GenericValues
addToTime	SoccerTypes.cpp	/^bool Time::addToTime( int iCycles )$/;"	f	class:Time
agentObject	WorldModel.h	/^  AgentObject   agentObject;             \/*!< information of the agent itself*\/$/;"	m	class:WorldModel
alignNeckWithBody	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::alignNeckWithBody( )$/;"	f	class:BasicPlayer
allow_mult_default_type	ServerSettings.h	/^    bool allow_mult_default_type ;$/;"	m	class:ServerSettings
amIAgentToSaySomething	Player.cpp	/^bool Player::amIAgentToSaySomething( SoccerCommand socPri )$/;"	f	class:Player
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__fastdepCC_FALSE	Makefile	/^am__fastdepCC_FALSE = #$/;"	m
am__fastdepCC_TRUE	Makefile	/^am__fastdepCC_TRUE = $/;"	m
am__fastdepCXX_FALSE	Makefile	/^am__fastdepCXX_FALSE = #$/;"	m
am__fastdepCXX_TRUE	Makefile	/^am__fastdepCXX_TRUE = $/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__objects_1	Makefile	/^am__objects_1 = Connection.$(OBJEXT) SenseHandler.$(OBJEXT) \\$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am_trilearn_coach_OBJECTS	Makefile	/^am_trilearn_coach_OBJECTS = $(am__objects_1) BasicCoach.$(OBJEXT) \\$/;"	m
am_trilearn_player_OBJECTS	Makefile	/^am_trilearn_player_OBJECTS = $(am__objects_1) BasicPlayer.$(OBJEXT) \\$/;"	m
analyzeChangePlayerTypeMessage	SenseHandler.cpp	/^bool SenseHandler::analyzeChangePlayerTypeMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeCheckBall	SenseHandler.cpp	/^bool SenseHandler::analyzeCheckBall( char *strMsg )$/;"	f	class:SenseHandler
analyzeCoachMessage	SenseHandler.cpp	/^bool SenseHandler::analyzeCoachMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeFullStateMessage	SenseHandler.cpp	/^bool SenseHandler::analyzeFullStateMessage( char *strMsg )  $/;"	f	class:SenseHandler
analyzeHearMessage	SenseHandler.cpp	/^bool SenseHandler::analyzeHearMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeInitMessage	SenseHandler.cpp	/^bool SenseHandler::analyzeInitMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeMessage	SenseHandler.cpp	/^bool SenseHandler::analyzeMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzePlayerMessage	SenseHandler.cpp	/^bool SenseHandler::analyzePlayerMessage( int iTime, char *strMsg )$/;"	f	class:SenseHandler
analyzePlayerParamMessage	SenseHandler.cpp	/^bool SenseHandler::analyzePlayerParamMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzePlayerTypeMessage	SenseHandler.cpp	/^bool SenseHandler::analyzePlayerTypeMessage ( char *strMsg )$/;"	f	class:SenseHandler
analyzeSeeGlobalMessage	SenseHandler.cpp	/^bool SenseHandler::analyzeSeeGlobalMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeSeeMessage	SenseHandler.cpp	/^bool SenseHandler::analyzeSeeMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeSenseMessage	SenseHandler.cpp	/^bool SenseHandler::analyzeSenseMessage( char *strMsg )$/;"	f	class:SenseHandler
analyzeServerParamMessage	SenseHandler.cpp	/^bool SenseHandler::analyzeServerParamMessage( char *strMsg )$/;"	f	class:SenseHandler
angBodyAngleRelToNeck	Objects.h	/^  AngDeg       angBodyAngleRelToNeck; \/*!< Relative angle of body with neck  *\/$/;"	m	class:AgentObject
angGlobalBodyAngle	Objects.h	/^  AngDeg  angGlobalBodyAngle;    \/*!< Global body angle                      *\/$/;"	m	class:PlayerObject
angGlobalBodyAngleLastSee	Objects.h	/^  AngDeg  angGlobalBodyAngleLastSee;\/*!< Global body angle from last see msg *\/$/;"	m	class:PlayerObject
angGlobalNeckAngle	Objects.h	/^  AngDeg  angGlobalNeckAngle;    \/*!< Global neck angle                      *\/$/;"	m	class:PlayerObject
angRelativeBodyAngle	Objects.h	/^  AngDeg  angRelativeBodyAngle;  \/*!< Relative body angle to main player *\/$/;"	m	class:PlayerObject
angRelativeNeckAngle	Objects.h	/^  AngDeg  angRelativeNeckAngle;  \/*!< Relative neck angle to main player *\/$/;"	m	class:PlayerObject
asinDeg	Geometry.cpp	/^AngDeg asinDeg( double x )$/;"	f
atan2Deg	Geometry.cpp	/^double atan2Deg( double x, double y )$/;"	f
atanDeg	Geometry.cpp	/^AngDeg atanDeg( double x )$/;"	f
attackerMainLoop	Player.cpp	/^SoccerCommand Player::attackerMainLoop( )$/;"	f	class:Player
averageParticles	WorldModelUpdate.cpp	/^VecPosition WorldModel::averageParticles( VecPosition posArray[], int iLength )$/;"	f	class:WorldModel
bBehindBall	Formations.h	/^  bool    bBehindBall;\/*!< should player always stay behind the ball         *\/$/;"	m	class:PlayerTypeInfo
bContLoop	BasicCoach.h	/^  bool bContLoop;      \/*!< bool to indicate whether to stop or continue     *\/$/;"	m	class:BasicCoach
bContLoop	Player.h	/^  bool          bContLoop;               \/*!< is server is alive             *\/$/;"	m	class:Player
bForbidKickOffOffside	ServerSettings.h	/^  bool   bForbidKickOffOffside; \/*!< forbid_kick_off_offside: a boolean flag$/;"	m	class:ServerSettings
bFullStateL	ServerSettings.h	/^  bool   bFullStateL;       \/*!< fullstate_l: indicates full_state left team.*\/$/;"	m	class:ServerSettings
bFullStateR	ServerSettings.h	/^  bool   bFullStateR;       \/*!< fullstate_r: indicates full_state right team*\/$/;"	m	class:ServerSettings
bLogTimes	ServerSettings.h	/^  bool   bLogTimes;         \/*!< log_times: flag indicating whether ms should$/;"	m	class:ServerSettings
bNewInfo	WorldModel.h	/^  bool          bNewInfo;                \/*!< indicates new info from server *\/$/;"	m	class:WorldModel
bPenAllowMultKicks	ServerSettings.h	/^  bool   bPenAllowMultKicks;       \/*!< pen_allow_mult_kicks: allow multiple$/;"	m	class:ServerSettings
bRecordLog	ServerSettings.h	/^  bool   bRecordLog;        \/*!< record_log: flag indicating whether log record$/;"	m	class:ServerSettings
bSendLog	ServerSettings.h	/^  bool   bSendLog;          \/*!< send_log: flag indicating whether send client$/;"	m	class:ServerSettings
bSynchMode	ServerSettings.h	/^  bool   bSynchMode;        \/*!< synch_mode: indicates whether in sync. mode *\/$/;"	m	class:ServerSettings
bUseOffside	ServerSettings.h	/^  bool   bUseOffside;       \/*!< use_offside: a boolean flag indicating whether$/;"	m	class:ServerSettings
bVerbose	ServerSettings.h	/^  bool   bVerbose;          \/*!< verbose: flag indicating whether verbose mode$/;"	m	class:ServerSettings
bWindRandom	ServerSettings.h	/^  bool   bWindRandom;       \/*!< wind_random: random wind force and direction*\/$/;"	m	class:ServerSettings
back_dash_rate	ServerSettings.h	/^    double back_dash_rate ;$/;"	m	class:ServerSettings
binPROGRAMS_INSTALL	Makefile	/^binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)$/;"	m
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = trilearn_player trilearn_coach $/;"	m
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = trilearn_player$(EXEEXT) trilearn_coach$(EXEEXT)$/;"	m
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bsCheckBall	WorldModel.h	/^  BallStatusT   bsCheckBall;             \/*!< state of the ball              *\/$/;"	m	class:WorldModel
build	Makefile	/^build = x86_64-unknown-linux-gnu$/;"	m
build_alias	Makefile	/^build_alias = $/;"	m
build_cpu	Makefile	/^build_cpu = x86_64$/;"	m
build_os	Makefile	/^build_os = linux-gnu$/;"	m
build_vendor	Makefile	/^build_vendor = unknown$/;"	m
calculateAngleAgentWithPos	WorldModelUpdate.cpp	/^AngDeg WorldModel::calculateAngleAgentWithPos( VecPosition pos )$/;"	f	class:WorldModel
calculatePosAgentWith2Flags	WorldModelUpdate.cpp	/^VecPosition WorldModel::calculatePosAgentWith2Flags( ObjectT objFlag1,$/;"	f	class:WorldModel
calculateStateAgent	WorldModelUpdate.cpp	/^bool WorldModel::calculateStateAgent( VecPosition *posGlobal,$/;"	f	class:WorldModel
calculateStateAgent2	WorldModelUpdate.cpp	/^bool WorldModel::calculateStateAgent2( VecPosition *posGlobal,$/;"	f	class:WorldModel
calculateStateAgent3	WorldModelUpdate.cpp	/^bool WorldModel::calculateStateAgent3( VecPosition *posGlobal,$/;"	f	class:WorldModel
calculateStateBall	WorldModelUpdate.cpp	/^bool WorldModel::calculateStateBall( VecPosition *posGlobal,$/;"	f	class:WorldModel
calculateStatePlayer	WorldModelUpdate.cpp	/^bool WorldModel::calculateStatePlayer( ObjectT o, VecPosition *posGlobal,$/;"	f	class:WorldModel
calculateVelocityDynamicObject	WorldModelUpdate.cpp	/^VecPosition WorldModel::calculateVelocityDynamicObject( ObjectT o )$/;"	f	class:WorldModel
catchBall	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::catchBall()$/;"	f	class:BasicPlayer
checkParticlesAgent	WorldModelUpdate.cpp	/^int WorldModel::checkParticlesAgent( AngDeg angGlobalNeck  )$/;"	f	class:WorldModel
checkParticlesBall	WorldModelUpdate.cpp	/^void WorldModel::checkParticlesBall( VecPosition posArray[],$/;"	f	class:WorldModel
clearBall	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::clearBall( ClearBallT type, SideT s,AngDeg *angMax )$/;"	f	class:BasicPlayer
collideWithBall	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::collideWithBall( )$/;"	f	class:BasicPlayer
commandType	SoccerTypes.h	/^  CommandT     commandType; \/*!< type of this command                        *\/$/;"	m	class:SoccerCommand
communicate	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::communicate( char *str )$/;"	f	class:BasicPlayer
cond_newInfo	WorldModel.h	/^  pthread_cond_t   cond_newInfo;        \/*!< cond variable for bNewInfo      *\/$/;"	m	class:WorldModel
coneDribble	Player.cpp	/^bool Player::coneDribble(AngDeg& ang){$/;"	f	class:Player
connect	Connection.cpp	/^bool Connection::connect(const char *host, int port )$/;"	f	class:Connection
connection	ActHandler.h	/^  Connection     *connection;  \/*!< Connection with the server               *\/$/;"	m	class:ActHandler
connection	SenseHandler.h	/^  Connection* connection;    \/*!< Connection with server to receive messages *\/$/;"	m	class:SenseHandler
coordinateWith	WorldModelHighLevel.cpp	/^bool WorldModel::coordinateWith( ObjectT obj )$/;"	f	class:WorldModel
cosDeg	Geometry.cpp	/^double cosDeg( AngDeg x )$/;"	f
createInterceptFeatures	WorldModelHighLevel.cpp	/^void WorldModel::createInterceptFeatures( )$/;"	f	class:WorldModel
curFormation	Formations.h	/^  FormationT        curFormation;       \/*!< type of the current formation   *\/$/;"	m	class:Formations
dAngle	SoccerTypes.h	/^  double       dAngle;      \/*!< angle of this command (for turn,turn_neck)  *\/$/;"	m	class:SoccerCommand
dAttrX	Formations.h	/^  double  dAttrX;     \/*!< x attraction to the ball                          *\/$/;"	m	class:PlayerTypeInfo
dAttrY	Formations.h	/^  double  dAttrY;     \/*!< y attraction to the ball                          *\/$/;"	m	class:PlayerTypeInfo
dAudioCutDist	ServerSettings.h	/^  double dAudioCutDist;     \/*!< audio_cut_dist: maximum distance over which a$/;"	m	class:ServerSettings
dBallAccelMax	ServerSettings.h	/^  double dBallAccelMax;     \/*!< ball_accel_max: maximum acceleration of the$/;"	m	class:ServerSettings
dBallConfThr	PlayerSettings.h	/^  double dBallConfThr;           \/*!< confidence threshold below which ball$/;"	m	class:PlayerSettings
dBallDecay	ServerSettings.h	/^  double dBallDecay;        \/*!< ball_decay: ball speed decay per cycle      *\/$/;"	m	class:ServerSettings
dBallRand	ServerSettings.h	/^  double dBallRand;         \/*!< ball_rand: random error in ball movement    *\/$/;"	m	class:ServerSettings
dBallSize	ServerSettings.h	/^  double dBallSize;         \/*!< ball_size: the size (=radius) of the ball   *\/$/;"	m	class:ServerSettings
dBallSpeedMax	ServerSettings.h	/^  double dBallSpeedMax;     \/*!< ball_speed_max: maximum speed of the ball   *\/$/;"	m	class:ServerSettings
dBallWeight	ServerSettings.h	/^  double dBallWeight;       \/*!< ball_weight: weight of the ball (for wind)  *\/$/;"	m	class:ServerSettings
dCatchProbability	ServerSettings.h	/^  double dCatchProbability; \/*!< catch_probability: the probability for a$/;"	m	class:ServerSettings
dCatchableAreaL	ServerSettings.h	/^  double dCatchableAreaL;   \/*!< catchable_area_l: length of area around$/;"	m	class:ServerSettings
dCatchableAreaW	ServerSettings.h	/^  double dCatchableAreaW;   \/*!< catchable_area_w: width of area around$/;"	m	class:ServerSettings
dCkickMargin	ServerSettings.h	/^  double dCkickMargin;      \/*!< ckick_margin: corner kick margin, i.e. the$/;"	m	class:ServerSettings
dClearBallDist	PlayerSettings.h	/^  double dClearBallDist;         \/*!< distance before the penalty area to$/;"	m	class:PlayerSettings
dClearBallOppMaxDist	PlayerSettings.h	/^  double dClearBallOppMaxDist;   \/*!< radius in which opponent has to be to$/;"	m	class:PlayerSettings
dClearBallToSideAngle	PlayerSettings.h	/^  double dClearBallToSideAngle;  \/*!< minimum angle between opponents before$/;"	m	class:PlayerSettings
dConeWidth	PlayerSettings.h	/^  double dConeWidth;             \/*!< Cone width (at distance 1) to check for$/;"	m	class:PlayerSettings
dDashPowerRate	ServerSettings.h	/^  double dDashPowerRate;    \/*!< dash_power_rate: rate by which the 'Power'$/;"	m	class:HeteroPlayerSettings
dDashPowerRate	ServerSettings.h	/^  double dDashPowerRate;    \/*!< dash_power_rate: rate by which the 'Power'$/;"	m	class:ServerSettings
dDashPowerRateDeltaMax	ServerSettings.h	/^  double dDashPowerRateDeltaMax;   \/*!< dash_power_rate_delta_max: maximum $/;"	m	class:ServerSettings
dDashPowerRateDeltaMin	ServerSettings.h	/^  double dDashPowerRateDeltaMin;   \/*!< dash_power_rate_delta_min: minimum $/;"	m	class:ServerSettings
dDribbleAngThr	PlayerSettings.h	/^  double dDribbleAngThr;         \/*!< Threshold value for angle difference$/;"	m	class:PlayerSettings
dEffortDec	ServerSettings.h	/^  double dEffortDec;        \/*!< effort_dec: decrement step per cycle for$/;"	m	class:ServerSettings
dEffortDecThr	ServerSettings.h	/^  double dEffortDecThr;     \/*!< effort_dec_thr: percentage of stamina_max $/;"	m	class:ServerSettings
dEffortInc	ServerSettings.h	/^  double dEffortInc;        \/*!< effort_inc: increment step per cycle for$/;"	m	class:ServerSettings
dEffortIncThr	ServerSettings.h	/^  double dEffortIncThr;     \/*!< effort_incr_thr: percentage of stamina_max$/;"	m	class:ServerSettings
dEffortMax	ServerSettings.h	/^  double dEffortMax;        \/*!< effort_max: maximum player effort capacity  *\/$/;"	m	class:ServerSettings
dEffortMax	ServerSettings.h	/^  double dEffortMax;        \/*!< effort_max: maximum value for player effort *\/$/;"	m	class:HeteroPlayerSettings
dEffortMaxDeltaFactor	ServerSettings.h	/^  double dEffortMaxDeltaFactor;    \/*!< effort_max_delta_factor: amount delta$/;"	m	class:ServerSettings
dEffortMin	ServerSettings.h	/^  double dEffortMin;        \/*!< effort_min: minimum value for player effort *\/$/;"	m	class:HeteroPlayerSettings
dEffortMin	ServerSettings.h	/^  double dEffortMin;        \/*!< effort_min: minimum value for player effort *\/$/;"	m	class:ServerSettings
dEffortMinDeltaFactor	ServerSettings.h	/^  double dEffortMinDeltaFactor;    \/*!< effort_min_delta_factor: amount delta$/;"	m	class:ServerSettings
dExtraStamina	ServerSettings.h	/^  double dExtraStamina;            \/*!< extra_stamina: extra stamina for a$/;"	m	class:ServerSettings
dExtraStamina	ServerSettings.h	/^  double dExtraStamina;     \/*!< extra_stamina: extra stamina for heterogeneous$/;"	m	class:HeteroPlayerSettings
dExtraStaminaDeltaMax	ServerSettings.h	/^  double dExtraStaminaDeltaMax;    \/*!< extra_stamina_delta_max: maximum delta$/;"	m	class:ServerSettings
dExtraStaminaDeltaMin	ServerSettings.h	/^  double dExtraStaminaDeltaMin;    \/*!< extra_stamina_delta_min: minimum delta$/;"	m	class:ServerSettings
dFastPassEndSpeed	PlayerSettings.h	/^  double dFastPassEndSpeed;      \/*!< end speed ball when passed fast        *\/$/;"	m	class:PlayerSettings
dFractionWaitNoSee	PlayerSettings.h	/^  double dFractionWaitNoSee;     \/*!< % of simulation step that is waited$/;"	m	class:PlayerSettings
dFractionWaitSeeBegin	PlayerSettings.h	/^  double dFractionWaitSeeBegin;  \/*!< % of simulation step that is waited$/;"	m	class:PlayerSettings
dFractionWaitSeeEnd	PlayerSettings.h	/^  double dFractionWaitSeeEnd;    \/*!< % of simulation step that is waited$/;"	m	class:PlayerSettings
dGoalWidth	ServerSettings.h	/^  double dGoalWidth;        \/*!< goal_width: the width of the goal           *\/$/;"	m	class:ServerSettings
dInertiaMoment	ServerSettings.h	/^  double dInertiaMoment;    \/*!< inertia_moment: inertia moment of a player;$/;"	m	class:HeteroPlayerSettings
dInertiaMoment	ServerSettings.h	/^  double dInertiaMoment;    \/*!< inertia_moment: inertia moment of a player;$/;"	m	class:ServerSettings
dInertiaMomentDeltaFactor	ServerSettings.h	/^  double dInertiaMomentDeltaFactor;\/*!< inertia_moment_delta_factor: amount by$/;"	m	class:ServerSettings
dKickPowerRate	ServerSettings.h	/^  double dKickPowerRate;    \/*!< kick_power_rate: rate by which the 'Power'$/;"	m	class:ServerSettings
dKickRand	ServerSettings.h	/^  double dKickRand;         \/*!< kick_rand: random error in kick direction   *\/$/;"	m	class:HeteroPlayerSettings
dKickRand	ServerSettings.h	/^  double dKickRand;         \/*!< kick_rand: random error in kick direction   *\/$/;"	m	class:ServerSettings
dKickRandDeltaFactor	ServerSettings.h	/^  double dKickRandDeltaFactor;     \/*!< kick_rand_delta_factor: amount delta is$/;"	m	class:ServerSettings
dKickableMargin	ServerSettings.h	/^  double dKickableMargin;   \/*!< kickable_margin: margin around player in which$/;"	m	class:HeteroPlayerSettings
dKickableMargin	ServerSettings.h	/^  double dKickableMargin;   \/*!< kickable_margin: margin around player in which$/;"	m	class:ServerSettings
dKickableMarginDeltaMax	ServerSettings.h	/^  double dKickableMarginDeltaMax;  \/*!< kickable_margin_delta_max: maximum $/;"	m	class:ServerSettings
dKickableMarginDeltaMin	ServerSettings.h	/^  double dKickableMarginDeltaMin;  \/*!< kickable_margin_delta_min: minimum $/;"	m	class:ServerSettings
dMarkDistance	PlayerSettings.h	/^  double dMarkDistance;          \/*!< This is the distance the agent marks$/;"	m	class:PlayerSettings
dMaxX	Formations.h	/^  double  dMaxX;      \/*!< maximal x coordinate for this player type         *\/$/;"	m	class:PlayerTypeInfo
dMaxYPercentage	PlayerSettings.h	/^  double dMaxYPercentage;        \/*!< Maximum y percentage of the field width$/;"	m	class:PlayerSettings
dMaximalKickDist	ServerSettings.h	/^  double dMaximalKickDist;         \/*!< the maximum distance from a player for$/;"	m	class:ServerSettings
dMaximalKickDist	ServerSettings.h	/^  double dMaximalKickDist;  \/*!< the maximum distance from a player for$/;"	m	class:HeteroPlayerSettings
dMinX	Formations.h	/^  double  dMinX;      \/*!< minimal x coordinate for this player type         *\/$/;"	m	class:PlayerTypeInfo
dNewDashPowerRateDeltaMax	ServerSettings.h	/^  double dNewDashPowerRateDeltaMax;\/*!< new_dash_power_rate_delta_min: maximum$/;"	m	class:ServerSettings
dNewDashPowerRateDeltaMin	ServerSettings.h	/^  double dNewDashPowerRateDeltaMin;\/*!< new_dash_power_rate_delta_min: minimum$/;"	m	class:ServerSettings
dNewStaminaIncMaxDeltaFactor	ServerSettings.h	/^  double dNewStaminaIncMaxDeltaFactor;\/*!< stamina_inc_max_delta_factor: amount$/;"	m	class:ServerSettings
dOffsideActiveAreaSize	ServerSettings.h	/^  double dOffsideActiveAreaSize;\/*!< offside_active_area_size: offside active$/;"	m	class:ServerSettings
dOffsideKickMargin	ServerSettings.h	/^  double dOffsideKickMargin;\/*!< offside_kick_margin: offside kick margin,$/;"	m	class:ServerSettings
dPassEndSpeed	PlayerSettings.h	/^  double dPassEndSpeed;          \/*!< end speed ball when passed to teammate *\/$/;"	m	class:PlayerSettings
dPassExtraX	PlayerSettings.h	/^  double dPassExtraX;            \/*!< extra x value added to x coordinate of$/;"	m	class:PlayerSettings
dPenDistX	ServerSettings.h	/^  double dPenDistX;                \/*!< pen_dist_x: x distance for ball from$/;"	m	class:ServerSettings
dPenMaxGoalieDistX	ServerSettings.h	/^  double dPenMaxGoalieDistX;       \/*!< pen_max_goalie_dist_x: max goalie $/;"	m	class:ServerSettings
dPlayerAccelMax	ServerSettings.h	/^  double dPlayerAccelMax;   \/*!< player_accel_max: maximum acceleration of a$/;"	m	class:ServerSettings
dPlayerConfThr	PlayerSettings.h	/^  double dPlayerConfThr;         \/*!< confidence threshold below which player$/;"	m	class:PlayerSettings
dPlayerDecay	ServerSettings.h	/^  double dPlayerDecay;      \/*!< player_decay: player speed decay per cycle  *\/$/;"	m	class:HeteroPlayerSettings
dPlayerDecay	ServerSettings.h	/^  double dPlayerDecay;      \/*!< player_decay: player speed decay per cycle  *\/$/;"	m	class:ServerSettings
dPlayerDecayDeltaMax	ServerSettings.h	/^  double dPlayerDecayDeltaMax;     \/*!< player_decay_delta_max: maximum delta$/;"	m	class:ServerSettings
dPlayerDecayDeltaMin	ServerSettings.h	/^  double dPlayerDecayDeltaMin;     \/*!< player_decay_delta_min: minimum delta$/;"	m	class:ServerSettings
dPlayerDistTolerance	PlayerSettings.h	/^  double dPlayerDistTolerance;   \/*!< radius in which player has to be to be$/;"	m	class:PlayerSettings
dPlayerHighConfThr	PlayerSettings.h	/^  double dPlayerHighConfThr;     \/*!< confidence threshold above which player$/;"	m	class:PlayerSettings
dPlayerRand	ServerSettings.h	/^  double dPlayerRand;       \/*!< player_rand: random error in player movement*\/$/;"	m	class:ServerSettings
dPlayerSize	ServerSettings.h	/^  double dPlayerSize;       \/*!< dash_power_rate: rate by which the 'Power'$/;"	m	class:HeteroPlayerSettings
dPlayerSize	ServerSettings.h	/^  double dPlayerSize;       \/*!< player_size: the size (=radius) of a player *\/$/;"	m	class:ServerSettings
dPlayerSizeDeltaFactor	ServerSettings.h	/^  double dPlayerSizeDeltaFactor;   \/*!< player_size_delta_factor: amount delta$/;"	m	class:ServerSettings
dPlayerSpeedMax	ServerSettings.h	/^  double dPlayerSpeedMax;   \/*!< player_speed_max: maximum speed of a player *\/$/;"	m	class:HeteroPlayerSettings
dPlayerSpeedMax	ServerSettings.h	/^  double dPlayerSpeedMax;   \/*!< player_speed_max: maximum speed of a player *\/$/;"	m	class:ServerSettings
dPlayerSpeedMaxDeltaMax	ServerSettings.h	/^  double dPlayerSpeedMaxDeltaMax;  \/*!< player_speed_max_delta_max: maximum$/;"	m	class:ServerSettings
dPlayerSpeedMaxDeltaMin	ServerSettings.h	/^  double dPlayerSpeedMaxDeltaMin;  \/*!< player_speed_max_delta_min: minimum$/;"	m	class:ServerSettings
dPlayerWeight	ServerSettings.h	/^  double dPlayerWeight;     \/*!< player_weight: weight of a player (for wind)*\/$/;"	m	class:ServerSettings
dPlayerWhenToKick	PlayerSettings.h	/^  double dPlayerWhenToKick;      \/*!< percentage of kick power rate when kick$/;"	m	class:PlayerSettings
dPlayerWhenToTurnAngle	PlayerSettings.h	/^  double dPlayerWhenToTurnAngle; \/*!< angle when to turn to ball when moving *\/$/;"	m	class:PlayerSettings
dPower	SoccerTypes.h	/^  double       dPower;      \/*!< power of this command (for kick,dash)       *\/$/;"	m	class:SoccerCommand
dQuantizeStep	ServerSettings.h	/^  double dQuantizeStep;     \/*!< quantize_step: quantization step for distance$/;"	m	class:ServerSettings
dQuantizeStepL	ServerSettings.h	/^  double dQuantizeStepL;    \/*!< quantize_step_l: quantization step for$/;"	m	class:ServerSettings
dRecoverDec	ServerSettings.h	/^  double dRecoverDec;       \/*!< recover_dec: decrement step per cycle for$/;"	m	class:ServerSettings
dRecoverDecThr	ServerSettings.h	/^  double dRecoverDecThr;    \/*!< recover_dec_thr: percentage of stamina_max$/;"	m	class:ServerSettings
dRecoverMin	ServerSettings.h	/^  double dRecoverMin;       \/*!< recover_min: minimum player recovery        *\/$/;"	m	class:ServerSettings
dRelativeAngleChange	Objects.h	/^  double      dRelativeAngleChange;   \/*!< Relative angle change             *\/$/;"	m	class:DynamicObject
dRelativeDistanceChange	Objects.h	/^  double      dRelativeDistanceChange;\/*!< Relative distance change          *\/$/;"	m	class:DynamicObject
dShootRiskProbability	PlayerSettings.h	/^  double dShootRiskProbability;  \/*!< This is the probability for the ball to$/;"	m	class:PlayerSettings
dStaminaIncMax	ServerSettings.h	/^  double dStaminaIncMax;    \/*!< stamina_inc_max: maximum stamina increase of a$/;"	m	class:HeteroPlayerSettings
dStaminaIncMax	ServerSettings.h	/^  double dStaminaIncMax;    \/*!< stamina_inc_max: maximum stamina increase of a$/;"	m	class:ServerSettings
dStaminaIncMaxDeltaFactor	ServerSettings.h	/^  double dStaminaIncMaxDeltaFactor;\/*!< stamina_inc_max_delta_factor: amount by$/;"	m	class:ServerSettings
dStaminaMax	ServerSettings.h	/^  double dStaminaMax;       \/*!< stamina_max: maximum stamina of a player    *\/$/;"	m	class:ServerSettings
dStratAreaRadius	PlayerSettings.h	/^  double dStratAreaRadius;       \/*!< This is the radius around the strategic$/;"	m	class:PlayerSettings
dTackleBackDist	ServerSettings.h	/^  double dTackleBackDist;          \/*!< tackle_dist: distance at back of  player $/;"	m	class:ServerSettings
dTackleDist	ServerSettings.h	/^  double dTackleDist;              \/*!< tackle_dist: distance in front player $/;"	m	class:ServerSettings
dTackleExponent	ServerSettings.h	/^  double dTackleExponent;          \/*!< tackle_exponent: exponent need to $/;"	m	class:ServerSettings
dTacklePowerRate	ServerSettings.h	/^  double dTacklePowerRate;         \/*!< tacke_power_rate: acc. power tackle  *\/$/;"	m	class:ServerSettings
dTackleWidth	ServerSettings.h	/^  double dTackleWidth;             \/*!< tackle_width: distance to side of player$/;"	m	class:ServerSettings
dTotalVarPos	WorldModel.h	/^  double        dTotalVarPos;$/;"	m	class:WorldModel
dTotalVarVel	WorldModel.h	/^  double        dTotalVarVel;$/;"	m	class:WorldModel
dTurnWithBallAngThr	PlayerSettings.h	/^  double dTurnWithBallAngThr;    \/*!< Threshold value for angle difference$/;"	m	class:PlayerSettings
dTurnWithBallFreezeThr	PlayerSettings.h	/^  double dTurnWithBallFreezeThr; \/*!< Threshold value for ball speed that$/;"	m	class:PlayerSettings
dVisibleAngle	ServerSettings.h	/^  double dVisibleAngle;     \/*!< visible_angle: angle of the view cone of a$/;"	m	class:ServerSettings
dVisibleDistance	ServerSettings.h	/^  double dVisibleDistance;         \/*!< visible_distance: distance within which$/;"	m	class:ServerSettings
dWindDir	ServerSettings.h	/^  double dWindDir;          \/*!< wind_dir: the direction of the wind         *\/$/;"	m	class:ServerSettings
dWindForce	ServerSettings.h	/^  double dWindForce;        \/*!< wind_force: the force of the wind           *\/$/;"	m	class:ServerSettings
dWindRand	ServerSettings.h	/^  double dWindRand;         \/*!< wind_rand: random error in wind direction   *\/$/;"	m	class:ServerSettings
dX	SoccerTypes.h	/^  double       dX;          \/*!< x coordinate (for move)                     *\/$/;"	m	class:SoccerCommand
dY	SoccerTypes.h	/^  double       dY;          \/*!< y coordinate (for move)                     *\/$/;"	m	class:SoccerCommand
dashToPoint	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::dashToPoint( VecPosition pos, int iCycles )$/;"	f	class:BasicPlayer
dash_angle_step	ServerSettings.h	/^    double dash_angle_step ;$/;"	m	class:ServerSettings
datadir	Makefile	/^datadir = ${prefix}\/share$/;"	m
deMeer5	PlayerTeams.cpp	/^SoccerCommand Player::deMeer5(  )$/;"	f	class:Player
deMeer5_attacker	PlayerTeams.cpp	/^SoccerCommand Player::deMeer5_attacker()$/;"	f	class:Player
deMeer5_defender	PlayerTeams.cpp	/^SoccerCommand Player::deMeer5_defender( )$/;"	f	class:Player
deMeer5_goalie	PlayerTeams.cpp	/^SoccerCommand Player::deMeer5_goalie(  )$/;"	f	class:Player
deMeer5_midfielder	PlayerTeams.cpp	/^SoccerCommand Player::deMeer5_midfielder()$/;"	f	class:Player
defendGoalLine	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::defendGoalLine( double dDist )$/;"	f	class:BasicPlayer
defenderMainLoop	Player.cpp	/^SoccerCommand Player::defenderMainLoop( )$/;"	f	class:Player
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
directPass	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::directPass( VecPosition pos, PassT passType)$/;"	f	class:BasicPlayer
directTowards	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::directTowards( VecPosition posTurnTo,$/;"	f	class:BasicPlayer
disconnect	Connection.cpp	/^void Connection::disconnect( void )$/;"	f	class:Connection
distdir	Makefile	/^distdir = $(top_distdir)\/$(PACKAGE)-$(VERSION)$/;"	m
drand48	WorldModel.h	/^inline double drand48()$/;"	f
drawCoordinationGraph	WorldModel.cpp	/^void WorldModel::drawCoordinationGraph( )$/;"	f	class:WorldModel
dribble	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::dribble( AngDeg ang, DribbleT dribbleT )$/;"	f	class:BasicPlayer
emptyQueue	ActHandler.cpp	/^void ActHandler::emptyQueue( )$/;"	f	class:ActHandler
event_newInfo	WorldModel.h	/^  HANDLE           event_newInfo;       \/*!< event for bNewInfo              *\/$/;"	m	class:WorldModel
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
executeStringCommand	BasicCoach.cpp	/^bool BasicCoach::executeStringCommand( char *str)$/;"	f	class:BasicCoach
executeStringCommand	Player.cpp	/^bool Player::executeStringCommand( char *str)$/;"	f	class:Player
extra_half_time	ServerSettings.h	/^    int extra_half_time;$/;"	m	class:ServerSettings
formationType	Formations.h	/^  FormationT      formationType;               \/*!< type of this formation   *\/$/;"	m	class:FormationTypeInfo
formations	Formations.h	/^  FormationTypeInfo formations[ MAX_FORMATION_TYPES ]; \/*!< stored formations*\/$/;"	m	class:Formations
formations	Player.h	/^  Formations    *formations;             \/*!< all formation information      *\/$/;"	m	class:Player
formations	WorldModel.h	/^  Formations     *formations;             \/*!< Reference to formation used   *\/$/;"	m	class:WorldModel
freezeBall	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::freezeBall( )$/;"	f	class:BasicPlayer
getACoefficient	Geometry.cpp	/^double Line::getACoefficient() const$/;"	f	class:Line
getActiveInterceptionPointBall	BasicPlayer.cpp	/^VecPosition BasicPlayer::getActiveInterceptionPointBall( int *iCyclesBall,$/;"	f	class:BasicPlayer
getActualKickPowerRate	WorldModelHighLevel.cpp	/^double WorldModel::getActualKickPowerRate( )$/;"	f	class:WorldModel
getActualTurnAngle	WorldModelHighLevel.cpp	/^AngDeg WorldModel::getActualTurnAngle( AngDeg angTurn,double dSpeed,ObjectT o )$/;"	f	class:WorldModel
getAgentArmExpires	WorldModel.cpp	/^int WorldModel::getAgentArmExpires( )$/;"	f	class:WorldModel
getAgentArmMovable	WorldModel.cpp	/^bool WorldModel::getAgentArmMovable( )$/;"	f	class:WorldModel
getAgentArmPosition	WorldModel.cpp	/^VecPosition WorldModel::getAgentArmPosition( )$/;"	f	class:WorldModel
getAgentBodyAngleRelToNeck	WorldModel.cpp	/^AngDeg WorldModel::getAgentBodyAngleRelToNeck( ) const$/;"	f	class:WorldModel
getAgentEffort	WorldModel.cpp	/^double WorldModel::getAgentEffort( ) const$/;"	f	class:WorldModel
getAgentGlobalBodyAngle	WorldModel.cpp	/^AngDeg WorldModel::getAgentGlobalBodyAngle(  )$/;"	f	class:WorldModel
getAgentGlobalNeckAngle	WorldModel.cpp	/^AngDeg WorldModel::getAgentGlobalNeckAngle(  ) const$/;"	f	class:WorldModel
getAgentGlobalPosition	WorldModel.cpp	/^VecPosition WorldModel::getAgentGlobalPosition( ) const$/;"	f	class:WorldModel
getAgentGlobalVelocity	WorldModel.cpp	/^VecPosition WorldModel::getAgentGlobalVelocity( ) const$/;"	f	class:WorldModel
getAgentIndex	WorldModel.cpp	/^int WorldModel::getAgentIndex( ) const$/;"	f	class:WorldModel
getAgentObjectType	WorldModel.cpp	/^ObjectT WorldModel::getAgentObjectType( ) const$/;"	f	class:WorldModel
getAgentSpeed	WorldModel.cpp	/^double WorldModel::getAgentSpeed( ) const$/;"	f	class:WorldModel
getAgentStamina	WorldModel.cpp	/^Stamina WorldModel::getAgentStamina( ) const$/;"	f	class:WorldModel
getAgentTiredNess	WorldModel.cpp	/^TiredNessT WorldModel::getAgentTiredNess( ) const$/;"	f	class:WorldModel
getAgentViewAngle	WorldModel.cpp	/^ViewAngleT WorldModel::getAgentViewAngle( ) const$/;"	f	class:WorldModel
getAgentViewFrequency	WorldModel.cpp	/^double WorldModel::getAgentViewFrequency( ViewAngleT va, ViewQualityT vq )$/;"	f	class:WorldModel
getAgentViewQuality	WorldModel.cpp	/^ViewQualityT WorldModel::getAgentViewQuality( ) const$/;"	f	class:WorldModel
getAngleForTurn	WorldModelHighLevel.cpp	/^AngDeg WorldModel::getAngleForTurn( AngDeg angDesiredAngle, double dSpeed,$/;"	f	class:WorldModel
getAngleFromDirection	SoccerTypes.cpp	/^AngDeg SoccerTypes::getAngleFromDirection( DirectionT dir )$/;"	f	class:SoccerTypes
getArea	Geometry.cpp	/^double Circle::getArea()$/;"	f	class:Circle
getArmExpires	Objects.cpp	/^int AgentObject::getArmExpires( ) const$/;"	f	class:AgentObject
getArmMovable	Objects.cpp	/^bool AgentObject::getArmMovable( ) const$/;"	f	class:AgentObject
getAttrX	Formations.cpp	/^double PlayerTypeInfo::getAttrX( ) const$/;"	f	class:PlayerTypeInfo
getAttrY	Formations.cpp	/^double PlayerTypeInfo::getAttrY( ) const$/;"	f	class:PlayerTypeInfo
getAudioCutDist	ServerSettings.cpp	/^double ServerSettings::getAudioCutDist( ) const$/;"	f	class:ServerSettings
getBCoefficient	Geometry.cpp	/^double Line::getBCoefficient() const$/;"	f	class:Line
getBackDashRate	ServerSettings.cpp	/^double ServerSettings::getBackDashRate() const$/;"	f	class:ServerSettings
getBallAccelMax	ServerSettings.cpp	/^double ServerSettings::getBallAccelMax( ) const$/;"	f	class:ServerSettings
getBallConfThr	PlayerSettings.cpp	/^double PlayerSettings::getBallConfThr( ) const$/;"	f	class:PlayerSettings
getBallDecay	ServerSettings.cpp	/^double ServerSettings::getBallDecay( ) const$/;"	f	class:ServerSettings
getBallDirection	WorldModel.cpp	/^AngDeg WorldModel::getBallDirection()$/;"	f	class:WorldModel
getBallPos	WorldModel.cpp	/^VecPosition  WorldModel::getBallPos()$/;"	f	class:WorldModel
getBallRand	ServerSettings.cpp	/^double ServerSettings::getBallRand( ) const$/;"	f	class:ServerSettings
getBallSize	ServerSettings.cpp	/^double ServerSettings::getBallSize( ) const$/;"	f	class:ServerSettings
getBallSpeed	WorldModel.cpp	/^double WorldModel::getBallSpeed()$/;"	f	class:WorldModel
getBallSpeedMax	ServerSettings.cpp	/^double ServerSettings::getBallSpeedMax( ) const$/;"	f	class:ServerSettings
getBallStatusFromStr	SoccerTypes.cpp	/^BallStatusT SoccerTypes::getBallStatusFromStr( char* str )$/;"	f	class:SoccerTypes
getBallStatusStr	SoccerTypes.cpp	/^char* SoccerTypes::getBallStatusStr( BallStatusT bs )$/;"	f	class:SoccerTypes
getBallWeight	ServerSettings.cpp	/^double ServerSettings::getBallWeight( ) const$/;"	f	class:ServerSettings
getBehindBall	Formations.cpp	/^bool PlayerTypeInfo::getBehindBall( ) const$/;"	f	class:PlayerTypeInfo
getBisectorTwoAngles	Geometry.cpp	/^AngDeg getBisectorTwoAngles( AngDeg angMin, AngDeg angMax )$/;"	f
getBodyAngleRelToNeck	Objects.cpp	/^AngDeg AgentObject::getBodyAngleRelToNeck( ) const$/;"	f	class:AgentObject
getCCoefficient	Geometry.cpp	/^double Line::getCCoefficient() const$/;"	f	class:Line
getCatchBanCycle	ServerSettings.cpp	/^int ServerSettings::getCatchBanCycle( ) const$/;"	f	class:ServerSettings
getCatchProbability	ServerSettings.cpp	/^double ServerSettings::getCatchProbability( ) const$/;"	f	class:ServerSettings
getCatchableAreaL	ServerSettings.cpp	/^double ServerSettings::getCatchableAreaL( ) const$/;"	f	class:ServerSettings
getCatchableAreaW	ServerSettings.cpp	/^double ServerSettings::getCatchableAreaW( ) const$/;"	f	class:ServerSettings
getCenter	Geometry.cpp	/^VecPosition Circle::getCenter()$/;"	f	class:Circle
getChangeViewCommand	WorldModel.cpp	/^SoccerCommand WorldModel::getChangeViewCommand( )$/;"	f	class:WorldModel
getCheckBallStatus	WorldModel.cpp	/^BallStatusT WorldModel::getCheckBallStatus( ) const$/;"	f	class:WorldModel
getCircleIntersectionPoints	Geometry.cpp	/^int Line::getCircleIntersectionPoints( Circle circle,$/;"	f	class:Line
getCircumference	Geometry.cpp	/^double Circle::getCircumference()$/;"	f	class:Circle
getCkickMargin	ServerSettings.cpp	/^double ServerSettings::getCkickMargin( ) const$/;"	f	class:ServerSettings
getClangAdviceWin	ServerSettings.cpp	/^int ServerSettings::getClangAdviceWin( ) const$/;"	f	class:ServerSettings
getClangDefineWin	ServerSettings.cpp	/^int ServerSettings::getClangDefineWin( ) const$/;"	f	class:ServerSettings
getClangInfoWin	ServerSettings.cpp	/^int ServerSettings::getClangInfoWin( ) const$/;"	f	class:ServerSettings
getClangMessDelay	ServerSettings.cpp	/^int ServerSettings::getClangMessDelay( ) const$/;"	f	class:ServerSettings
getClangMessPerCycle	ServerSettings.cpp	/^int ServerSettings::getClangMessPerCycle( ) const$/;"	f	class:ServerSettings
getClangMetaWin	ServerSettings.cpp	/^int ServerSettings::getClangMetaWin( ) const$/;"	f	class:ServerSettings
getClangWinSize	ServerSettings.cpp	/^int ServerSettings::getClangWinSize( ) const$/;"	f	class:ServerSettings
getClassName	GenericValues.cpp	/^char* GenericValues::getClassName( )$/;"	f	class:GenericValues
getClearBallDist	PlayerSettings.cpp	/^double PlayerSettings::getClearBallDist( ) const$/;"	f	class:PlayerSettings
getClearBallOppMaxDist	PlayerSettings.cpp	/^double PlayerSettings::getClearBallOppMaxDist( ) const$/;"	f	class:PlayerSettings
getClearBallToSideAngle	PlayerSettings.cpp	/^double PlayerSettings::getClearBallToSideAngle( ) const$/;"	f	class:PlayerSettings
getClosestInSetTo	WorldModelHighLevel.cpp	/^ObjectT WorldModel::getClosestInSetTo( ObjectSetT set, Line l,$/;"	f	class:WorldModel
getClosestInSetTo	WorldModelHighLevel.cpp	/^ObjectT WorldModel::getClosestInSetTo( ObjectSetT set, ObjectT objTarget,$/;"	f	class:WorldModel
getClosestInSetTo	WorldModelHighLevel.cpp	/^ObjectT WorldModel::getClosestInSetTo( ObjectSetT set, VecPosition pos,$/;"	f	class:WorldModel
getClosestPlayerInFormationTo	WorldModelHighLevel.cpp	/^int WorldModel::getClosestPlayerInFormationTo( VecPosition pos, $/;"	f	class:WorldModel
getClosestRelativeInSet	WorldModelHighLevel.cpp	/^ObjectT WorldModel::getClosestRelativeInSet( ObjectSetT set, double *dDist )$/;"	f	class:WorldModel
getCoachPort	ServerSettings.cpp	/^int ServerSettings::getCoachPort( ) const$/;"	f	class:ServerSettings
getCommand	SoccerTypes.cpp	/^SoccerCommand Feature::getCommand( )$/;"	f	class:Feature
getCommandStr	SoccerTypes.cpp	/^char* SoccerTypes::getCommandStr( CommandT com )$/;"	f	class:SoccerTypes
getCommandString	SoccerTypes.cpp	/^bool SoccerCommand::getCommandString( char *str, ServerSettings *ss )$/;"	f	class:SoccerCommand
getCommunicationString	WorldModel.cpp	/^char* WorldModel::getCommunicationString( )$/;"	f	class:WorldModel
getConeWidth	PlayerSettings.cpp	/^double PlayerSettings::getConeWidth( ) const$/;"	f	class:PlayerSettings
getConfidence	Objects.cpp	/^double Object::getConfidence( Time time )$/;"	f	class:Object
getConfidence	WorldModel.cpp	/^double WorldModel::getConfidence( ObjectT o)$/;"	f	class:WorldModel
getCurrentCycle	WorldModel.cpp	/^int WorldModel::getCurrentCycle()$/;"	f	class:WorldModel
getCurrentTime	WorldModel.cpp	/^Time WorldModel::getCurrentTime()$/;"	f	class:WorldModel
getCyclesCatchWait	PlayerSettings.cpp	/^int PlayerSettings::getCyclesCatchWait( ) const$/;"	f	class:PlayerSettings
getDashAngleStep	ServerSettings.cpp	/^double ServerSettings::getDashAngleStep() const$/;"	f	class:ServerSettings
getDashPowerRate	ServerSettings.cpp	/^double ServerSettings::getDashPowerRate( ) const$/;"	f	class:ServerSettings
getDashPowerRate	WorldModel.cpp	/^double WorldModel::getDashPowerRate( ObjectT obj )$/;"	f	class:WorldModel
getDashPowerRateDeltaMax	ServerSettings.cpp	/^double ServerSettings::getDashPowerRateDeltaMax( ) const$/;"	f	class:ServerSettings
getDashPowerRateDeltaMin	ServerSettings.cpp	/^double ServerSettings::getDashPowerRateDeltaMin( ) const$/;"	f	class:ServerSettings
getDeadBallPosition	Player.cpp	/^VecPosition Player::getDeadBallPosition(  )$/;"	f	class:Player
getDirection	Geometry.cpp	/^AngDeg VecPosition::getDirection( ) const$/;"	f	class:VecPosition
getDirectionOfWidestAngle	WorldModelHighLevel.cpp	/^AngDeg WorldModel::getDirectionOfWidestAngle(VecPosition posOrg, AngDeg angMin,$/;"	f	class:WorldModel
getDistanceTo	Geometry.cpp	/^double VecPosition::getDistanceTo( const VecPosition p )$/;"	f	class:VecPosition
getDistanceWithPoint	Geometry.cpp	/^double Line::getDistanceWithPoint( VecPosition pos )$/;"	f	class:Line
getDribbleAngThr	PlayerSettings.cpp	/^double PlayerSettings::getDribbleAngThr( ) const$/;"	f	class:PlayerSettings
getDribblePoint	BasicPlayer.cpp	/^VecPosition BasicPlayer::getDribblePoint( DribbleT dribble, double *dDist )$/;"	f	class:BasicPlayer
getDropBallTime	ServerSettings.cpp	/^int ServerSettings::getDropBallTime( ) const$/;"	f	class:ServerSettings
getEffectiveMaxSpeed	WorldModel.cpp	/^double WorldModel::getEffectiveMaxSpeed( ObjectT obj, bool bWithNoise )$/;"	f	class:WorldModel
getEffort	Objects.cpp	/^double Stamina::getEffort() const$/;"	f	class:Stamina
getEffortDec	ServerSettings.cpp	/^double ServerSettings::getEffortDec( ) const$/;"	f	class:ServerSettings
getEffortDecThr	ServerSettings.cpp	/^double ServerSettings::getEffortDecThr( ) const$/;"	f	class:ServerSettings
getEffortInc	ServerSettings.cpp	/^double ServerSettings::getEffortInc( ) const$/;"	f	class:ServerSettings
getEffortIncThr	ServerSettings.cpp	/^double ServerSettings::getEffortIncThr( ) const$/;"	f	class:ServerSettings
getEffortMax	ServerSettings.cpp	/^double ServerSettings::getEffortMax(  ) const$/;"	f	class:ServerSettings
getEffortMax	WorldModel.cpp	/^double WorldModel::getEffortMax( ObjectT obj )$/;"	f	class:WorldModel
getEffortMaxDeltaFactor	ServerSettings.cpp	/^double ServerSettings::getEffortMaxDeltaFactor( ) const$/;"	f	class:ServerSettings
getEffortMin	ServerSettings.cpp	/^double ServerSettings::getEffortMin( ) const$/;"	f	class:ServerSettings
getEffortMinDeltaFactor	ServerSettings.cpp	/^double ServerSettings::getEffortMinDeltaFactor( ) const$/;"	f	class:ServerSettings
getElapsedTime	Logger.cpp	/^double Timing::getElapsedTime( int iFactor )$/;"	f	class:Timing
getEndSpeedForPass	BasicPlayer.cpp	/^double BasicPlayer::getEndSpeedForPass( ObjectT o, VecPosition posPass )$/;"	f	class:BasicPlayer
getEndSpeedFromFirstSpeed	WorldModelHighLevel.cpp	/^double WorldModel::getEndSpeedFromFirstSpeed(double dFirstSpeed,double dCycles)$/;"	f	class:WorldModel
getExtraStamina	ServerSettings.cpp	/^double ServerSettings::getExtraStamina( ) const$/;"	f	class:ServerSettings
getExtraStaminaDeltaMax	ServerSettings.cpp	/^double ServerSettings::getExtraStaminaDeltaMax( ) const$/;"	f	class:ServerSettings
getExtraStaminaDeltaMin	ServerSettings.cpp	/^double ServerSettings::getExtraStaminaDeltaMin( ) const$/;"	f	class:ServerSettings
getFastPassEndSpeed	PlayerSettings.cpp	/^double PlayerSettings::getFastPassEndSpeed( ) const$/;"	f	class:PlayerSettings
getFastestInSetTo	WorldModelHighLevel.cpp	/^ObjectT WorldModel::getFastestInSetTo( ObjectSetT set, ObjectT obj,$/;"	f	class:WorldModel
getFastestInSetTo	WorldModelHighLevel.cpp	/^ObjectT WorldModel::getFastestInSetTo( ObjectSetT set, VecPosition pos,$/;"	f	class:WorldModel
getFeature	WorldModel.cpp	/^Feature WorldModel::getFeature( FeatureT type )$/;"	f	class:WorldModel
getFirstEmptySpotInSet	WorldModelHighLevel.cpp	/^ObjectT WorldModel::getFirstEmptySpotInSet( ObjectSetT set, int iUnknownPlayer)$/;"	f	class:WorldModel
getFirstGeomSeries	Geometry.cpp	/^double Geometry::getFirstGeomSeries( double dSum, double dRatio, double dLength)$/;"	f	class:Geometry
getFirstInfGeomSeries	Geometry.cpp	/^double Geometry::getFirstInfGeomSeries( double dSum, double dRatio )$/;"	f	class:Geometry
getFirstSpeedFromDist	WorldModelHighLevel.cpp	/^double WorldModel::getFirstSpeedFromDist( double dDist, double dCycles, double$/;"	f	class:WorldModel
getFirstSpeedFromEndSpeed	WorldModelHighLevel.cpp	/^double WorldModel::getFirstSpeedFromEndSpeed( double dEndSpeed, double dCycles,$/;"	f	class:WorldModel
getForbidKickOffOffside	ServerSettings.cpp	/^bool ServerSettings::getForbidKickOffOffside( ) const$/;"	f	class:ServerSettings
getFormation	Formations.cpp	/^FormationT Formations::getFormation( ) const$/;"	f	class:Formations
getFormationType	Formations.cpp	/^FormationT FormationTypeInfo::getFormationType( ) const$/;"	f	class:FormationTypeInfo
getFractionWaitNoSee	PlayerSettings.cpp	/^double PlayerSettings::getFractionWaitNoSee( ) const$/;"	f	class:PlayerSettings
getFractionWaitSeeBegin	PlayerSettings.cpp	/^double PlayerSettings::getFractionWaitSeeBegin( ) const$/;"	f	class:PlayerSettings
getFractionWaitSeeEnd	PlayerSettings.cpp	/^double PlayerSettings::getFractionWaitSeeEnd( ) const$/;"	f	class:PlayerSettings
getFullStateLeft	ServerSettings.cpp	/^bool ServerSettings::getFullStateLeft( ) const$/;"	f	class:ServerSettings
getFullStateRight	ServerSettings.cpp	/^bool ServerSettings::getFullStateRight( ) const$/;"	f	class:ServerSettings
getFurthestInSetTo	WorldModelHighLevel.cpp	/^ObjectT WorldModel::getFurthestInSetTo( ObjectSetT set, ObjectT objTarget,$/;"	f	class:WorldModel
getFurthestRelativeInSet	WorldModelHighLevel.cpp	/^ObjectT WorldModel::getFurthestRelativeInSet( ObjectSetT set, double *dDist  )$/;"	f	class:WorldModel
getGlobalAngle	Objects.cpp	/^AngDeg FixedObject::getGlobalAngle( SideT s )$/;"	f	class:FixedObject
getGlobalAngle	WorldModel.cpp	/^AngDeg WorldModel::getGlobalAngle( ObjectT o )$/;"	f	class:WorldModel
getGlobalAngleLine	SoccerTypes.cpp	/^AngDeg SoccerTypes::getGlobalAngleLine( ObjectT o , SideT s )$/;"	f	class:SoccerTypes
getGlobalArm	Objects.cpp	/^AngDeg PlayerObject::getGlobalArm( ) const$/;"	f	class:PlayerObject
getGlobalArmDirection	WorldModel.cpp	/^AngDeg WorldModel::getGlobalArmDirection( ObjectT o )$/;"	f	class:WorldModel
getGlobalArmPosition	Objects.cpp	/^VecPosition AgentObject::getGlobalArmPosition( ) const$/;"	f	class:AgentObject
getGlobalBodyAngle	Objects.cpp	/^AngDeg PlayerObject::getGlobalBodyAngle( )  const$/;"	f	class:PlayerObject
getGlobalBodyAngle	WorldModel.cpp	/^AngDeg WorldModel::getGlobalBodyAngle( ObjectT o )$/;"	f	class:WorldModel
getGlobalBodyAngleLastSee	Objects.cpp	/^AngDeg PlayerObject::getGlobalBodyAngleLastSee( )  const$/;"	f	class:PlayerObject
getGlobalBodyAngleLastSee	WorldModel.cpp	/^AngDeg WorldModel::getGlobalBodyAngleLastSee( ObjectT o )$/;"	f	class:WorldModel
getGlobalNeckAngle	Objects.cpp	/^AngDeg PlayerObject::getGlobalNeckAngle( )  const$/;"	f	class:PlayerObject
getGlobalNeckAngle	WorldModel.cpp	/^AngDeg WorldModel::getGlobalNeckAngle( ObjectT o )$/;"	f	class:WorldModel
getGlobalPosition	Objects.cpp	/^VecPosition FixedObject::getGlobalPosition( SideT s, double dGoalWidth )const$/;"	f	class:FixedObject
getGlobalPosition	Objects.cpp	/^VecPosition Object::getGlobalPosition() const$/;"	f	class:Object
getGlobalPosition	WorldModel.cpp	/^VecPosition WorldModel::getGlobalPosition( ObjectT o )$/;"	f	class:WorldModel
getGlobalPositionFlag	SoccerTypes.cpp	/^VecPosition SoccerTypes::getGlobalPositionFlag( ObjectT o, SideT s,$/;"	f	class:SoccerTypes
getGlobalPositionLastSee	Objects.cpp	/^VecPosition Object::getGlobalPositionLastSee() const$/;"	f	class:Object
getGlobalPositionLastSee	WorldModel.cpp	/^VecPosition WorldModel::getGlobalPositionLastSee( ObjectT o )$/;"	f	class:WorldModel
getGlobalVelocity	Objects.cpp	/^VecPosition DynamicObject::getGlobalVelocity( ) const$/;"	f	class:DynamicObject
getGlobalVelocity	WorldModel.cpp	/^VecPosition WorldModel::getGlobalVelocity( ObjectT o )$/;"	f	class:WorldModel
getGlobalVelocityLastSee	Objects.cpp	/^VecPosition DynamicObject::getGlobalVelocityLastSee ( )   const$/;"	f	class:DynamicObject
getGlobalVelocityLastSee	WorldModel.cpp	/^VecPosition WorldModel::getGlobalVelocityLastSee( ObjectT o )$/;"	f	class:WorldModel
getGoalDiff	WorldModel.cpp	/^int WorldModel::getGoalDiff( ) const$/;"	f	class:WorldModel
getGoalOpponent	SoccerTypes.cpp	/^ObjectT SoccerTypes::getGoalOpponent( SideT s )$/;"	f	class:SoccerTypes
getGoalWidth	ServerSettings.cpp	/^double ServerSettings::getGoalWidth( ) const$/;"	f	class:ServerSettings
getGoalieMaxMoves	ServerSettings.cpp	/^int ServerSettings::getGoalieMaxMoves( ) const$/;"	f	class:ServerSettings
getHalfTime	ServerSettings.cpp	/^int ServerSettings::getHalfTime( ) const$/;"	f	class:ServerSettings
getHalfViewAngleValue	SoccerTypes.cpp	/^AngDeg SoccerTypes::getHalfViewAngleValue( ViewAngleT va )$/;"	f	class:SoccerTypes
getHeader	Logger.cpp	/^char* Logger::getHeader( )$/;"	f	class:Logger
getHearDecay	ServerSettings.cpp	/^int ServerSettings::getHearDecay( ) const$/;"	f	class:ServerSettings
getHearInc	ServerSettings.cpp	/^int ServerSettings::getHearInc( ) const$/;"	f	class:ServerSettings
getHearMax	ServerSettings.cpp	/^int ServerSettings::getHearMax( ) const$/;"	f	class:ServerSettings
getHeteroInfoPlayer	WorldModel.cpp	/^HeteroPlayerSettings WorldModel::getHeteroInfoPlayer( ObjectT obj )$/;"	f	class:WorldModel
getHeteroPlayerType	Objects.cpp	/^int  PlayerObject::getHeteroPlayerType( ) const$/;"	f	class:PlayerObject
getHeteroPlayerType	WorldModel.cpp	/^int WorldModel::getHeteroPlayerType( ObjectT obj )$/;"	f	class:WorldModel
getIndex	SoccerTypes.cpp	/^int SoccerTypes::getIndex( ObjectT o )$/;"	f	class:SoccerTypes
getInertiaMoment	ServerSettings.cpp	/^double ServerSettings::getInertiaMoment( ) const$/;"	f	class:ServerSettings
getInertiaMoment	WorldModel.cpp	/^double WorldModel::getInertiaMoment( ObjectT obj )$/;"	f	class:WorldModel
getInertiaMomentDeltaFactor	ServerSettings.cpp	/^double ServerSettings::getInertiaMomentDeltaFactor( ) const$/;"	f	class:ServerSettings
getInfo	SoccerTypes.cpp	/^double Feature::getInfo( )$/;"	f	class:Feature
getInfoHeteroPlayer	WorldModel.cpp	/^HeteroPlayerSettings WorldModel::getInfoHeteroPlayer( int iIndex )$/;"	f	class:WorldModel
getInitialFormation	PlayerSettings.cpp	/^int PlayerSettings::getInitialFormation( ) const$/;"	f	class:PlayerSettings
getInterceptionPointBall	BasicPlayer.cpp	/^VecPosition BasicPlayer::getInterceptionPointBall( int *iMinCyclesBall,$/;"	f	class:BasicPlayer
getIntersection	Geometry.cpp	/^VecPosition Line::getIntersection( Line line )$/;"	f	class:Line
getIntersectionArea	Geometry.cpp	/^double Circle::getIntersectionArea( Circle c )$/;"	f	class:Circle
getIntersectionPoints	Geometry.cpp	/^int Circle::getIntersectionPoints( Circle c, VecPosition *p1, VecPosition *p2)$/;"	f	class:Circle
getIsGoalie	Objects.cpp	/^bool PlayerObject::getIsGoalie() const$/;"	f	class:PlayerObject
getIsKnownPlayer	Objects.cpp	/^bool PlayerObject::getIsKnownPlayer() const$/;"	f	class:PlayerObject
getKickPowerForSpeed	WorldModelHighLevel.cpp	/^double WorldModel::getKickPowerForSpeed( double dDesiredSpeed )$/;"	f	class:WorldModel
getKickPowerRate	ServerSettings.cpp	/^double ServerSettings::getKickPowerRate( ) const$/;"	f	class:ServerSettings
getKickRand	ServerSettings.cpp	/^double ServerSettings::getKickRand( ) const$/;"	f	class:ServerSettings
getKickRandDeltaFactor	ServerSettings.cpp	/^double ServerSettings::getKickRandDeltaFactor( ) const$/;"	f	class:ServerSettings
getKickSpeedToTravel	WorldModelHighLevel.cpp	/^double WorldModel::getKickSpeedToTravel( double dDistance, double dEndSpeed )$/;"	f	class:WorldModel
getKickableMargin	ServerSettings.cpp	/^double ServerSettings::getKickableMargin( ) const$/;"	f	class:ServerSettings
getKickableMarginDeltaMax	ServerSettings.cpp	/^double ServerSettings::getKickableMarginDeltaMax( ) const$/;"	f	class:ServerSettings
getKickableMarginDeltaMin	ServerSettings.cpp	/^double ServerSettings::getKickableMarginDeltaMin( ) const$/;"	f	class:ServerSettings
getLastOpponentDefender	WorldModelHighLevel.cpp	/^ObjectT WorldModel::getLastOpponentDefender( double *dX )$/;"	f	class:WorldModel
getLengthGeomSeries	Geometry.cpp	/^double Geometry::getLengthGeomSeries( double dFirst, double dRatio, double dSum )$/;"	f	class:Geometry
getListCloseOpponents	WorldModel.cpp	/^list<ObjectT> WorldModel::getListCloseOpponents( VecPosition pos,double dDist )$/;"	f	class:WorldModel
getLogFile	ServerSettings.cpp	/^char* ServerSettings::getLogFile( )$/;"	f	class:ServerSettings
getLogTimes	ServerSettings.cpp	/^bool ServerSettings::getLogTimes( ) const$/;"	f	class:ServerSettings
getMagnitude	Geometry.cpp	/^double VecPosition::getMagnitude( ) const$/;"	f	class:VecPosition
getMarkDistance	PlayerSettings.cpp	/^double PlayerSettings::getMarkDistance( ) const$/;"	f	class:PlayerSettings
getMarkingPosition	BasicPlayer.cpp	/^VecPosition BasicPlayer::getMarkingPosition( ObjectT o, double dDist, $/;"	f	class:BasicPlayer
getMarkingPosition	WorldModelHighLevel.cpp	/^VecPosition WorldModel::getMarkingPosition( VecPosition pos, double dDist, $/;"	f	class:WorldModel
getMaxDashAngle	ServerSettings.cpp	/^double ServerSettings::getMaxDashAngle() const$/;"	f	class:ServerSettings
getMaxDashPower	ServerSettings.cpp	/^double ServerSettings::getMaxDashPower() const$/;"	f	class:ServerSettings
getMaxMoment	ServerSettings.cpp	/^int ServerSettings::getMaxMoment( ) const$/;"	f	class:ServerSettings
getMaxNeckAng	ServerSettings.cpp	/^int ServerSettings::getMaxNeckAng( ) const$/;"	f	class:ServerSettings
getMaxNeckMoment	ServerSettings.cpp	/^int ServerSettings::getMaxNeckMoment( ) const$/;"	f	class:ServerSettings
getMaxPower	ServerSettings.cpp	/^int ServerSettings::getMaxPower( ) const$/;"	f	class:ServerSettings
getMaxRange	Objects.cpp	/^ObjectT PlayerObject::getMaxRange( )$/;"	f	class:PlayerObject
getMaxRangeUnknownPlayer	WorldModelUpdate.cpp	/^ObjectT WorldModel::getMaxRangeUnknownPlayer( ObjectT obj, char* strMsg )$/;"	f	class:WorldModel
getMaxTraveledDistance	WorldModelHighLevel.cpp	/^double WorldModel::getMaxTraveledDistance( ObjectT o )$/;"	f	class:WorldModel
getMaxX	Formations.cpp	/^double PlayerTypeInfo::getMaxX( ) const$/;"	f	class:PlayerTypeInfo
getMaxYPercentage	PlayerSettings.cpp	/^double PlayerSettings::getMaxYPercentage( ) const$/;"	f	class:PlayerSettings
getMaximalKickDist	ServerSettings.cpp	/^double ServerSettings::getMaximalKickDist( ) const$/;"	f	class:ServerSettings
getMaximalKickDist	WorldModel.cpp	/^double WorldModel::getMaximalKickDist( ObjectT obj )$/;"	f	class:WorldModel
getMinDashAngle	ServerSettings.cpp	/^double ServerSettings::getMinDashAngle() const$/;"	f	class:ServerSettings
getMinDashPower	ServerSettings.cpp	/^double ServerSettings::getMinDashPower() const$/;"	f	class:ServerSettings
getMinMaxDirChange	WorldModelUpdate.cpp	/^bool WorldModel::getMinMaxDirChange( double dOutput, double *dMin,$/;"	f	class:WorldModel
getMinMaxDistChange	WorldModelUpdate.cpp	/^bool WorldModel::getMinMaxDistChange( double dOutput, double dDist,$/;"	f	class:WorldModel
getMinMaxDistQuantizeValue	WorldModelUpdate.cpp	/^bool WorldModel::getMinMaxDistQuantizeValue( double dOutput, double *dMin,$/;"	f	class:WorldModel
getMinMoment	ServerSettings.cpp	/^int ServerSettings::getMinMoment( ) const$/;"	f	class:ServerSettings
getMinNeckAng	ServerSettings.cpp	/^int ServerSettings::getMinNeckAng( ) const$/;"	f	class:ServerSettings
getMinNeckMoment	ServerSettings.cpp	/^int ServerSettings::getMinNeckMoment( ) const$/;"	f	class:ServerSettings
getMinPower	ServerSettings.cpp	/^int ServerSettings::getMinPower( ) const$/;"	f	class:ServerSettings
getMinRange	Objects.cpp	/^ObjectT PlayerObject::getMinRange( )$/;"	f	class:PlayerObject
getMinX	Formations.cpp	/^double PlayerTypeInfo::getMinX( ) const$/;"	f	class:PlayerTypeInfo
getName	GenericValues.cpp	/^const char* GenericValueT::getName ( )$/;"	f	class:GenericValueT
getNewDashPowerRateDeltaMax	ServerSettings.cpp	/^double ServerSettings::getNewDashPowerRateDeltaMax( ) const$/;"	f	class:ServerSettings
getNewDashPowerRateDeltaMin	ServerSettings.cpp	/^double ServerSettings::getNewDashPowerRateDeltaMin( ) const$/;"	f	class:ServerSettings
getNewStaminaIncMaxDeltaFactor	ServerSettings.cpp	/^double ServerSettings::getNewStaminaIncMaxDeltaFactor( ) const$/;"	f	class:ServerSettings
getNrInSetInCircle	WorldModelHighLevel.cpp	/^int WorldModel::getNrInSetInCircle( ObjectSetT set, Circle c )$/;"	f	class:WorldModel
getNrInSetInCone	WorldModelHighLevel.cpp	/^int WorldModel::getNrInSetInCone( ObjectSetT set, double dWidth,$/;"	f	class:WorldModel
getNrInSetInRectangle	WorldModelHighLevel.cpp	/^int WorldModel::getNrInSetInRectangle( ObjectSetT set, Rect *rect  )$/;"	f	class:WorldModel
getNrOfCommands	WorldModel.cpp	/^int WorldModel::getNrOfCommands( CommandT c ) const$/;"	f	class:WorldModel
getObject	SoccerTypes.cpp	/^ObjectT Feature::getObject( )$/;"	f	class:Feature
getObjectFocus	WorldModel.cpp	/^ObjectT WorldModel::getObjectFocus( )$/;"	f	class:WorldModel
getObjectFromStr	SoccerTypes.cpp	/^ObjectT SoccerTypes::getObjectFromStr( char** str, bool *isGoalie,$/;"	f	class:SoccerTypes
getObjectPtrFromType	WorldModel.cpp	/^Object* WorldModel::getObjectPtrFromType( ObjectT o )$/;"	f	class:WorldModel
getObjectStr	SoccerTypes.cpp	/^char* SoccerTypes::getObjectStr( char* strBuf, ObjectT o, $/;"	f	class:SoccerTypes
getOffsideActiveAreaSize	ServerSettings.cpp	/^double ServerSettings::getOffsideActiveAreaSize( ) const$/;"	f	class:ServerSettings
getOffsideKickMargin	ServerSettings.cpp	/^double ServerSettings::getOffsideKickMargin( ) const$/;"	f	class:ServerSettings
getOffsideX	WorldModelHighLevel.cpp	/^double WorldModel::getOffsideX( bool bIncludeComm )$/;"	f	class:WorldModel
getOlCoachPort	ServerSettings.cpp	/^int ServerSettings::getOlCoachPort( ) const$/;"	f	class:ServerSettings
getOppGoalieType	WorldModel.cpp	/^ObjectT WorldModel::getOppGoalieType()$/;"	f	class:WorldModel
getOpponentObjectFromIndex	SoccerTypes.cpp	/^ObjectT SoccerTypes::getOpponentObjectFromIndex( int iIndex )$/;"	f	class:SoccerTypes
getOuterPositionInField	WorldModelHighLevel.cpp	/^VecPosition WorldModel::getOuterPositionInField( VecPosition pos, AngDeg ang,$/;"	f	class:WorldModel
getOutputStream	Logger.cpp	/^ostream& Logger::getOutputStream(  )$/;"	f	class:Logger
getOwnGoal	SoccerTypes.cpp	/^ObjectT SoccerTypes::getOwnGoal( SideT s )$/;"	f	class:SoccerTypes
getOwnGoalieType	WorldModel.cpp	/^ObjectT WorldModel::getOwnGoalieType()$/;"	f	class:WorldModel
getPassEndSpeed	PlayerSettings.cpp	/^double PlayerSettings::getPassEndSpeed( ) const$/;"	f	class:PlayerSettings
getPassExtraX	PlayerSettings.cpp	/^double PlayerSettings::getPassExtraX( ) const$/;"	f	class:PlayerSettings
getPenAllowMultKicks	ServerSettings.cpp	/^bool ServerSettings::getPenAllowMultKicks( ) const$/;"	f	class:ServerSettings
getPenDistX	ServerSettings.cpp	/^double ServerSettings::getPenDistX( ) const$/;"	f	class:ServerSettings
getPenMaxGoalieDistX	ServerSettings.cpp	/^double ServerSettings::getPenMaxGoalieDistX( ) const$/;"	f	class:ServerSettings
getPlayMode	WorldModel.cpp	/^PlayModeT WorldModel::getPlayMode( ) const$/;"	f	class:WorldModel
getPlayModeFromRefereeMessage	SoccerTypes.cpp	/^PlayModeT SoccerTypes::getPlayModeFromRefereeMessage( RefereeMessageT rm )$/;"	f	class:SoccerTypes
getPlayModeFromStr	SoccerTypes.cpp	/^PlayModeT SoccerTypes::getPlayModeFromStr( char* str )$/;"	f	class:SoccerTypes
getPlayModeStr	SoccerTypes.cpp	/^char* SoccerTypes::getPlayModeStr( PlayModeT pm )$/;"	f	class:SoccerTypes
getPlayerAccelMax	ServerSettings.cpp	/^double ServerSettings::getPlayerAccelMax( ) const$/;"	f	class:ServerSettings
getPlayerConfThr	PlayerSettings.cpp	/^double PlayerSettings::getPlayerConfThr( ) const$/;"	f	class:PlayerSettings
getPlayerDecay	ServerSettings.cpp	/^double ServerSettings::getPlayerDecay( ) const$/;"	f	class:ServerSettings
getPlayerDecay	WorldModel.cpp	/^double WorldModel::getPlayerDecay( ObjectT obj )$/;"	f	class:WorldModel
getPlayerDecayDeltaMax	ServerSettings.cpp	/^double ServerSettings::getPlayerDecayDeltaMax( ) const$/;"	f	class:ServerSettings
getPlayerDecayDeltaMin	ServerSettings.cpp	/^double ServerSettings::getPlayerDecayDeltaMin( ) const$/;"	f	class:ServerSettings
getPlayerDistTolerance	PlayerSettings.cpp	/^double PlayerSettings::getPlayerDistTolerance( ) const$/;"	f	class:PlayerSettings
getPlayerHighConfThr	PlayerSettings.cpp	/^double PlayerSettings::getPlayerHighConfThr( ) const$/;"	f	class:PlayerSettings
getPlayerInFormation	Formations.cpp	/^int Formations::getPlayerInFormation( ObjectT obj  ) const$/;"	f	class:Formations
getPlayerNumber	WorldModel.cpp	/^int WorldModel::getPlayerNumber( ) const$/;"	f	class:WorldModel
getPlayerRand	ServerSettings.cpp	/^double ServerSettings::getPlayerRand( ) const$/;"	f	class:ServerSettings
getPlayerSize	ServerSettings.cpp	/^double ServerSettings::getPlayerSize( ) const$/;"	f	class:ServerSettings
getPlayerSize	WorldModel.cpp	/^double WorldModel::getPlayerSize( ObjectT obj )$/;"	f	class:WorldModel
getPlayerSizeDeltaFactor	ServerSettings.cpp	/^double ServerSettings::getPlayerSizeDeltaFactor( ) const$/;"	f	class:ServerSettings
getPlayerSpeedMax	ServerSettings.cpp	/^double ServerSettings::getPlayerSpeedMax( ) const$/;"	f	class:ServerSettings
getPlayerSpeedMax	WorldModel.cpp	/^double WorldModel::getPlayerSpeedMax( ObjectT obj )$/;"	f	class:WorldModel
getPlayerSpeedMaxDeltaMax	ServerSettings.cpp	/^double ServerSettings::getPlayerSpeedMaxDeltaMax( ) const$/;"	f	class:ServerSettings
getPlayerSpeedMaxDeltaMin	ServerSettings.cpp	/^double ServerSettings::getPlayerSpeedMaxDeltaMin( ) const$/;"	f	class:ServerSettings
getPlayerType	Formations.cpp	/^PlayerT FormationTypeInfo::getPlayerType( int atIndex ) const$/;"	f	class:FormationTypeInfo
getPlayerType	Formations.cpp	/^PlayerT Formations::getPlayerType( ObjectT obj, FormationT ft ) const$/;"	f	class:Formations
getPlayerType	Formations.cpp	/^PlayerT Formations::getPlayerType( int iIndex, FormationT ft ) const$/;"	f	class:Formations
getPlayerType	Formations.cpp	/^PlayerT PlayerTypeInfo::getPlayerType( ) const$/;"	f	class:PlayerTypeInfo
getPlayerType	WorldModel.cpp	/^PlayerT WorldModel::getPlayerType ( ObjectT o )$/;"	f	class:WorldModel
getPlayerTypeInfo	Formations.cpp	/^PlayerTypeInfo* FormationTypeInfo::getPlayerTypeInfo( int atIndex )$/;"	f	class:FormationTypeInfo
getPlayerTypeInfoOfPlayer	Formations.cpp	/^PlayerTypeInfo* FormationTypeInfo::getPlayerTypeInfoOfPlayer($/;"	f	class:FormationTypeInfo
getPlayerTypes	ServerSettings.cpp	/^int ServerSettings::getPlayerTypes( ) const$/;"	f	class:ServerSettings
getPlayerWeight	ServerSettings.cpp	/^double ServerSettings::getPlayerWeight( ) const$/;"	f	class:ServerSettings
getPlayerWhenToIntercept	PlayerSettings.cpp	/^int PlayerSettings::getPlayerWhenToIntercept( ) const$/;"	f	class:PlayerSettings
getPlayerWhenToKick	PlayerSettings.cpp	/^double PlayerSettings::getPlayerWhenToKick( ) const$/;"	f	class:PlayerSettings
getPlayerWhenToTurnAngle	PlayerSettings.cpp	/^double PlayerSettings::getPlayerWhenToTurnAngle( ) const$/;"	f	class:PlayerSettings
getPointOnLineClosestTo	Geometry.cpp	/^VecPosition Line::getPointOnLineClosestTo( VecPosition pos )$/;"	f	class:Line
getPort	ServerSettings.cpp	/^int ServerSettings::getPort( ) const$/;"	f	class:ServerSettings
getPosClosestOpponentTo	WorldModelHighLevel.cpp	/^VecPosition WorldModel::getPosClosestOpponentTo( double *dDist, ObjectT o )$/;"	f	class:WorldModel
getPosHome	Formations.cpp	/^VecPosition FormationTypeInfo::getPosHome( int atIndex ) const$/;"	f	class:FormationTypeInfo
getPosLeftTop	Geometry.cpp	/^VecPosition Rect::getPosLeftTop(  )$/;"	f	class:Rect
getPosOpponentGoal	WorldModel.cpp	/^VecPosition WorldModel::getPosOpponentGoal( )$/;"	f	class:WorldModel
getPosOwnGoal	WorldModel.cpp	/^VecPosition WorldModel::getPosOwnGoal( )$/;"	f	class:WorldModel
getPosRightBottom	Geometry.cpp	/^VecPosition Rect::getPosRightBottom(  )$/;"	f	class:Rect
getPositionDifference	Objects.cpp	/^VecPosition AgentObject::getPositionDifference() const$/;"	f	class:AgentObject
getPowerForDash	WorldModelHighLevel.cpp	/^double WorldModel::getPowerForDash( VecPosition posRelTo, AngDeg angBody,$/;"	f	class:WorldModel
getPrimaryCommand	ActHandler.cpp	/^SoccerCommand ActHandler::getPrimaryCommand(  )$/;"	f	class:ActHandler
getProbTackleClosestOpp	WorldModel.cpp	/^double WorldModel::getProbTackleClosestOpp( int iExtraCycles )$/;"	f	class:WorldModel
getProbTackleSucceeds	WorldModel.cpp	/^double WorldModel::getProbTackleSucceeds( ObjectT o, int iExtraCycles,$/;"	f	class:WorldModel
getQuantizeStep	ServerSettings.cpp	/^double ServerSettings::getQuantizeStep( ) const$/;"	f	class:ServerSettings
getQuantizeStepL	ServerSettings.cpp	/^double ServerSettings::getQuantizeStepL( ) const$/;"	f	class:ServerSettings
getRadius	Geometry.cpp	/^double Circle::getRadius()$/;"	f	class:Circle
getRecordLog	ServerSettings.cpp	/^bool ServerSettings::getRecordLog( ) const$/;"	f	class:ServerSettings
getRecordVersion	ServerSettings.cpp	/^int ServerSettings::getRecordVersion( ) const$/;"	f	class:ServerSettings
getRecoverDec	ServerSettings.cpp	/^double ServerSettings::getRecoverDec( ) const$/;"	f	class:ServerSettings
getRecoverDecThr	ServerSettings.cpp	/^double ServerSettings::getRecoverDecThr( ) const$/;"	f	class:ServerSettings
getRecoverMin	ServerSettings.cpp	/^double ServerSettings::getRecoverMin( ) const$/;"	f	class:ServerSettings
getRecovery	Objects.cpp	/^double Stamina::getRecovery() const$/;"	f	class:Stamina
getRecvStep	ServerSettings.cpp	/^int ServerSettings::getRecvStep( ) const$/;"	f	class:ServerSettings
getRecvThink	WorldModel.cpp	/^bool WorldModel::getRecvThink( )$/;"	f	class:WorldModel
getRefereeMessageFromStr	SoccerTypes.cpp	/^RefereeMessageT SoccerTypes::getRefereeMessageFromStr( char* str )$/;"	f	class:SoccerTypes
getRefereeMessageStr	SoccerTypes.cpp	/^char* SoccerTypes::getRefereeMessageStr( RefereeMessageT rm )$/;"	f	class:SoccerTypes
getRelAngleOpponentGoal	WorldModel.cpp	/^double  WorldModel::getRelAngleOpponentGoal()$/;"	f	class:WorldModel
getRelDistanceOpponentGoal	WorldModel.cpp	/^double  WorldModel::getRelDistanceOpponentGoal()$/;"	f	class:WorldModel
getRelativeAngle	Objects.cpp	/^AngDeg Object::getRelativeAngle( )$/;"	f	class:Object
getRelativeAngle	WorldModel.cpp	/^AngDeg WorldModel::getRelativeAngle( ObjectT o, bool bWithBody )$/;"	f	class:WorldModel
getRelativeAngleChange	Objects.cpp	/^double DynamicObject::getRelativeAngleChange() const$/;"	f	class:DynamicObject
getRelativeBodyAngle	Objects.cpp	/^AngDeg PlayerObject::getRelativeBodyAngle( )  const$/;"	f	class:PlayerObject
getRelativeDistance	Objects.cpp	/^double Object::getRelativeDistance( )$/;"	f	class:Object
getRelativeDistance	WorldModel.cpp	/^double WorldModel::getRelativeDistance( ObjectT o )$/;"	f	class:WorldModel
getRelativeDistanceChange	Objects.cpp	/^double DynamicObject::getRelativeDistanceChange() const$/;"	f	class:DynamicObject
getRelativeNeckAngle	Objects.cpp	/^AngDeg PlayerObject::getRelativeNeckAngle( )  const$/;"	f	class:PlayerObject
getRelativePosition	Objects.cpp	/^VecPosition Object::getRelativePosition() const$/;"	f	class:Object
getRelativePosition	WorldModel.cpp	/^VecPosition  WorldModel::getRelativePosition( ObjectT o )$/;"	f	class:WorldModel
getSayCoachCntMax	ServerSettings.cpp	/^int ServerSettings::getSayCoachCntMax( ) const$/;"	f	class:ServerSettings
getSayCoachMsgSize	ServerSettings.cpp	/^int ServerSettings::getSayCoachMsgSize( ) const$/;"	f	class:ServerSettings
getSayMsgSize	ServerSettings.cpp	/^int ServerSettings::getSayMsgSize( ) const$/;"	f	class:ServerSettings
getSecondClosestInSetTo	WorldModelHighLevel.cpp	/^ObjectT WorldModel::getSecondClosestInSetTo ( ObjectSetT set, ObjectT obj,$/;"	f	class:WorldModel
getSecondClosestRelativeInSet	WorldModelHighLevel.cpp	/^ObjectT WorldModel::getSecondClosestRelativeInSet( ObjectSetT set, $/;"	f	class:WorldModel
getSendLog	ServerSettings.cpp	/^bool ServerSettings::getSendLog( ) const$/;"	f	class:ServerSettings
getSendStep	ServerSettings.cpp	/^int ServerSettings::getSendStep( ) const$/;"	f	class:ServerSettings
getSendViStep	ServerSettings.cpp	/^int ServerSettings::getSendViStep( ) const$/;"	f	class:ServerSettings
getSenseBodyStep	ServerSettings.cpp	/^int ServerSettings::getSenseBodyStep( ) const$/;"	f	class:ServerSettings
getServerTimeOut	PlayerSettings.cpp	/^int PlayerSettings::getServerTimeOut( ) const$/;"	f	class:PlayerSettings
getShootPositionOnLine	BasicPlayer.cpp	/^VecPosition BasicPlayer::getShootPositionOnLine( VecPosition p1,$/;"	f	class:BasicPlayer
getShootRiskProbability	PlayerSettings.cpp	/^double PlayerSettings::getShootRiskProbability( ) const$/;"	f	class:PlayerSettings
getSide	WorldModel.cpp	/^SideT WorldModel::getSide( ) const$/;"	f	class:WorldModel
getSideDashRate	ServerSettings.cpp	/^double ServerSettings::getSideDashRate() const$/;"	f	class:ServerSettings
getSideFromStr	SoccerTypes.cpp	/^SideT SoccerTypes::getSideFromStr( char* str )$/;"	f	class:SoccerTypes
getSidePenalty	WorldModel.cpp	/^SideT WorldModel::getSidePenalty( )$/;"	f	class:WorldModel
getSideStr	SoccerTypes.cpp	/^char* SoccerTypes::getSideStr( SideT s )$/;"	f	class:SoccerTypes
getSimulatorStep	ServerSettings.cpp	/^int ServerSettings::getSimulatorStep( ) const$/;"	f	class:ServerSettings
getSlowDownFactor	ServerSettings.cpp	/^int ServerSettings::getSlowDownFactor( ) const$/;"	f	class:ServerSettings
getSpeed	Objects.cpp	/^double DynamicObject::getSpeed( ) const$/;"	f	class:DynamicObject
getSpeedRelToNeck	Objects.cpp	/^VecPosition AgentObject::getSpeedRelToNeck( ) const$/;"	f	class:AgentObject
getStamina	Objects.cpp	/^Stamina AgentObject::getStamina( ) const$/;"	f	class:AgentObject
getStamina	Objects.cpp	/^double Stamina::getStamina() const$/;"	f	class:Stamina
getStaminaCapacity	ServerSettings.cpp	/^double ServerSettings::getStaminaCapacity() const$/;"	f	class:ServerSettings
getStaminaIncMax	ServerSettings.cpp	/^double ServerSettings::getStaminaIncMax( ) const$/;"	f	class:ServerSettings
getStaminaIncMax	WorldModel.cpp	/^double WorldModel::getStaminaIncMax( ObjectT obj )$/;"	f	class:WorldModel
getStaminaIncMaxDeltaFactor	ServerSettings.cpp	/^double ServerSettings::getStaminaIncMaxDeltaFactor( ) const$/;"	f	class:ServerSettings
getStaminaMax	ServerSettings.cpp	/^double ServerSettings::getStaminaMax( ) const$/;"	f	class:ServerSettings
getStratAreaRadius	PlayerSettings.cpp	/^double PlayerSettings::getStratAreaRadius( ) const$/;"	f	class:PlayerSettings
getStrategicPosition	Formations.cpp	/^VecPosition Formations::getStrategicPosition( int iPlayer, VecPosition posBall,$/;"	f	class:Formations
getStrategicPosition	WorldModelHighLevel.cpp	/^VecPosition WorldModel::getStrategicPosition( ObjectT obj, FormationT ft )$/;"	f	class:WorldModel
getStrategicPosition	WorldModelHighLevel.cpp	/^VecPosition WorldModel::getStrategicPosition( int iPlayer, FormationT ft )$/;"	f	class:WorldModel
getSubsMax	ServerSettings.cpp	/^int ServerSettings::getSubsMax( ) const$/;"	f	class:ServerSettings
getSubstitutedOpp	WorldModel.cpp	/^ObjectT WorldModel::getSubstitutedOpp( )$/;"	f	class:WorldModel
getSumGeomSeries	Geometry.cpp	/^double Geometry::getSumGeomSeries( double dFirst, double dRatio, double dLength)$/;"	f	class:Geometry
getSumInfGeomSeries	Geometry.cpp	/^double Geometry::getSumInfGeomSeries( double dFirst, double dRatio )$/;"	f	class:Geometry
getSynchMode	ServerSettings.cpp	/^bool ServerSettings::getSynchMode( ) const$/;"	f	class:ServerSettings
getTackleBackDist	ServerSettings.cpp	/^double ServerSettings::getTackleBackDist( ) const$/;"	f	class:ServerSettings
getTackleCycles	ServerSettings.cpp	/^int ServerSettings::getTackleCycles( ) const$/;"	f	class:ServerSettings
getTackleDist	ServerSettings.cpp	/^double ServerSettings::getTackleDist( ) const$/;"	f	class:ServerSettings
getTackleExpires	Objects.cpp	/^int AgentObject::getTackleExpires( ) const$/;"	f	class:AgentObject
getTackleExpires	WorldModel.cpp	/^int WorldModel::getTackleExpires( ObjectT o )$/;"	f	class:WorldModel
getTackleExponent	ServerSettings.cpp	/^double ServerSettings::getTackleExponent( ) const$/;"	f	class:ServerSettings
getTacklePowerRate	ServerSettings.cpp	/^double ServerSettings::getTacklePowerRate( ) const$/;"	f	class:ServerSettings
getTackleWidth	ServerSettings.cpp	/^double ServerSettings::getTackleWidth( ) const$/;"	f	class:ServerSettings
getTangentLine	Geometry.cpp	/^Line Line::getTangentLine( VecPosition pos )$/;"	f	class:Line
getTeamName	WorldModel.cpp	/^const char* WorldModel::getTeamName( ) const$/;"	f	class:WorldModel
getTeammateObjectFromIndex	SoccerTypes.cpp	/^ObjectT SoccerTypes::getTeammateObjectFromIndex( int iIndex )$/;"	f	class:SoccerTypes
getThroughPassShootingPoint	BasicPlayer.cpp	/^VecPosition BasicPlayer::getThroughPassShootingPoint( ObjectT objTeam,$/;"	f	class:BasicPlayer
getTime	SoccerTypes.cpp	/^int Time::getTime( )$/;"	f	class:Time
getTimeAddedWith	SoccerTypes.cpp	/^Time Time::getTimeAddedWith( int iCycles )$/;"	f	class:Time
getTimeChangeInformation	Objects.cpp	/^Time DynamicObject::getTimeChangeInformation()  const$/;"	f	class:DynamicObject
getTimeChangeInformation	WorldModel.cpp	/^Time WorldModel::getTimeChangeInformation( ObjectT o )$/;"	f	class:WorldModel
getTimeCheckBall	WorldModel.cpp	/^Time WorldModel::getTimeCheckBall( ) const$/;"	f	class:WorldModel
getTimeDifference	Logger.cpp	/^double Timing::getTimeDifference( DWORD tv1, DWORD tv2 )$/;"	f	class:Timing
getTimeDifference	Logger.cpp	/^double Timing::getTimeDifference( struct timeval tv1, struct timeval tv2 )$/;"	f	class:Timing
getTimeDifference	SoccerTypes.cpp	/^int Time::getTimeDifference( Time t )$/;"	f	class:Time
getTimeFromConfidence	WorldModelHighLevel.cpp	/^Time WorldModel::getTimeFromConfidence( double dConf )$/;"	f	class:WorldModel
getTimeGlobalAngles	Objects.cpp	/^Time PlayerObject::getTimeGlobalAngles( ) const$/;"	f	class:PlayerObject
getTimeGlobalAngles	WorldModel.cpp	/^Time WorldModel::getTimeGlobalAngles( ObjectT o )$/;"	f	class:WorldModel
getTimeGlobalArm	Objects.cpp	/^Time PlayerObject::getTimeGlobalArm( ) const$/;"	f	class:PlayerObject
getTimeGlobalArmDirection	WorldModel.cpp	/^Time  WorldModel::getTimeGlobalArmDirection( ObjectT o )$/;"	f	class:WorldModel
getTimeGlobalPosDerivedFromSee	Objects.cpp	/^Time Object::getTimeGlobalPosDerivedFromSee() const$/;"	f	class:Object
getTimeGlobalPosition	Objects.cpp	/^Time Object::getTimeGlobalPosition() const$/;"	f	class:Object
getTimeGlobalPosition	WorldModel.cpp	/^Time WorldModel::getTimeGlobalPosition( ObjectT o )$/;"	f	class:WorldModel
getTimeGlobalPositionLastSee	WorldModel.cpp	/^Time WorldModel::getTimeGlobalPositionLastSee( ObjectT o )$/;"	f	class:WorldModel
getTimeGlobalVelocity	Objects.cpp	/^Time DynamicObject::getTimeGlobalVelocity() const$/;"	f	class:DynamicObject
getTimeGlobalVelocity	WorldModel.cpp	/^Time WorldModel::getTimeGlobalVelocity( ObjectT o )$/;"	f	class:WorldModel
getTimeHear	SoccerTypes.cpp	/^Time Feature::getTimeHear( )$/;"	f	class:Feature
getTimeLastHearMessage	WorldModel.cpp	/^Time WorldModel::getTimeLastHearMessage( ) const$/;"	f	class:WorldModel
getTimeLastRecvSeeMessage	WorldModel.cpp	/^Time WorldModel::getTimeLastRecvSeeMessage( ) const$/;"	f	class:WorldModel
getTimeLastRecvSenseMessage	WorldModel.cpp	/^Time WorldModel::getTimeLastRecvSenseMessage( ) const$/;"	f	class:WorldModel
getTimeLastRefereeMessage	WorldModel.cpp	/^Time WorldModel::getTimeLastRefereeMessage( )$/;"	f	class:WorldModel
getTimeLastSeeGlobalMessage	WorldModel.cpp	/^Time WorldModel::getTimeLastSeeGlobalMessage( ) const$/;"	f	class:WorldModel
getTimeLastSeeMessage	WorldModel.cpp	/^Time WorldModel::getTimeLastSeeMessage( ) const$/;"	f	class:WorldModel
getTimeLastSeen	Objects.cpp	/^Time Object::getTimeLastSeen() const$/;"	f	class:Object
getTimeLastSeen	WorldModel.cpp	/^Time WorldModel::getTimeLastSeen( ObjectT o )$/;"	f	class:WorldModel
getTimeLastSenseMessage	WorldModel.cpp	/^Time WorldModel::getTimeLastSenseMessage( ) const$/;"	f	class:WorldModel
getTimeRelativeAngles	Objects.cpp	/^Time PlayerObject::getTimeRelativeAngles( ) const$/;"	f	class:PlayerObject
getTimeRelativePosition	Objects.cpp	/^Time Object::getTimeRelativePosition() const$/;"	f	class:Object
getTimeSee	SoccerTypes.cpp	/^Time Feature::getTimeSee( )$/;"	f	class:Feature
getTimeSense	SoccerTypes.cpp	/^Time Feature::getTimeSense( )$/;"	f	class:Feature
getTimeSinceLastCatch	WorldModel.cpp	/^int WorldModel::getTimeSinceLastCatch()$/;"	f	class:WorldModel
getTimeStopped	SoccerTypes.cpp	/^int Time::getTimeStopped( )$/;"	f	class:Time
getTimeTackle	Objects.cpp	/^Time PlayerObject::getTimeTackle( ) const$/;"	f	class:PlayerObject
getTiming	Logger.cpp	/^Timing Logger::getTiming( )$/;"	f	class:Logger
getTiredNess	Objects.cpp	/^TiredNessT  Stamina::getTiredNess( double dRecDecThr, double dStaminaMax )$/;"	f	class:Stamina
getTurnWithBallAngThr	PlayerSettings.cpp	/^double PlayerSettings::getTurnWithBallAngThr( ) const$/;"	f	class:PlayerSettings
getTurnWithBallFreezeThr	PlayerSettings.cpp	/^double PlayerSettings::getTurnWithBallFreezeThr( ) const$/;"	f	class:PlayerSettings
getType	Objects.cpp	/^ObjectT  Object::getType() const$/;"	f	class:Object
getUseOffside	ServerSettings.cpp	/^bool ServerSettings::getUseOffside( ) const$/;"	f	class:ServerSettings
getValue	GenericValues.cpp	/^char* GenericValueT::getValue( char *strValue )$/;"	f	class:GenericValueT
getValue	GenericValues.cpp	/^char* GenericValues::getValue( const char *strName, char *strValue )$/;"	f	class:GenericValues
getValuePtr	GenericValues.cpp	/^GenericValueT* GenericValues::getValuePtr( const char *strName )$/;"	f	class:GenericValues
getValuesTotal	GenericValues.cpp	/^int GenericValues::getValuesTotal( )$/;"	f	class:GenericValues
getVec	SoccerTypes.cpp	/^VecPosition Feature::getVec( )$/;"	f	class:Feature
getVecPositionFromPolar	Geometry.cpp	/^VecPosition VecPosition::getVecPositionFromPolar( double dMag, AngDeg ang )$/;"	f	class:VecPosition
getVecPositionOnLineFraction	Geometry.cpp	/^VecPosition VecPosition::getVecPositionOnLineFraction( VecPosition &p,$/;"	f	class:VecPosition
getVerbose	ServerSettings.cpp	/^bool ServerSettings::getVerbose( ) const$/;"	f	class:ServerSettings
getViewAngle	Objects.cpp	/^ViewAngleT AgentObject::getViewAngle() const$/;"	f	class:AgentObject
getViewAngleFromStr	SoccerTypes.cpp	/^ViewAngleT SoccerTypes::getViewAngleFromStr( char* str )$/;"	f	class:SoccerTypes
getViewAngleStr	SoccerTypes.cpp	/^char* SoccerTypes::getViewAngleStr( ViewAngleT va )$/;"	f	class:SoccerTypes
getViewQuality	Objects.cpp	/^ViewQualityT AgentObject::getViewQuality() const$/;"	f	class:AgentObject
getViewQualityFromStr	SoccerTypes.cpp	/^ViewQualityT SoccerTypes::getViewQualityFromStr( char* str )$/;"	f	class:SoccerTypes
getViewQualityStr	SoccerTypes.cpp	/^char* SoccerTypes::getViewQualityStr( ViewQualityT vq )$/;"	f	class:SoccerTypes
getVisibleAngle	ServerSettings.cpp	/^double ServerSettings::getVisibleAngle( ) const$/;"	f	class:ServerSettings
getVisibleDistance	ServerSettings.cpp	/^double ServerSettings::getVisibleDistance( ) const$/;"	f	class:ServerSettings
getWindDir	ServerSettings.cpp	/^double ServerSettings::getWindDir( ) const$/;"	f	class:ServerSettings
getWindForce	ServerSettings.cpp	/^double ServerSettings::getWindForce( ) const$/;"	f	class:ServerSettings
getWindRand	ServerSettings.cpp	/^double ServerSettings::getWindRand( ) const$/;"	f	class:ServerSettings
getWindRandom	ServerSettings.cpp	/^bool ServerSettings::getWindRandom( ) const$/;"	f	class:ServerSettings
getX	Geometry.cpp	/^double VecPosition::getX( ) const$/;"	f	class:VecPosition
getXGivenY	Geometry.cpp	/^double Line::getXGivenY( double y )$/;"	f	class:Line
getY	Geometry.cpp	/^double VecPosition::getY( ) const$/;"	f	class:VecPosition
getYGivenX	Geometry.cpp	/^double Line::getYGivenX( double x )$/;"	f	class:Line
globalToRelative	Geometry.cpp	/^VecPosition VecPosition::globalToRelative( VecPosition origin, AngDeg ang )$/;"	f	class:VecPosition
goToPosition	PlayerTeams.cpp	/^SoccerCommand Player::goToPosition(VecPosition target, double entfernung)$/;"	f	class:Player
goToStrategicPosition	PlayerTeams.cpp	/^SoccerCommand Player::goToStrategicPosition(double entfernung)$/;"	f	class:Player
goalieMainLoop	Player.cpp	/^SoccerCommand Player::goalieMainLoop( )$/;"	f	class:Player
gotoFirstNonSpace	Parse.cpp	/^char Parse::gotoFirstNonSpace( char** strMsg )$/;"	f	class:Parse
gotoFirstOccurenceOf	Parse.cpp	/^int Parse::gotoFirstOccurenceOf( char c, char** strMsg )$/;"	f	class:Parse
gotoFirstSpaceOrClosingBracket	Parse.cpp	/^char Parse::gotoFirstSpaceOrClosingBracket( char** strMsg )$/;"	f	class:Parse
handleMessagesFromServer	SenseHandler.cpp	/^void SenseHandler::handleMessagesFromServer( )$/;"	f	class:SenseHandler
handleStdin	BasicCoach.cpp	/^void BasicCoach::handleStdin( )$/;"	f	class:BasicCoach
handleStdin	Player.cpp	/^void Player::handleStdin( )$/;"	f	class:Player
holdBall	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::holdBall( )$/;"	f	class:BasicPlayer
host	Makefile	/^host = x86_64-unknown-linux-gnu$/;"	m
host_alias	Makefile	/^host_alias = $/;"	m
host_cpu	Makefile	/^host_cpu = x86_64$/;"	m
host_os	Makefile	/^host_os = linux-gnu$/;"	m
host_triplet	Makefile	/^host_triplet = x86_64-unknown-linux-gnu$/;"	m
host_vendor	Makefile	/^host_vendor = unknown$/;"	m
iCatchBanCycle	ServerSettings.h	/^  int    iCatchBanCycle;    \/*!< catch_ban_cycle: number of cycles after catch$/;"	m	class:ServerSettings
iClangAdviceWin	ServerSettings.h	/^  int    iClangAdviceWin;   \/*!< clang_advice_win: number of advice messages by$/;"	m	class:ServerSettings
iClangDefineWin	ServerSettings.h	/^  int    iClangDefineWin;   \/*!< clang_define_win: number of define messages by$/;"	m	class:ServerSettings
iClangInfoWin	ServerSettings.h	/^  int    iClangInfoWin;     \/*!< clang_info_win: number of info messages by$/;"	m	class:ServerSettings
iClangMessDelay	ServerSettings.h	/^  int    iClangMessDelay;   \/*!< clang_mess_delay: delay of coach messages, ie$/;"	m	class:ServerSettings
iClangMessPerCycle	ServerSettings.h	/^  int    iClangMessPerCycle;\/*!< clang_mess_per_cycle: number of coach messages$/;"	m	class:ServerSettings
iClangMetaWin	ServerSettings.h	/^  int    iClangMetaWin;     \/*!< clang_meta_win: number of meta messages by$/;"	m	class:ServerSettings
iClangWinSize	ServerSettings.h	/^  int    iClangWinSize;     \/*!< clang_win_size: time window which controls how$/;"	m	class:ServerSettings
iCoachPort	ServerSettings.h	/^  int    iCoachPort;        \/*!< coach_port: port number for coach connection*\/$/;"	m	class:ServerSettings
iCommandCounters	WorldModel.h	/^  int           iCommandCounters[CMD_MAX_COMMANDS]; \/*!< counters for all$/;"	m	class:WorldModel
iCyclesCatchWait	PlayerSettings.h	/^  int    iCyclesCatchWait;       \/*!< Cycles the coach waits after a catch has$/;"	m	class:PlayerSettings
iDropBallTime	ServerSettings.h	/^  int    iDropBallTime;     \/*!< drop_ball_time: the number of cycles to wait$/;"	m	class:ServerSettings
iGoalDiff	WorldModel.h	/^  int           iGoalDiff;               \/*!< goal difference                *\/$/;"	m	class:WorldModel
iGoalieMaxMoves	ServerSettings.h	/^  int    iGoalieMaxMoves;   \/*!< goalie_max_moves: maximum number of 'move'$/;"	m	class:ServerSettings
iHalfTime	ServerSettings.h	/^  int    iHalfTime;         \/*!< half_time: the length (in seconds) of a single$/;"	m	class:ServerSettings
iHearDecay	ServerSettings.h	/^  int    iHearDecay;        \/*!< hear_decay: decay rate of player hearing$/;"	m	class:ServerSettings
iHearInc	ServerSettings.h	/^  int    iHearInc;          \/*!< hear_inc: minimum hearing capacity of a player$/;"	m	class:ServerSettings
iHearMax	ServerSettings.h	/^  int    iHearMax;          \/*!< hear_max: maximum hearing capacity of a plyer$/;"	m	class:ServerSettings
iHeteroPlayerType	Objects.h	/^  int     iHeteroPlayerType;     \/*!< index of heterogeneous player type     *\/$/;"	m	class:PlayerObject
iInitialFormation	PlayerSettings.h	/^  int    iInitialFormation;      \/*!< Initial formation for the team.        *\/$/;"	m	class:PlayerSettings
iMaxMoment	ServerSettings.h	/^  int    iMaxMoment;        \/*!< maxmoment: maximum angle for turn\/kick      *\/$/;"	m	class:ServerSettings
iMaxNeckAng	ServerSettings.h	/^  int    iMaxNeckAng;       \/*!< maxneckang: maximum neck angle rel. to body *\/$/;"	m	class:ServerSettings
iMaxNeckMoment	ServerSettings.h	/^  int    iMaxNeckMoment;    \/*!< maxneckmoment: maximum angle for turnneck   *\/$/;"	m	class:ServerSettings
iMaxPower	ServerSettings.h	/^  int    iMaxPower;         \/*!< maxpower: maximum power for dash\/kick       *\/$/;"	m	class:ServerSettings
iMinMoment	ServerSettings.h	/^  int    iMinMoment;        \/*!< minmoment: minimum angle for turn\/kick      *\/$/;"	m	class:ServerSettings
iMinNeckAng	ServerSettings.h	/^  int    iMinNeckAng;       \/*!< minneckang: minimum neck angle rel. to body *\/$/;"	m	class:ServerSettings
iMinNeckMoment	ServerSettings.h	/^  int    iMinNeckMoment;    \/*!< minneckmoment: minimum angle for turnneck   *\/$/;"	m	class:ServerSettings
iMinPower	ServerSettings.h	/^  int    iMinPower;         \/*!< minpower: minimum power for dash\/kick       *\/$/;"	m	class:ServerSettings
iNrHoles	WorldModel.h	/^  int           iNrHoles;                \/*!< nr of holes recorded           *\/$/;"	m	class:WorldModel
iNrOpponentsSeen	WorldModel.h	/^  int           iNrOpponentsSeen;        \/*!< total nr of opponents seen     *\/$/;"	m	class:WorldModel
iNrParticlesAgent	WorldModel.h	/^  static const int iNrParticlesAgent = 100; \/*!<nr of particles used to store$/;"	m	class:WorldModel
iNrParticlesBall	WorldModel.h	/^  static const int iNrParticlesBall  = 100; \/*! nr of particles used to store$/;"	m	class:WorldModel
iNrTeammatesSeen	WorldModel.h	/^  int           iNrTeammatesSeen;        \/*!< total nr of teammates seen     *\/$/;"	m	class:WorldModel
iNrUnknownPlayers	WorldModel.h	/^  int           iNrUnknownPlayers;       \/*!< number of unknown players      *\/$/;"	m	class:WorldModel
iOlCoachPort	ServerSettings.h	/^  int    iOlCoachPort;      \/*!< ol_coach_port: port number for online coach *\/$/;"	m	class:ServerSettings
iPlayerInFormation	Formations.h	/^  int               iPlayerInFormation; \/*!< role agent in current formation *\/$/;"	m	class:Formations
iPlayerNumber	WorldModel.h	/^  int           iPlayerNumber;           \/*!< player number in soccerserver  *\/$/;"	m	class:WorldModel
iPlayerTypes	ServerSettings.h	/^  int    iPlayerTypes;             \/*!< player_types: the number of player $/;"	m	class:ServerSettings
iPlayerWhenToIntercept	PlayerSettings.h	/^  int    iPlayerWhenToIntercept; \/*!< how many cycles to ball when intercept *\/$/;"	m	class:PlayerSettings
iPort	ServerSettings.h	/^  int    iPort;             \/*!< port: port number for player connection     *\/$/;"	m	class:ServerSettings
iRecordVersion	ServerSettings.h	/^  int    iRecordVersion;    \/*!< record_version: the type of log record      *\/$/;"	m	class:ServerSettings
iRecvStep	ServerSettings.h	/^  int    iRecvStep;         \/*!< recv_step: the length of the interval (in ms)$/;"	m	class:ServerSettings
iSayCoachCntMax	ServerSettings.h	/^  int    iSayCoachCntMax;   \/*!< say_coach_cnt_max: maximum number of coach$/;"	m	class:ServerSettings
iSayCoachMsgSize	ServerSettings.h	/^  int    iSayCoachMsgSize;  \/*!< say_coach_msg_size: maximum size of coach$/;"	m	class:ServerSettings
iSayMsgSize	ServerSettings.h	/^  int    iSayMsgSize;       \/*!< say_msg_size: the maximum length (in bytes) of$/;"	m	class:ServerSettings
iSendStep	ServerSettings.h	/^  int    iSendStep;         \/*!< send_step: the length of the interval (in ms)$/;"	m	class:ServerSettings
iSendViStep	ServerSettings.h	/^  int    iSendViStep;       \/*!< send_vi_step: interval of coach's look, i.e.$/;"	m	class:ServerSettings
iSenseBodyStep	ServerSettings.h	/^  int    iSenseBodyStep;    \/*!< sense_body_step: length of the interval (ms)$/;"	m	class:ServerSettings
iServerTimeOut	PlayerSettings.h	/^  int    iServerTimeOut;         \/*!< Number of seconds before the soccer$/;"	m	class:PlayerSettings
iSimStep	SenseHandler.h	/^  int         iSimStep;      \/*!< Length (microsec) of server cycles         *\/$/;"	m	class:SenseHandler
iSimulatorStep	ServerSettings.h	/^  int    iSimulatorStep;    \/*!< simulator_step: the length (in ms) of a$/;"	m	class:ServerSettings
iSlowDownFactor	ServerSettings.h	/^  int    iSlowDownFactor;          \/*!< slow_down_factor: factor to slow down$/;"	m	class:ServerSettings
iSubsMax	ServerSettings.h	/^  int    iSubsMax;                 \/*!< subs_max: the maximum number of$/;"	m	class:ServerSettings
iTackleCycles	ServerSettings.h	/^  int    iTackleCycles;            \/*!< tackle_cycles: cycles immobile after $/;"	m	class:ServerSettings
iTimeSignal	SenseHandler.h	/^  int         iTimeSignal;   \/*!< Wait time (microsec) before sense calls act*\/$/;"	m	class:SenseHandler
iTimer	SenseHandler.h	/^  UINT        iTimer;        \/*!< timer used to call sigalarmHandler function*\/$/;"	m	class:SenseHandler
iTimes	SoccerTypes.h	/^  int          iTimes;      \/*!< how many cycles will a command  be sent     *\/$/;"	m	class:SoccerCommand
iTriCounter	SenseHandler.h	/^  int         iTriCounter;   \/*!< Indicates when see message will arive      *\/$/;"	m	class:SenseHandler
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
infodir	Makefile	/^infodir = ${prefix}\/info$/;"	m
initParticlesAgent	WorldModelUpdate.cpp	/^void WorldModel::initParticlesAgent( AngDeg angGlobal )$/;"	f	class:WorldModel
initParticlesAgent	WorldModelUpdate.cpp	/^void WorldModel::initParticlesAgent( VecPosition posInitial )$/;"	f	class:WorldModel
initParticlesBall	WorldModelUpdate.cpp	/^void WorldModel::initParticlesBall( VecPosition posArray[],$/;"	f	class:WorldModel
install_sh	Makefile	/^install_sh = \/home\/reinke.wolfram-tit13\/data\/programFiles\/robocup\/src\/tit11\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
intercept	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::intercept( bool isGoalie )$/;"	f	class:BasicPlayer
interceptClose	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::interceptClose( )$/;"	f	class:BasicPlayer
interceptCloseGoalie	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::interceptCloseGoalie( )$/;"	f	class:BasicPlayer
interceptScoringAttempt	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::interceptScoringAttempt( )$/;"	f	class:BasicPlayer
invQuantizeMax	WorldModelUpdate.cpp	/^double WorldModel::invQuantizeMax( double dOutput, double dQuantizeStep )$/;"	f	class:WorldModel
invQuantizeMin	WorldModelUpdate.cpp	/^double WorldModel::invQuantizeMin( double dOutput, double dQuantizeStep )$/;"	f	class:WorldModel
isAngInInterval	Geometry.cpp	/^bool isAngInInterval( AngDeg ang, AngDeg angMin, AngDeg angMax )$/;"	f
isBackPassThem	WorldModel.cpp	/^bool WorldModel::isBackPassThem( PlayModeT pm )$/;"	f	class:WorldModel
isBackPassUs	WorldModel.cpp	/^bool WorldModel::isBackPassUs( PlayModeT pm )$/;"	f	class:WorldModel
isBall	SoccerTypes.cpp	/^bool SoccerTypes::isBall( ObjectT o )$/;"	f	class:SoccerTypes
isBallCatchable	WorldModelHighLevel.cpp	/^bool WorldModel::isBallCatchable()$/;"	f	class:WorldModel
isBallHeadingToGoal	WorldModelHighLevel.cpp	/^bool WorldModel::isBallHeadingToGoal(  )$/;"	f	class:WorldModel
isBallInOurPossesion	WorldModelHighLevel.cpp	/^bool WorldModel::isBallInOurPossesion( )$/;"	f	class:WorldModel
isBallInOwnPenaltyArea	WorldModelHighLevel.cpp	/^bool WorldModel::isBallInOwnPenaltyArea( )$/;"	f	class:WorldModel
isBallKickable	WorldModelHighLevel.cpp	/^bool WorldModel::isBallKickable()$/;"	f	class:WorldModel
isBeforeGoal	WorldModelHighLevel.cpp	/^bool WorldModel::isBeforeGoal( VecPosition pos )$/;"	f	class:WorldModel
isBeforeKickOff	WorldModel.cpp	/^bool WorldModel::isBeforeKickOff( PlayModeT pm )$/;"	f	class:WorldModel
isBehindOf	Geometry.cpp	/^bool VecPosition::isBehindOf( const VecPosition &p )$/;"	f	class:VecPosition
isBehindOf	Geometry.cpp	/^bool VecPosition::isBehindOf( const double &d )$/;"	f	class:VecPosition
isBetweenX	Geometry.cpp	/^bool VecPosition::isBetweenX( const VecPosition &p1, const VecPosition &p2 )$/;"	f	class:VecPosition
isBetweenX	Geometry.cpp	/^bool VecPosition::isBetweenX( const double &d1, const double &d2 )$/;"	f	class:VecPosition
isBetweenY	Geometry.cpp	/^bool VecPosition::isBetweenY( const VecPosition &p1, const VecPosition &p2 )$/;"	f	class:VecPosition
isBetweenY	Geometry.cpp	/^bool VecPosition::isBetweenY( const double &d1, const double &d2 )$/;"	f	class:VecPosition
isCollisionAfterCommand	WorldModelPredict.cpp	/^bool WorldModel::isCollisionAfterCommand( SoccerCommand soc )$/;"	f	class:WorldModel
isConfidenceGood	WorldModelHighLevel.cpp	/^bool WorldModel::isConfidenceGood( ObjectT o )$/;"	f	class:WorldModel
isConfidenceVeryGood	WorldModelHighLevel.cpp	/^bool WorldModel::isConfidenceVeryGood( ObjectT o )$/;"	f	class:WorldModel
isConnected	Connection.cpp	/^bool Connection::isConnected(void) const$/;"	f	class:Connection
isCornerKickThem	WorldModel.cpp	/^bool WorldModel::isCornerKickThem( PlayModeT pm )$/;"	f	class:WorldModel
isCornerKickUs	WorldModel.cpp	/^bool WorldModel::isCornerKickUs( PlayModeT pm )$/;"	f	class:WorldModel
isDeadBallThem	WorldModel.cpp	/^bool WorldModel::isDeadBallThem( PlayModeT pm )$/;"	f	class:WorldModel
isDeadBallUs	WorldModel.cpp	/^bool WorldModel::isDeadBallUs( PlayModeT pm )$/;"	f	class:WorldModel
isDribbleFast	Player.cpp	/^bool Player::isDribbleFast(AngDeg& ang)$/;"	f	class:Player
isEmptySpace	WorldModelHighLevel.cpp	/^bool WorldModel::isEmptySpace( ObjectT obj, AngDeg ang, double dDist )$/;"	f	class:WorldModel
isFeatureRelevant	WorldModel.cpp	/^bool WorldModel::isFeatureRelevant( FeatureT type )$/;"	f	class:WorldModel
isFlag	SoccerTypes.cpp	/^bool SoccerTypes::isFlag( ObjectT o )$/;"	f	class:SoccerTypes
isFreeKickFaultThem	WorldModel.cpp	/^bool WorldModel::isFreeKickFaultThem( PlayModeT pm )$/;"	f	class:WorldModel
isFreeKickFaultUs	WorldModel.cpp	/^bool WorldModel::isFreeKickFaultUs( PlayModeT pm )$/;"	f	class:WorldModel
isFreeKickThem	WorldModel.cpp	/^bool WorldModel::isFreeKickThem( PlayModeT pm )$/;"	f	class:WorldModel
isFreeKickUs	WorldModel.cpp	/^bool WorldModel::isFreeKickUs( PlayModeT pm )$/;"	f	class:WorldModel
isFullStateOn	WorldModel.cpp	/^bool WorldModel::isFullStateOn( SideT s )$/;"	f	class:WorldModel
isGoal	SoccerTypes.cpp	/^bool SoccerTypes::isGoal( ObjectT o )$/;"	f	class:SoccerTypes
isGoalKickThem	WorldModel.cpp	/^bool WorldModel::isGoalKickThem( PlayModeT pm )$/;"	f	class:WorldModel
isGoalKickUs	WorldModel.cpp	/^bool WorldModel::isGoalKickUs( PlayModeT pm )$/;"	f	class:WorldModel
isGoalie	Objects.h	/^  bool    isGoalie;              \/*!< is this object a goalie                *\/$/;"	m	class:PlayerObject
isGoalie	SoccerTypes.cpp	/^bool SoccerTypes::isGoalie( ObjectT o )$/;"	f	class:SoccerTypes
isIllegal	SoccerTypes.cpp	/^bool SoccerCommand::isIllegal( )$/;"	f	class:SoccerCommand
isInBetween	Geometry.cpp	/^bool Line::isInBetween( VecPosition pos, VecPosition point1,VecPosition point2)$/;"	f	class:Line
isInField	WorldModelHighLevel.cpp	/^bool WorldModel::isInField( VecPosition pos, double dMargin )$/;"	f	class:WorldModel
isInFrontOf	Geometry.cpp	/^bool VecPosition::isInFrontOf( const VecPosition &p )$/;"	f	class:VecPosition
isInFrontOf	Geometry.cpp	/^bool VecPosition::isInFrontOf( const double &d )$/;"	f	class:VecPosition
isInLogLevel	Logger.cpp	/^bool Logger::isInLogLevel( int iLevel )$/;"	f	class:Logger
isInOwnPenaltyArea	WorldModelHighLevel.cpp	/^bool WorldModel::isInOwnPenaltyArea( VecPosition pos )$/;"	f	class:WorldModel
isInPlayerSet	WorldModel.cpp	/^bool WorldModel::isInPlayerSet( ObjectT o, PlayerSetT ps )$/;"	f	class:WorldModel
isInRange	Objects.cpp	/^bool PlayerObject::isInRange( ObjectT obj, bool bTeammatesFirst )$/;"	f	class:PlayerObject
isInSet	SoccerTypes.cpp	/^bool SoccerTypes::isInSet( ObjectT o, ObjectSetT o_g, ObjectT objGoalie )$/;"	f	class:SoccerTypes
isInTheirPenaltyArea	WorldModelHighLevel.cpp	/^bool WorldModel::isInTheirPenaltyArea( VecPosition pos )$/;"	f	class:WorldModel
isInside	Geometry.cpp	/^bool Circle::isInside( VecPosition pos )$/;"	f	class:Circle
isInside	Geometry.cpp	/^bool Rect::isInside( VecPosition pos )$/;"	f	class:Rect
isKickInThem	WorldModel.cpp	/^bool WorldModel::isKickInThem( PlayModeT pm )$/;"	f	class:WorldModel
isKickInUs	WorldModel.cpp	/^bool WorldModel::isKickInUs( PlayModeT pm )$/;"	f	class:WorldModel
isKickOffThem	WorldModel.cpp	/^bool WorldModel::isKickOffThem( PlayModeT pm )$/;"	f	class:WorldModel
isKickOffUs	WorldModel.cpp	/^bool WorldModel::isKickOffUs( PlayModeT pm )$/;"	f	class:WorldModel
isKickable	Player.cpp	/^bool Player:: isKickable( VecPosition & pos )$/;"	f	class:Player
isKnownPlayer	Objects.h	/^  bool    isKnownPlayer;         \/*!< are we sure about player number        *\/$/;"	m	class:PlayerObject
isKnownPlayer	SoccerTypes.cpp	/^bool SoccerTypes::isKnownPlayer( ObjectT o )$/;"	f	class:SoccerTypes
isKnownPlayer	WorldModel.cpp	/^bool WorldModel::isKnownPlayer( ObjectT o )$/;"	f	class:WorldModel
isLastMessageSee	WorldModel.cpp	/^bool WorldModel::isLastMessageSee() const$/;"	f	class:WorldModel
isLeftOf	Geometry.cpp	/^bool VecPosition::isLeftOf( const VecPosition &p )$/;"	f	class:VecPosition
isLeftOf	Geometry.cpp	/^bool VecPosition::isLeftOf( const double &d )$/;"	f	class:VecPosition
isLine	SoccerTypes.cpp	/^bool SoccerTypes::isLine( ObjectT o )$/;"	f	class:SoccerTypes
isOffsideThem	WorldModel.cpp	/^bool WorldModel::isOffsideThem( PlayModeT pm )$/;"	f	class:WorldModel
isOffsideUs	WorldModel.cpp	/^bool WorldModel::isOffsideUs( PlayModeT pm )$/;"	f	class:WorldModel
isOnside	WorldModelHighLevel.cpp	/^bool WorldModel::isOnside( ObjectT obj )$/;"	f	class:WorldModel
isOpponent	SoccerTypes.cpp	/^bool SoccerTypes::isOpponent( ObjectT o )$/;"	f	class:SoccerTypes
isOpponentAtAngle	WorldModelHighLevel.cpp	/^bool WorldModel::isOpponentAtAngle( AngDeg ang , double dDist )$/;"	f	class:WorldModel
isPassingPractical	PlayerTeams.cpp	/^bool Player::isPassingPractical(VecPosition source, VecPosition target)$/;"	f	class:Player
isPenaltyThem	WorldModel.cpp	/^bool WorldModel::isPenaltyThem( PlayModeT pm )$/;"	f	class:WorldModel
isPenaltyUs	WorldModel.cpp	/^bool WorldModel::isPenaltyUs( PlayModeT pm )$/;"	f	class:WorldModel
isPlayer	SoccerTypes.cpp	/^bool SoccerTypes::isPlayer( ObjectT o )$/;"	f	class:SoccerTypes
isPlayerTypeInSet	SoccerTypes.cpp	/^bool SoccerTypes::isPlayerTypeInSet( PlayerT p, PlayerSetT p_s )$/;"	f	class:SoccerTypes
isPositionReached	PlayerTeams.cpp	/^bool Player::isPositionReached(VecPosition target, double entfernung)$/;"	f	class:Player
isPrimaryCommand	SoccerTypes.cpp	/^bool SoccerTypes::isPrimaryCommand( CommandT com )$/;"	f	class:SoccerTypes
isQueueEmpty	ActHandler.cpp	/^bool ActHandler::isQueueEmpty()$/;"	f	class:ActHandler
isQueuedActionPerformed	WorldModel.cpp	/^bool WorldModel::isQueuedActionPerformed()$/;"	f	class:WorldModel
isRightOf	Geometry.cpp	/^bool VecPosition::isRightOf( const VecPosition &p )$/;"	f	class:VecPosition
isRightOf	Geometry.cpp	/^bool VecPosition::isRightOf( const double &d )$/;"	f	class:VecPosition
isStopped	SoccerTypes.cpp	/^bool Time::isStopped( )$/;"	f	class:Time
isTeammate	SoccerTypes.cpp	/^bool SoccerTypes::isTeammate( ObjectT o )$/;"	f	class:SoccerTypes
isTimeStopped	WorldModel.cpp	/^bool WorldModel::isTimeStopped()$/;"	f	class:WorldModel
isVisible	WorldModelHighLevel.cpp	/^bool WorldModel::isVisible( ObjectT o )$/;"	f	class:WorldModel
iterateObjectDone	WorldModel.cpp	/^void WorldModel::iterateObjectDone( int &iIndex )$/;"	f	class:WorldModel
iterateObjectNext	WorldModel.cpp	/^ObjectT WorldModel::iterateObjectNext(int& iIndex,ObjectSetT g, double dConf,$/;"	f	class:WorldModel
iterateObjectStart	WorldModel.cpp	/^ObjectT WorldModel::iterateObjectStart(int& iIndex,ObjectSetT g,double dConf,$/;"	f	class:WorldModel
itv	SenseHandler.h	/^  struct      itimerval itv; \/*!< timer used to set alarm to send action     *\/$/;"	m	class:SenseHandler	typeref:struct:SenseHandler::itimerval
kickBallCloseToBody	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::kickBallCloseToBody( AngDeg ang, double dKickRatio )$/;"	f	class:BasicPlayer
kickTo	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::kickTo( VecPosition posTarget, double dEndSpeed )$/;"	f	class:BasicPlayer
leadingPass	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::leadingPass( ObjectT o, double dDist, DirectionT dir)$/;"	f	class:BasicPlayer
letTackle	Player.cpp	/^bool Player::letTackle()$/;"	f	class:Player
libdir	Makefile	/^libdir = ${exec_prefix}\/lib64$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/lib$/;"	m
listenTo	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::listenTo( ObjectT obj )$/;"	f	class:BasicPlayer
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
log	Logger.cpp	/^bool Logger::log( int iLevel, char *str, ... )$/;"	f	class:Logger
log	Logger.cpp	/^bool Logger::log( int iLevel, string str)$/;"	f	class:Logger
logCircle	WorldModel.cpp	/^bool WorldModel::logCircle( int iLogLevel, VecPosition pos, double  dRadius,$/;"	f	class:WorldModel
logCoordInfo	WorldModel.cpp	/^void WorldModel::logCoordInfo( int iLogLevel  )$/;"	f	class:WorldModel
logDrawBallInfo	WorldModel.cpp	/^bool WorldModel::logDrawBallInfo( int  iLogLevel )$/;"	f	class:WorldModel
logDrawInfo	WorldModel.cpp	/^void WorldModel::logDrawInfo( int iLogLevel  )$/;"	f	class:WorldModel
logFromSignal	Logger.cpp	/^bool Logger::logFromSignal( int iLevel, char   *str, ...        )$/;"	f	class:Logger
logLine	WorldModel.cpp	/^bool WorldModel::logLine( int  iLogLevel, VecPosition pos1, VecPosition pos2,$/;"	f	class:WorldModel
logObjectInformation	WorldModel.cpp	/^void WorldModel::logObjectInformation( int iLogLevel, ObjectT obj )$/;"	f	class:WorldModel
logSignal	Logger.cpp	/^bool Logger::logSignal( )$/;"	f	class:Logger
logWithTime	Logger.cpp	/^bool Logger::logWithTime( int iLevel, char *str, ... )$/;"	f	class:Logger
lowDistanceToOpponentGoal	Player.cpp	/^double Player::lowDistanceToOpponentGoal()$/;"	f	class:Player
m_a	Geometry.h	/^  double m_a; \/*!< This is the a coefficient in the line ay + bx + c = 0 *\/$/;"	m	class:Line
m_actionPrev	Player.h	/^  ActionT       m_actionPrev;            \/*!< previous action of this agent  *\/$/;"	m	class:Player
m_angGlobalArm	Objects.h	/^  AngDeg  m_angGlobalArm;        \/*!< global pointing direction of arm       *\/$/;"	m	class:PlayerObject
m_b	Geometry.h	/^  double m_b; \/*!< This is the b coefficient in the line ay + bx + c = 0 *\/$/;"	m	class:Line
m_bArmMovable	Objects.h	/^  bool         m_bArmMovable;         \/*!< Indicates whether can move arm.   *\/$/;"	m	class:AgentObject
m_bPerformedKick	WorldModel.h	/^  bool          m_bPerformedKick;       \/*!<Indicates whether ball was kicked*\/$/;"	m	class:WorldModel
m_bRecvThink	WorldModel.h	/^  bool          m_bRecvThink;           \/*!< think received in sync. mode    *\/$/;"	m	class:WorldModel
m_bWasCollision	WorldModel.h	/^  bool          m_bWasCollision;        \/*!<Indicates whether it is collision*\/$/;"	m	class:WorldModel
m_buf	Logger.h	/^  char     m_buf[MAX_LOG_LINE];    \/*!< buffer needed by different methods   *\/$/;"	m	class:Logger
m_c	Geometry.h	/^  double m_c; \/*!< This is the c coefficient in the line ay + bx + c = 0 *\/$/;"	m	class:Line
m_changeViewCommand	WorldModel.h	/^  SoccerCommand m_changeViewCommand;    \/*!< last sent change_view command   *\/$/;"	m	class:WorldModel
m_colorPlayers	WorldModel.h	/^  char m_colorPlayers[11][8];       \/*!< color information with which each$/;"	m	class:WorldModel
m_dCommOffsideX	WorldModel.h	/^  double        m_dCommOffsideX;        \/*!< communicated offside line       *\/$/;"	m	class:WorldModel
m_dEffort	Objects.h	/^  double m_dEffort;               \/*!< Effort value (0..1)               *\/$/;"	m	class:Stamina
m_dInfo	SoccerTypes.h	/^  double        m_dInfo;    \/*!< information stored with this feature        *\/$/;"	m	class:Feature
m_dRadius	Geometry.h	/^    double      m_dRadius;              \/*!< Radius of the circle  *\/$/;"	m	class:Circle
m_dRecovery	Objects.h	/^  double m_dRecovery;             \/*!< Recovery (0..1)                   *\/$/;"	m	class:Stamina
m_dStamina	Objects.h	/^  double m_dStamina;              \/*!< Stamina value (>0)                *\/$/;"	m	class:Stamina
m_features	WorldModel.h	/^  Feature       m_features[MAX_FEATURES];\/*!< features applied to cur. cycle.*\/$/;"	m	class:WorldModel
m_iArmExpires	Objects.h	/^  int          m_iArmExpires;         \/*!< Nr. of cycles till arm expires    *\/$/;"	m	class:AgentObject
m_iCycleInMsg	WorldModel.h	/^  int           m_iCycleInMsg;          \/*!< cycle contained in message      *\/$/;"	m	class:WorldModel
m_iMaxGenericValues	GenericValues.h	/^  int   m_iMaxGenericValues;\/*!< the number of generic values in the current$/;"	m	class:GenericValues
m_iMaxMsgSize	Connection.h	/^  int            m_iMaxMsgSize; \/*!< max  message size for send and receive  *\/$/;"	m	class:Connection
m_iMessageSender	WorldModel.h	/^  int           m_iMessageSender;       \/*!< player who send message         *\/$/;"	m	class:WorldModel
m_iMultX	WorldModel.h	/^  int m_iMultX;                     \/*!< This variable denotes with which value$/;"	m	class:WorldModel
m_iMultY	WorldModel.h	/^  int m_iMultY;                     \/*!< This variable denotes with which value$/;"	m	class:WorldModel
m_iMultipleCommands	ActHandler.h	/^  int            m_iMultipleCommands;    \/*!< number of non-primary commands *\/$/;"	m	class:ActHandler
m_iPenaltyNr	Player.h	/^  int           m_iPenaltyNr;            \/*!< number of current penalty      *\/$/;"	m	class:Player
m_iSeeCounter	SenseHandler.h	/^  int         m_iSeeCounter; \/*!<! Used to count number of see msg in 1 cycle*\/$/;"	m	class:SenseHandler
m_iStopped	SoccerTypes.h	/^  int m_iStopped;         \/*!< Number of cycles stopped at m_iTime *\/$/;"	m	class:Time
m_iTackleExpires	Objects.h	/^  int          m_iTackleExpires;      \/*!< Nr. of cycles till tackle expires *\/$/;"	m	class:AgentObject
m_iTime	SoccerTypes.h	/^  int m_iTime;            \/*!< Number of cycles, denoting the time *\/$/;"	m	class:Time
m_iValuesTotal	GenericValues.h	/^  int   m_iValuesTotal;     \/*!< the total number of generic values stored in$/;"	m	class:GenericValues
m_objFocus	WorldModel.h	/^  ObjectT       m_objFocus;             \/*!< object to which is focused.     *\/$/;"	m	class:WorldModel
m_objMarkOpp	Player.h	/^  ObjectT       m_objMarkOpp;            \/*!< last marked opponent           *\/$/;"	m	class:Player
m_objPassOption	Player.h	/^  ObjectT       m_objPassOption;         \/*!< passing option in kick         *\/$/;"	m	class:Player
m_object	SoccerTypes.h	/^  ObjectT       m_object;   \/*!< object information stored with this feature *\/$/;"	m	class:Feature
m_os	Logger.h	/^  ostream* m_os;                   \/*!< output stream to print messages to   *\/$/;"	m	class:Logger
m_player_types	BasicCoach.h	/^  HeteroPlayerSettings m_player_types[MAX_HETERO_PLAYERS];$/;"	m	class:BasicCoach
m_posCenter	Geometry.h	/^    VecPosition m_posCenter;            \/*!< Center of the circle  *\/$/;"	m	class:Circle
m_posGlobalArm	Objects.h	/^  VecPosition  m_posGlobalArm;       ;\/*!< Global point to which arm point   *\/$/;"	m	class:AgentObject
m_posLeftTop	Geometry.h	/^  VecPosition m_posLeftTop;     \/*!< top left position of the rectangle      *\/$/;"	m	class:Rect
m_posRightBottom	Geometry.h	/^  VecPosition m_posRightBottom; \/*!< bottom right position of the rectangle  *\/$/;"	m	class:Rect
m_queueMultipleCommands	ActHandler.h	/^  SoccerCommand  m_queueMultipleCommands[CMD_MAX_COMMANDS];$/;"	m	class:ActHandler
m_queueOneCycleCommand	ActHandler.h	/^  SoccerCommand  m_queueOneCycleCommand; \/*!< primary command is saved here  *\/$/;"	m	class:ActHandler
m_setLogLevels	Logger.h	/^  set<int> m_setLogLevels;         \/*!< set that contains all log levels     *\/$/;"	m	class:Logger
m_setSubstitutedOpp	WorldModel.h	/^  set<ObjectT>  m_setSubstitutedOpp;    \/*!< Set of substituted opp players. *\/$/;"	m	class:WorldModel
m_sidePenalty	WorldModel.h	/^  SideT         m_sidePenalty;$/;"	m	class:WorldModel
m_soc	SoccerTypes.h	/^  SoccerCommand m_soc;      \/*!< command stored with this feature            *\/$/;"	m	class:Feature
m_sock	Connection.h	/^  Socket         m_sock;        \/*!< communication protocol with the server. *\/$/;"	m	class:Connection
m_strClassName	GenericValues.h	/^  char  *m_strClassName;    \/*!< the name associated with this group of generic$/;"	m	class:GenericValues
m_strCommunicate	WorldModel.h	/^  char          m_strCommunicate[MAX_SAY_MSG];\/*!< string for communicating  *\/$/;"	m	class:WorldModel
m_strHeader	Logger.h	/^  char     m_strHeader[MAX_HEADER];\/*!< header string printed before msg     *\/$/;"	m	class:Logger
m_strName	GenericValues.h	/^  const char*      m_strName;  \/*!< the name associated with the variable to$/;"	m	class:GenericValueT
m_strPlayerMsg	WorldModel.h	/^  char          m_strPlayerMsg[MAX_MSG];\/*!< message communicated by player  *\/$/;"	m	class:WorldModel
m_strSignal	Logger.h	/^  string   m_strSignal;            \/*!< temporary string for other messages  *\/$/;"	m	class:Logger
m_timeCommOffsideX	WorldModel.h	/^  Time          m_timeCommOffsideX;     \/*!< time Communicated offside line  *\/$/;"	m	class:WorldModel
m_timeGlobalArm	Objects.h	/^  Time    m_timeGlobalArm;       \/*!< time arm last seen                     *\/$/;"	m	class:PlayerObject
m_timeHear	SoccerTypes.h	/^  Time          m_timeHear; \/*!< hear time corresponding to stored info      *\/$/;"	m	class:Feature
m_timeLastCollision	WorldModel.h	/^  Time          m_timeLastCollision;    \/*!< Last collision time             *\/$/;"	m	class:WorldModel
m_timeLastSay	Player.h	/^  Time          m_timeLastSay;           \/*!< last time communicated         *\/$/;"	m	class:Player
m_timePlayerMsg	WorldModel.h	/^  Time          m_timePlayerMsg;        \/*!< time corresponding to player msg*\/$/;"	m	class:WorldModel
m_timeSee	SoccerTypes.h	/^  Time          m_timeSee;  \/*!< see time corresponding to stored information*\/$/;"	m	class:Feature
m_timeSense	SoccerTypes.h	/^  Time          m_timeSense;\/*!< sense time corresponding to stored info     *\/$/;"	m	class:Feature
m_timeTackle	Objects.h	/^  Time    m_timeTackle;          \/*!< time tackle command was observerd      *\/$/;"	m	class:PlayerObject
m_timing	Logger.h	/^  Timing   m_timing;               \/*!< timer to print timing information    *\/$/;"	m	class:Logger
m_type	GenericValues.h	/^  GenericValueKind m_type;     \/*!< the (generic) type of the variable to which$/;"	m	class:GenericValueT
m_vAddress	GenericValues.h	/^  void*            m_vAddress; \/*!< a pointer to a variable of a generic type*\/$/;"	m	class:GenericValueT
m_values	GenericValues.h	/^  GenericValueT ** m_values;\/*!< a pointer to an array containing all generic$/;"	m	class:GenericValues
m_vec	SoccerTypes.h	/^  VecPosition   m_vec;      \/*!< information stored with this feature        *\/$/;"	m	class:Feature
m_x	Geometry.h	/^  double m_x;   \/*!< x-coordinate of this position *\/$/;"	m	class:VecPosition
m_y	Geometry.h	/^  double m_y;   \/*!< y-coordinate of this position *\/$/;"	m	class:VecPosition
main	main.cpp	/^int main( int argc, char * argv[] )$/;"	f
main	mainCoach.cpp	/^int main( int argc, char * argv[] )$/;"	f
mainLoop	Player.cpp	/^void Player::mainLoop( )$/;"	f	class:Player
mainLoopNormal	BasicCoach.cpp	/^void BasicCoach::mainLoopNormal( )$/;"	f	class:BasicCoach
makeAttentionToCommand	SoccerTypes.cpp	/^bool SoccerCommand::makeAttentionToCommand( char *str  )$/;"	f	class:SoccerCommand
makeBallInfo	Player.cpp	/^void Player::makeBallInfo( VecPosition posBall, VecPosition velBall, int iDiff,$/;"	f	class:Player
makeCatchCommand	SoccerTypes.cpp	/^bool SoccerCommand::makeCatchCommand( char *str  )$/;"	f	class:SoccerCommand
makeChangePlayerCommand	SoccerTypes.cpp	/^bool SoccerCommand::makeChangePlayerCommand( char *str  )$/;"	f	class:SoccerCommand
makeChangeViewCommand	SoccerTypes.cpp	/^bool SoccerCommand::makeChangeViewCommand( char *str  )$/;"	f	class:SoccerCommand
makeCommand	SoccerTypes.cpp	/^void SoccerCommand::makeCommand( CommandT com, ViewAngleT v, ViewQualityT q )$/;"	f	class:SoccerCommand
makeCommand	SoccerTypes.cpp	/^void SoccerCommand::makeCommand( CommandT com, char* msg )$/;"	f	class:SoccerCommand
makeCommand	SoccerTypes.cpp	/^void SoccerCommand::makeCommand( CommandT com, double d1, $/;"	f	class:SoccerCommand
makeDashCommand	SoccerTypes.cpp	/^bool SoccerCommand::makeDashCommand( char *str  )$/;"	f	class:SoccerCommand
makeKickCommand	SoccerTypes.cpp	/^bool SoccerCommand::makeKickCommand( char *str  )$/;"	f	class:SoccerCommand
makeLineFromPositionAndAngle	Geometry.cpp	/^Line Line::makeLineFromPositionAndAngle( VecPosition vec, AngDeg angle )$/;"	f	class:Line
makeLineFromTwoPoints	Geometry.cpp	/^Line Line::makeLineFromTwoPoints( VecPosition pos1, VecPosition pos2 )$/;"	f	class:Line
makeMoveCommand	SoccerTypes.cpp	/^bool SoccerCommand::makeMoveCommand( char *str  )$/;"	f	class:SoccerCommand
makePointToCommand	SoccerTypes.cpp	/^bool SoccerCommand::makePointToCommand( char *str  )$/;"	f	class:SoccerCommand
makeSayCommand	SoccerTypes.cpp	/^bool SoccerCommand::makeSayCommand( char *str_com  )$/;"	f	class:SoccerCommand
makeSenseBodyCommand	SoccerTypes.cpp	/^bool SoccerCommand::makeSenseBodyCommand( char *str  )$/;"	f	class:SoccerCommand
makeSynchSeeToCommand	SoccerTypes.cpp	/^bool SoccerCommand::makeSynchSeeToCommand( char *str  )$/;"	f	class:SoccerCommand
makeTackleCommand	SoccerTypes.cpp	/^bool SoccerCommand::makeTackleCommand( char *str  )$/;"	f	class:SoccerCommand
makeTurnCommand	SoccerTypes.cpp	/^bool SoccerCommand::makeTurnCommand( char *str  )$/;"	f	class:SoccerCommand
makeTurnNeckCommand	SoccerTypes.cpp	/^bool SoccerCommand::makeTurnNeckCommand( char *str  )$/;"	f	class:SoccerCommand
mandir	Makefile	/^mandir = ${prefix}\/man$/;"	m
mapUnknownPlayers	WorldModelUpdate.cpp	/^void WorldModel::mapUnknownPlayers( Time time)$/;"	f	class:WorldModel
mark	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::mark( ObjectT o, double dDist, MarkT mark )$/;"	f	class:BasicPlayer
max	Geometry.cpp	/^double max( double d1, double d2 )$/;"	f
max_back_tackle_power	ServerSettings.h	/^    double max_back_tackle_power ;$/;"	m	class:ServerSettings
max_dash_angle	ServerSettings.h	/^    double max_dash_angle ;$/;"	m	class:ServerSettings
max_dash_power	ServerSettings.h	/^    double max_dash_power ;$/;"	m	class:ServerSettings
max_monitors	ServerSettings.h	/^    int max_monitors ;$/;"	m	class:ServerSettings
max_tackle_power	ServerSettings.h	/^    double max_tackle_power ;$/;"	m	class:ServerSettings
message_loop	Connection.cpp	/^int Connection::message_loop( FILE *fpin, FILE *fpout )$/;"	f	class:Connection
midfielderMainLoop	Player.cpp	/^SoccerCommand Player::midfielderMainLoop( )$/;"	f	class:Player
min	Geometry.cpp	/^double min( double d1, double d2 )$/;"	f
min_dash_angle	ServerSettings.h	/^    double min_dash_angle ;$/;"	m	class:ServerSettings
min_dash_power	ServerSettings.h	/^    double min_dash_power ;$/;"	m	class:ServerSettings
mkinstalldirs	Makefile	/^mkinstalldirs = $(SHELL) $(top_srcdir)\/mkinstalldirs$/;"	m
moveToPos	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::moveToPos( VecPosition posTo, AngDeg angWhenToTurn,$/;"	f	class:BasicPlayer
moveToPosAlongLine	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::moveToPosAlongLine( VecPosition pos, AngDeg ang,$/;"	f	class:BasicPlayer
mutex_newInfo	WorldModel.h	/^  CRITICAL_SECTION mutex_newInfo;       \/*!< mutex to protect bNewInfo       *\/$/;"	m	class:WorldModel
mutex_newInfo	WorldModel.h	/^  pthread_mutex_t  mutex_newInfo;       \/*!< mutex to protect bNewInfo       *\/$/;"	m	class:WorldModel
mutex_stream	Logger.h	/^  pthread_mutex_t mutex_stream; $/;"	m	class:Logger
myRelativeDirection	Player.cpp	/^AngDeg Player::myRelativeDirection(VecPosition posAgent)$/;"	f	class:Player
normalize	Geometry.cpp	/^VecPosition VecPosition::normalize( )$/;"	f	class:VecPosition
normalizeAngle	Geometry.cpp	/^AngDeg VecPosition::normalizeAngle( AngDeg angle )$/;"	f	class:VecPosition
objRangeMax	Objects.h	/^  ObjectT objRangeMax;           \/*!< Maximum in range of possible player obj*\/$/;"	m	class:PlayerObject
objRangeMin	Objects.h	/^  ObjectT objRangeMin;           \/*!< Minimum in range of possible player obj*\/$/;"	m	class:PlayerObject
objectType	Objects.h	/^  ObjectT     objectType;             \/*!< Type of this object               *\/$/;"	m	class:Object
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
operator !=	Geometry.cpp	/^bool VecPosition::operator !=( const VecPosition &p )$/;"	f	class:VecPosition
operator !=	Geometry.cpp	/^bool VecPosition::operator !=( const double &d )$/;"	f	class:VecPosition
operator !=	SoccerTypes.cpp	/^bool Time::operator != ( Time t )$/;"	f	class:Time
operator !=	SoccerTypes.cpp	/^bool Time::operator != ( const int &i )$/;"	f	class:Time
operator *	Geometry.cpp	/^VecPosition VecPosition::operator * ( const VecPosition &p )$/;"	f	class:VecPosition
operator *	Geometry.cpp	/^VecPosition VecPosition::operator * ( const double &d  )$/;"	f	class:VecPosition
operator *=	Geometry.cpp	/^void VecPosition::operator *=( const VecPosition &p )$/;"	f	class:VecPosition
operator *=	Geometry.cpp	/^void VecPosition::operator *=( const double &d )$/;"	f	class:VecPosition
operator +	Geometry.cpp	/^VecPosition VecPosition::operator + ( const VecPosition &p )$/;"	f	class:VecPosition
operator +	Geometry.cpp	/^VecPosition VecPosition::operator + ( const double &d )$/;"	f	class:VecPosition
operator +	SoccerTypes.cpp	/^Time Time::operator + ( Time t )$/;"	f	class:Time
operator +	SoccerTypes.cpp	/^Time Time::operator + ( const int &i )$/;"	f	class:Time
operator +=	Geometry.cpp	/^void VecPosition::operator += ( const double &d )$/;"	f	class:VecPosition
operator +=	Geometry.cpp	/^void VecPosition::operator +=( const VecPosition &p )$/;"	f	class:VecPosition
operator +=	SoccerTypes.cpp	/^void Time::operator += ( Time t )$/;"	f	class:Time
operator +=	SoccerTypes.cpp	/^void Time::operator += ( const int &i )$/;"	f	class:Time
operator -	Geometry.cpp	/^VecPosition VecPosition::operator - ( )$/;"	f	class:VecPosition
operator -	Geometry.cpp	/^VecPosition VecPosition::operator - ( const VecPosition &p )$/;"	f	class:VecPosition
operator -	Geometry.cpp	/^VecPosition VecPosition::operator - ( const double &d )$/;"	f	class:VecPosition
operator -	SoccerTypes.cpp	/^Time Time::operator - ( const int &i )$/;"	f	class:Time
operator -	SoccerTypes.cpp	/^int Time::operator - ( Time t )$/;"	f	class:Time
operator -=	Geometry.cpp	/^void VecPosition::operator -=( const VecPosition &p )$/;"	f	class:VecPosition
operator -=	Geometry.cpp	/^void VecPosition::operator -=( const double &d )$/;"	f	class:VecPosition
operator -=	SoccerTypes.cpp	/^void Time::operator -= ( Time t )$/;"	f	class:Time
operator -=	SoccerTypes.cpp	/^void Time::operator -= ( const int &i )$/;"	f	class:Time
operator /	Geometry.cpp	/^VecPosition VecPosition::operator \/ ( const VecPosition &p )$/;"	f	class:VecPosition
operator /	Geometry.cpp	/^VecPosition VecPosition::operator \/ ( const double &d )$/;"	f	class:VecPosition
operator /=	Geometry.cpp	/^void VecPosition::operator \/=( const VecPosition &p )$/;"	f	class:VecPosition
operator /=	Geometry.cpp	/^void VecPosition::operator \/=( const double &d )$/;"	f	class:VecPosition
operator <	SoccerTypes.cpp	/^bool Time::operator <  ( Time t )$/;"	f	class:Time
operator <	SoccerTypes.cpp	/^bool Time::operator <  ( const int  &i )$/;"	f	class:Time
operator <<	Geometry.cpp	/^ostream& operator <<( ostream &os, VecPosition v )$/;"	f
operator <<	Geometry.cpp	/^ostream& operator <<(ostream & os, Line l)$/;"	f
operator <<	SoccerTypes.cpp	/^ostream& operator <<( ostream &os, Time t )$/;"	f
operator <=	SoccerTypes.cpp	/^bool Time::operator <= ( Time t )$/;"	f	class:Time
operator <=	SoccerTypes.cpp	/^bool Time::operator <= ( const int  &i )$/;"	f	class:Time
operator =	Geometry.cpp	/^void VecPosition::operator = ( const double &d )$/;"	f	class:VecPosition
operator =	SoccerTypes.cpp	/^void Time::operator = ( const int &i )$/;"	f	class:Time
operator ==	Geometry.cpp	/^bool VecPosition::operator ==( const VecPosition &p )$/;"	f	class:VecPosition
operator ==	Geometry.cpp	/^bool VecPosition::operator ==( const double &d )$/;"	f	class:VecPosition
operator ==	SoccerTypes.cpp	/^bool Time::operator == ( Time t )$/;"	f	class:Time
operator ==	SoccerTypes.cpp	/^bool Time::operator == ( const int &i )$/;"	f	class:Time
operator >	SoccerTypes.cpp	/^bool Time::operator >  ( Time t )$/;"	f	class:Time
operator >	SoccerTypes.cpp	/^bool Time::operator >  ( const int  &i )$/;"	f	class:Time
operator >=	SoccerTypes.cpp	/^bool Time::operator >= ( Time t )$/;"	f	class:Time
operator >=	SoccerTypes.cpp	/^bool Time::operator >= ( const int  &i )$/;"	f	class:Time
outplayOpponent	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::outplayOpponent( ObjectT o, VecPosition pos,$/;"	f	class:BasicPlayer
parseFirstDouble	Parse.cpp	/^double Parse::parseFirstDouble( char** strMsg )$/;"	f	class:Parse
parseFirstInt	Parse.cpp	/^int Parse::parseFirstInt( char** strMsg )$/;"	f	class:Parse
particlesPosAgent	WorldModel.h	/^  VecPosition   particlesPosAgent[iNrParticlesAgent]; \/*!< particles to store$/;"	m	class:WorldModel
particlesPosBall	WorldModel.h	/^  VecPosition   particlesPosBall[iNrParticlesBall];   \/*! particles to store$/;"	m	class:WorldModel
particlesVelBall	WorldModel.h	/^  VecPosition   particlesVelBall[iNrParticlesBall];   \/*! particles to store$/;"	m	class:WorldModel
pass	PlayerTeams.cpp	/^SoccerCommand Player::pass(VecPosition target)$/;"	f	class:Player
performPenalty	Player.cpp	/^void Player::performPenalty( )$/;"	f	class:Player
performedCommands	WorldModel.h	/^  bool          performedCommands[CMD_MAX_COMMANDS];\/*!< commands performed in$/;"	m	class:WorldModel
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/trilearn_base_sources$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/trilearn_base_sources$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/trilearn_base_sources$/;"	m
playMode	WorldModel.h	/^  PlayModeT     playMode;                \/*!< current play mode in the game  *\/$/;"	m	class:WorldModel
playerType	Formations.h	/^  PlayerT         playerType[ MAX_TEAMMATES ]; \/*!< player_types for roles   *\/$/;"	m	class:FormationTypeInfo
playerType	Formations.h	/^  PlayerT playerType; \/*!< This class gives information about this PlayerType*\/$/;"	m	class:PlayerTypeInfo
playerTypeInfo	Formations.h	/^  PlayerTypeInfo  playerTypeInfo[ MAX_PLAYER_TYPES ]; \/*!< info for roles    *\/$/;"	m	class:FormationTypeInfo
player_speed_max_min	ServerSettings.h	/^    double player_speed_max_min ;$/;"	m	class:ServerSettings
posGlobal	Objects.h	/^  VecPosition posGlobal;              \/*!< Global position in the field      *\/$/;"	m	class:Object
posGlobalLastSee	Objects.h	/^  VecPosition posGlobalLastSee;       \/*!< Global position of last see msg   *\/$/;"	m	class:Object
posHome	Formations.h	/^  VecPosition     posHome[ MAX_TEAMMATES ];    \/*!< home position for roles  *\/$/;"	m	class:FormationTypeInfo
posPositionDifference	Objects.h	/^  VecPosition  posPositionDifference; \/*!< Global pos difference with lastsee*\/$/;"	m	class:AgentObject
posRelative	Objects.h	/^  VecPosition posRelative;            \/*!< Relative position of the object   *\/$/;"	m	class:Object
predictAgentPos	WorldModelPredict.cpp	/^VecPosition WorldModel::predictAgentPos( int iCycles, int iDashPower )$/;"	f	class:WorldModel
predictAgentPosAfterCommand	WorldModelPredict.cpp	/^VecPosition WorldModel::predictAgentPosAfterCommand( SoccerCommand com )$/;"	f	class:WorldModel
predictAgentStateAfterCommand	WorldModelPredict.cpp	/^bool WorldModel::predictAgentStateAfterCommand( SoccerCommand com,$/;"	f	class:WorldModel
predictBallInfoAfterCommand	WorldModelPredict.cpp	/^void WorldModel::predictBallInfoAfterCommand( SoccerCommand soc,$/;"	f	class:WorldModel
predictCommandToInterceptBall	WorldModelPredict.cpp	/^SoccerCommand WorldModel::predictCommandToInterceptBall( ObjectT obj,$/;"	f	class:WorldModel
predictCommandToMoveToPos	WorldModelPredict.cpp	/^SoccerCommand WorldModel::predictCommandToMoveToPos( ObjectT obj, $/;"	f	class:WorldModel
predictCommandTurnTowards	WorldModelPredict.cpp	/^SoccerCommand WorldModel::predictCommandTurnTowards( ObjectT obj, VecPosition$/;"	f	class:WorldModel
predictFinalAgentPos	WorldModelPredict.cpp	/^VecPosition WorldModel::predictFinalAgentPos(VecPosition *pos,VecPosition *vel)$/;"	f	class:WorldModel
predictNrCyclesForDistance	WorldModelPredict.cpp	/^int WorldModel::predictNrCyclesForDistance ( ObjectT o, double dDist,$/;"	f	class:WorldModel
predictNrCyclesToObject	WorldModelPredict.cpp	/^int WorldModel::predictNrCyclesToObject( ObjectT objFrom, ObjectT objTo )$/;"	f	class:WorldModel
predictNrCyclesToPoint	WorldModelPredict.cpp	/^int WorldModel::predictNrCyclesToPoint( ObjectT o, VecPosition posTo )$/;"	f	class:WorldModel
predictObjectStateAfterCommand	WorldModelPredict.cpp	/^bool WorldModel::predictObjectStateAfterCommand( ObjectT obj,SoccerCommand com,$/;"	f	class:WorldModel
predictPosAfterNrCycles	WorldModelPredict.cpp	/^VecPosition WorldModel::predictPosAfterNrCycles( ObjectT o, double dCycles,$/;"	f	class:WorldModel
predictStaminaAfterDash	WorldModelPredict.cpp	/^void WorldModel::predictStaminaAfterDash( double dPower, Stamina *stamina )$/;"	f	class:WorldModel
predictStateAfterCommand	WorldModelPredict.cpp	/^bool WorldModel::predictStateAfterCommand( SoccerCommand com,$/;"	f	class:WorldModel
predictStateAfterDash	WorldModelPredict.cpp	/^void WorldModel::predictStateAfterDash( double dActualPower, VecPosition *pos,$/;"	f	class:WorldModel
predictStateAfterTurn	WorldModelPredict.cpp	/^void WorldModel::predictStateAfterTurn( AngDeg dSendAngle, VecPosition *pos,$/;"	f	class:WorldModel
prefix	Makefile	/^prefix = \/home\/reinke.wolfram-tit13\/data\/programFiles\/robocup\/tit11$/;"	m
printOptions	main.cpp	/^void printOptions( )$/;"	f
printOptions	mainCoach.cpp	/^void printOptions( )$/;"	f
printTimeDiffWithText	Logger.cpp	/^void Timing::printTimeDiffWithText( ostream &os, char *str, int iFactor )$/;"	f	class:Timing
processCatchedBall	WorldModelUpdate.cpp	/^void WorldModel::processCatchedBall( RefereeMessageT rm, Time time )$/;"	f	class:WorldModel
processLastSeeMessage	WorldModelUpdate.cpp	/^void  WorldModel::processLastSeeMessage( )$/;"	f	class:WorldModel
processLastSenseMessage	WorldModelUpdate.cpp	/^void WorldModel::processLastSenseMessage( )$/;"	f	class:WorldModel
processNewAgentInfo	WorldModelUpdate.cpp	/^bool WorldModel::processNewAgentInfo( ViewQualityT vq, ViewAngleT va,$/;"	f	class:WorldModel
processNewHeteroPlayer	WorldModelUpdate.cpp	/^bool WorldModel::processNewHeteroPlayer( int iIndex,    double dPlayerSpeedMax,$/;"	f	class:WorldModel
processNewObjectInfo	WorldModelUpdate.cpp	/^void WorldModel::processNewObjectInfo( ObjectT o, Time time,$/;"	f	class:WorldModel
processPerfectHearInfo	WorldModelUpdate.cpp	/^bool WorldModel::processPerfectHearInfo( ObjectT o, VecPosition posGlobal,$/;"	f	class:WorldModel
processPerfectHearInfoBall	WorldModelUpdate.cpp	/^bool WorldModel::processPerfectHearInfoBall( VecPosition posGlobal,$/;"	f	class:WorldModel
processPlayerMessage	WorldModelUpdate.cpp	/^bool WorldModel::processPlayerMessage( )$/;"	f	class:WorldModel
processQueuedCommands	WorldModelUpdate.cpp	/^void WorldModel::processQueuedCommands( SoccerCommand commands[],$/;"	f	class:WorldModel
processRecvThink	WorldModelUpdate.cpp	/^bool WorldModel::processRecvThink( bool b )$/;"	f	class:WorldModel
processSeeGlobalInfo	WorldModelUpdate.cpp	/^void WorldModel::processSeeGlobalInfo( ObjectT o, Time time,$/;"	f	class:WorldModel
processUnsureHearInfo	WorldModelUpdate.cpp	/^bool WorldModel::processUnsureHearInfo( ObjectT o, VecPosition pos,$/;"	f	class:WorldModel
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
pt	WorldModel.h	/^  HeteroPlayerSettings pt[MAX_HETERO_PLAYERS]; \/*!< info hetero player types *\/$/;"	m	class:WorldModel
putCommandInQueue	ActHandler.cpp	/^bool ActHandler::putCommandInQueue( SoccerCommand command )$/;"	f	class:ActHandler
queuedCommands	WorldModel.h	/^  SoccerCommand queuedCommands[CMD_MAX_COMMANDS];   \/*!<all performed commands,$/;"	m	class:WorldModel
readFormations	Formations.cpp	/^bool Formations::readFormations( const char *strFile )$/;"	f	class:Formations
readServerParam	SenseHandler.cpp	/^bool SenseHandler::readServerParam( char *strParam, char *strMsg )$/;"	f	class:SenseHandler
readValues	GenericValues.cpp	/^bool GenericValues::readValues( const char *strFile, const char *strSeparator )$/;"	f	class:GenericValues
readValues	ServerSettings.cpp	/^bool ServerSettings::readValues( const char *strFileName, $/;"	f	class:ServerSettings
receiveMessage	Connection.cpp	/^int Connection::receiveMessage( char *msg, int maxsize )$/;"	f	class:Connection
relativeToGlobal	Geometry.cpp	/^VecPosition VecPosition::relativeToGlobal( VecPosition origin, AngDeg ang )$/;"	f	class:VecPosition
removeGhosts	WorldModelUpdate.cpp	/^void WorldModel::removeGhosts( )$/;"	f	class:WorldModel
resampleParticlesAgent	WorldModelUpdate.cpp	/^void WorldModel::resampleParticlesAgent( int iLeft )$/;"	f	class:WorldModel
resampleParticlesBall	WorldModelUpdate.cpp	/^void WorldModel::resampleParticlesBall( VecPosition posArray[],$/;"	f	class:WorldModel
resetTimeObjects	WorldModelUpdate.cpp	/^bool WorldModel::resetTimeObjects( )$/;"	f	class:WorldModel
restartTime	Logger.cpp	/^void Timing::restartTime( )$/;"	f	class:Timing
restartTimer	Logger.cpp	/^void Logger::restartTimer()$/;"	f	class:Logger
rint	WorldModel.h	/^inline double rint(double x)$/;"	f
rotate	Geometry.cpp	/^VecPosition VecPosition::rotate( AngDeg angle )$/;"	f	class:VecPosition
saveValues	GenericValues.cpp	/^bool GenericValues::saveValues( const char *strFile, const char *strSeparator,$/;"	f	class:GenericValues
sayBallStatus	Player.cpp	/^void Player::sayBallStatus( char * strMsg  )$/;"	f	class:Player
sayOppAttackerStatus	Player.cpp	/^void Player::sayOppAttackerStatus( char* strMsg )$/;"	f	class:Player
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
searchBall	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::searchBall()$/;"	f	class:BasicPlayer
sendCommand	ActHandler.cpp	/^bool ActHandler::sendCommand( SoccerCommand soc )$/;"	f	class:ActHandler
sendCommandDirect	ActHandler.cpp	/^bool ActHandler::sendCommandDirect( SoccerCommand soc )$/;"	f	class:ActHandler
sendCommands	ActHandler.cpp	/^bool ActHandler::sendCommands( )$/;"	f	class:ActHandler
sendMessage	ActHandler.cpp	/^bool ActHandler::sendMessage( char * str )$/;"	f	class:ActHandler
sendMessage	Connection.cpp	/^bool Connection::sendMessage( const char *msg )$/;"	f	class:Connection
sendMessageDirect	ActHandler.cpp	/^bool ActHandler::sendMessageDirect( char * str )$/;"	f	class:ActHandler
sense_callback	SenseHandler.cpp	/^DWORD WINAPI sense_callback( LPVOID v )$/;"	f
serv_addr	Connection.h	/^    struct sockaddr_in  serv_addr ;   \/*!< Server information of the socket. *\/$/;"	m	struct:_socket	typeref:struct:_socket::sockaddr_in
setAgentObjectType	WorldModel.cpp	/^bool WorldModel::setAgentObjectType( ObjectT o )$/;"	f	class:WorldModel
setAgentViewAngle	WorldModel.cpp	/^bool WorldModel::setAgentViewAngle( ViewAngleT va ) $/;"	f	class:WorldModel
setAgentViewQuality	WorldModel.cpp	/^bool WorldModel::setAgentViewQuality( ViewQualityT vq ) $/;"	f	class:WorldModel
setArmExpires	Objects.cpp	/^bool AgentObject::setArmExpires( int i )$/;"	f	class:AgentObject
setArmMovable	Objects.cpp	/^bool AgentObject::setArmMovable( bool b ) $/;"	f	class:AgentObject
setAttrX	Formations.cpp	/^bool PlayerTypeInfo::setAttrX( double dAttractionX )$/;"	f	class:PlayerTypeInfo
setAttrY	Formations.cpp	/^bool PlayerTypeInfo::setAttrY( double dAttractionY )$/;"	f	class:PlayerTypeInfo
setAudioCutDist	ServerSettings.cpp	/^bool ServerSettings::setAudioCutDist( double d )$/;"	f	class:ServerSettings
setBackDashRate	ServerSettings.cpp	/^bool ServerSettings::setBackDashRate( double d )$/;"	f	class:ServerSettings
setBallAccelMax	ServerSettings.cpp	/^bool ServerSettings::setBallAccelMax( double d )$/;"	f	class:ServerSettings
setBallConfThr	PlayerSettings.cpp	/^bool PlayerSettings::setBallConfThr( double d )$/;"	f	class:PlayerSettings
setBallDecay	ServerSettings.cpp	/^bool ServerSettings::setBallDecay( double d )$/;"	f	class:ServerSettings
setBallRand	ServerSettings.cpp	/^bool ServerSettings::setBallRand( double d )$/;"	f	class:ServerSettings
setBallSize	ServerSettings.cpp	/^bool ServerSettings::setBallSize( double d )$/;"	f	class:ServerSettings
setBallSpeedMax	ServerSettings.cpp	/^bool ServerSettings::setBallSpeedMax( double d )$/;"	f	class:ServerSettings
setBallWeight	ServerSettings.cpp	/^bool ServerSettings::setBallWeight( double d )$/;"	f	class:ServerSettings
setBehindBall	Formations.cpp	/^bool PlayerTypeInfo::setBehindBall( bool b )$/;"	f	class:PlayerTypeInfo
setBodyAngleRelToNeck	Objects.cpp	/^bool AgentObject::setBodyAngleRelToNeck( AngDeg ang )$/;"	f	class:AgentObject
setCatchBanCycle	ServerSettings.cpp	/^bool ServerSettings::setCatchBanCycle( int i )$/;"	f	class:ServerSettings
setCatchProbability	ServerSettings.cpp	/^bool ServerSettings::setCatchProbability( double d )$/;"	f	class:ServerSettings
setCatchableAreaL	ServerSettings.cpp	/^bool ServerSettings::setCatchableAreaL( double d )$/;"	f	class:ServerSettings
setCatchableAreaW	ServerSettings.cpp	/^bool ServerSettings::setCatchableAreaW( double d )$/;"	f	class:ServerSettings
setCenter	Geometry.cpp	/^bool Circle::setCenter( VecPosition pos )$/;"	f	class:Circle
setChangeViewCommand	WorldModel.cpp	/^bool WorldModel::setChangeViewCommand( SoccerCommand soc )$/;"	f	class:WorldModel
setCheckBallStatus	WorldModel.cpp	/^bool WorldModel::setCheckBallStatus( BallStatusT bs )$/;"	f	class:WorldModel
setCircle	Geometry.cpp	/^bool Circle::setCircle( VecPosition pos, double dR )$/;"	f	class:Circle
setCkickMargin	ServerSettings.cpp	/^bool ServerSettings::setCkickMargin( double d )$/;"	f	class:ServerSettings
setClangAdviceWin	ServerSettings.cpp	/^bool ServerSettings::setClangAdviceWin( int i )$/;"	f	class:ServerSettings
setClangDefineWin	ServerSettings.cpp	/^bool ServerSettings::setClangDefineWin( int i )$/;"	f	class:ServerSettings
setClangInfoWin	ServerSettings.cpp	/^bool ServerSettings::setClangInfoWin( int i )$/;"	f	class:ServerSettings
setClangMessDelay	ServerSettings.cpp	/^bool ServerSettings::setClangMessDelay( int i )$/;"	f	class:ServerSettings
setClangMessPerCycle	ServerSettings.cpp	/^bool ServerSettings::setClangMessPerCycle( int i )$/;"	f	class:ServerSettings
setClangMetaWin	ServerSettings.cpp	/^bool ServerSettings::setClangMetaWin( int i )$/;"	f	class:ServerSettings
setClangWinSize	ServerSettings.cpp	/^bool ServerSettings::setClangWinSize( int i )$/;"	f	class:ServerSettings
setClearBallDist	PlayerSettings.cpp	/^bool PlayerSettings::setClearBallDist( double d )$/;"	f	class:PlayerSettings
setClearBallOppMaxDist	PlayerSettings.cpp	/^bool PlayerSettings::setClearBallOppMaxDist( double d )$/;"	f	class:PlayerSettings
setClearBallToSideAngle	PlayerSettings.cpp	/^bool PlayerSettings::setClearBallToSideAngle( double d )$/;"	f	class:PlayerSettings
setCoachPort	ServerSettings.cpp	/^bool ServerSettings::setCoachPort( int i )$/;"	f	class:ServerSettings
setCommand	SoccerTypes.cpp	/^bool Feature::setCommand( SoccerCommand soc )$/;"	f	class:Feature
setCommunicationString	WorldModel.cpp	/^bool WorldModel::setCommunicationString( char *str )$/;"	f	class:WorldModel
setConeWidth	PlayerSettings.cpp	/^bool PlayerSettings::setConeWidth( double d )$/;"	f	class:PlayerSettings
setCyclesCatchWait	PlayerSettings.cpp	/^bool PlayerSettings::setCyclesCatchWait( int i )$/;"	f	class:PlayerSettings
setDashAngleStep	ServerSettings.cpp	/^bool ServerSettings::setDashAngleStep( double d )$/;"	f	class:ServerSettings
setDashPowerRate	ServerSettings.cpp	/^bool ServerSettings::setDashPowerRate( double d )$/;"	f	class:ServerSettings
setDashPowerRateDeltaMax	ServerSettings.cpp	/^bool ServerSettings::setDashPowerRateDeltaMax( double d )$/;"	f	class:ServerSettings
setDashPowerRateDeltaMin	ServerSettings.cpp	/^bool ServerSettings::setDashPowerRateDeltaMin( double d )$/;"	f	class:ServerSettings
setDribbleAngThr	PlayerSettings.cpp	/^bool PlayerSettings::setDribbleAngThr( double d )$/;"	f	class:PlayerSettings
setDropBallTime	ServerSettings.cpp	/^bool ServerSettings::setDropBallTime( int i )$/;"	f	class:ServerSettings
setEffort	Objects.cpp	/^bool Stamina::setEffort( double d )$/;"	f	class:Stamina
setEffortDec	ServerSettings.cpp	/^bool ServerSettings::setEffortDec( double d )$/;"	f	class:ServerSettings
setEffortDecThr	ServerSettings.cpp	/^bool ServerSettings::setEffortDecThr( double d )$/;"	f	class:ServerSettings
setEffortInc	ServerSettings.cpp	/^bool ServerSettings::setEffortInc( double d )$/;"	f	class:ServerSettings
setEffortIncThr	ServerSettings.cpp	/^bool ServerSettings::setEffortIncThr( double d )$/;"	f	class:ServerSettings
setEffortMax	ServerSettings.cpp	/^bool ServerSettings::setEffortMax( double d )$/;"	f	class:ServerSettings
setEffortMaxDeltaFactor	ServerSettings.cpp	/^bool ServerSettings::setEffortMaxDeltaFactor( double d )$/;"	f	class:ServerSettings
setEffortMin	ServerSettings.cpp	/^bool ServerSettings::setEffortMin( double d )$/;"	f	class:ServerSettings
setEffortMinDeltaFactor	ServerSettings.cpp	/^bool ServerSettings::setEffortMinDeltaFactor( double d )$/;"	f	class:ServerSettings
setExtraStamina	ServerSettings.cpp	/^bool ServerSettings::setExtraStamina( double d )$/;"	f	class:ServerSettings
setExtraStaminaDeltaMax	ServerSettings.cpp	/^bool ServerSettings::setExtraStaminaDeltaMax( double d )$/;"	f	class:ServerSettings
setExtraStaminaDeltaMin	ServerSettings.cpp	/^bool ServerSettings::setExtraStaminaDeltaMin( double d )$/;"	f	class:ServerSettings
setFastPassEndSpeed	PlayerSettings.cpp	/^bool PlayerSettings::setFastPassEndSpeed( double d )$/;"	f	class:PlayerSettings
setFeature	SoccerTypes.cpp	/^bool Feature::setFeature( Time timeSee,  Time timeSense, Time timeHear,$/;"	f	class:Feature
setFeature	WorldModel.cpp	/^bool WorldModel::setFeature( FeatureT type, Feature feature )$/;"	f	class:WorldModel
setForbidKickOffOffside	ServerSettings.cpp	/^bool ServerSettings::setForbidKickOffOffside( bool b )$/;"	f	class:ServerSettings
setFormation	Formations.cpp	/^bool Formations::setFormation( FormationT formation )$/;"	f	class:Formations
setFormationType	Formations.cpp	/^bool FormationTypeInfo::setFormationType( FormationT type )$/;"	f	class:FormationTypeInfo
setFractionWaitNoSee	PlayerSettings.cpp	/^bool PlayerSettings::setFractionWaitNoSee( double d )$/;"	f	class:PlayerSettings
setFractionWaitSeeBegin	PlayerSettings.cpp	/^bool PlayerSettings::setFractionWaitSeeBegin( double d )$/;"	f	class:PlayerSettings
setFractionWaitSeeEnd	PlayerSettings.cpp	/^bool PlayerSettings::setFractionWaitSeeEnd( double d )$/;"	f	class:PlayerSettings
setFullStateLeft	ServerSettings.cpp	/^bool ServerSettings::setFullStateLeft( bool b ) $/;"	f	class:ServerSettings
setFullStateRight	ServerSettings.cpp	/^bool ServerSettings::setFullStateRight( bool b ) $/;"	f	class:ServerSettings
setGlobalArm	Objects.cpp	/^bool PlayerObject::setGlobalArm( AngDeg ang, Time time )$/;"	f	class:PlayerObject
setGlobalArmPosition	Objects.cpp	/^bool AgentObject::setGlobalArmPosition ( VecPosition  v )$/;"	f	class:AgentObject
setGlobalBodyAngle	Objects.cpp	/^bool PlayerObject::setGlobalBodyAngle( AngDeg ang, Time time)$/;"	f	class:PlayerObject
setGlobalBodyAngleLastSee	Objects.cpp	/^bool PlayerObject::setGlobalBodyAngleLastSee( AngDeg ang )$/;"	f	class:PlayerObject
setGlobalNeckAngle	Objects.cpp	/^bool AgentObject::setGlobalNeckAngle( AngDeg ang )$/;"	f	class:AgentObject
setGlobalNeckAngle	Objects.cpp	/^bool PlayerObject::setGlobalNeckAngle( AngDeg ang, Time time )$/;"	f	class:PlayerObject
setGlobalPosition	Objects.cpp	/^bool Object::setGlobalPosition( VecPosition p, Time time )$/;"	f	class:Object
setGlobalPositionLastSee	Objects.cpp	/^bool Object::setGlobalPositionLastSee( VecPosition p, Time time )$/;"	f	class:Object
setGlobalVelocity	Objects.cpp	/^bool DynamicObject::setGlobalVelocity( VecPosition v, Time time)$/;"	f	class:DynamicObject
setGlobalVelocityLastSee	Objects.cpp	/^bool DynamicObject::setGlobalVelocityLastSee ( VecPosition vec )$/;"	f	class:DynamicObject
setGoalWidth	ServerSettings.cpp	/^bool ServerSettings::setGoalWidth( double d )$/;"	f	class:ServerSettings
setGoalieMaxMoves	ServerSettings.cpp	/^bool ServerSettings::setGoalieMaxMoves( int i )$/;"	f	class:ServerSettings
setHalfTime	ServerSettings.cpp	/^bool ServerSettings::setHalfTime( int i )$/;"	f	class:ServerSettings
setHeader	Logger.cpp	/^bool Logger::setHeader( char *str )$/;"	f	class:Logger
setHeader	Logger.cpp	/^bool Logger::setHeader( int i )$/;"	f	class:Logger
setHeader	Logger.cpp	/^bool Logger::setHeader( int i1, int i2 )$/;"	f	class:Logger
setHearDecay	ServerSettings.cpp	/^bool ServerSettings::setHearDecay( int i )$/;"	f	class:ServerSettings
setHearInc	ServerSettings.cpp	/^bool ServerSettings::setHearInc( int i )$/;"	f	class:ServerSettings
setHearMax	ServerSettings.cpp	/^bool ServerSettings::setHearMax( int i )$/;"	f	class:ServerSettings
setHeteroPlayerType	Objects.cpp	/^bool PlayerObject::setHeteroPlayerType( int index )$/;"	f	class:PlayerObject
setHeteroPlayerType	WorldModel.cpp	/^bool WorldModel::setHeteroPlayerType( ObjectT  o, int iPlayerType )$/;"	f	class:WorldModel
setInertiaMoment	ServerSettings.cpp	/^bool ServerSettings::setInertiaMoment( double d )$/;"	f	class:ServerSettings
setInertiaMomentDeltaFactor	ServerSettings.cpp	/^bool ServerSettings::setInertiaMomentDeltaFactor( double d )$/;"	f	class:ServerSettings
setInfo	SoccerTypes.cpp	/^bool Feature::setInfo( double d )$/;"	f	class:Feature
setInitialFormation	PlayerSettings.cpp	/^bool PlayerSettings::setInitialFormation( int i )$/;"	f	class:PlayerSettings
setIsGoalie	Objects.cpp	/^bool PlayerObject::setIsGoalie( bool b )$/;"	f	class:PlayerObject
setIsKnownPlayer	Objects.cpp	/^bool PlayerObject::setIsKnownPlayer( bool b )$/;"	f	class:PlayerObject
setIsKnownPlayer	WorldModel.cpp	/^bool WorldModel::setIsKnownPlayer( ObjectT o, bool isKnownPlayer )$/;"	f	class:WorldModel
setKickPowerRate	ServerSettings.cpp	/^bool ServerSettings::setKickPowerRate( double d )$/;"	f	class:ServerSettings
setKickRand	ServerSettings.cpp	/^bool ServerSettings::setKickRand( double d )$/;"	f	class:ServerSettings
setKickRandDeltaFactor	ServerSettings.cpp	/^bool ServerSettings::setKickRandDeltaFactor( double d )$/;"	f	class:ServerSettings
setKickableMargin	ServerSettings.cpp	/^bool ServerSettings::setKickableMargin( double d )$/;"	f	class:ServerSettings
setKickableMarginDeltaMax	ServerSettings.cpp	/^bool ServerSettings::setKickableMarginDeltaMax( double d )$/;"	f	class:ServerSettings
setKickableMarginDeltaMin	ServerSettings.cpp	/^bool ServerSettings::setKickableMarginDeltaMin( double d )$/;"	f	class:ServerSettings
setLogFile	ServerSettings.cpp	/^bool ServerSettings::setLogFile( char *str )$/;"	f	class:ServerSettings
setLogTimes	ServerSettings.cpp	/^bool ServerSettings::setLogTimes( bool b )$/;"	f	class:ServerSettings
setMagnitude	Geometry.cpp	/^VecPosition VecPosition::setMagnitude( double d )$/;"	f	class:VecPosition
setMarkDistance	PlayerSettings.cpp	/^bool PlayerSettings::setMarkDistance( double d )$/;"	f	class:PlayerSettings
setMaxDashAngle	ServerSettings.cpp	/^bool ServerSettings::setMaxDashAngle( double d )$/;"	f	class:ServerSettings
setMaxDashPower	ServerSettings.cpp	/^bool ServerSettings::setMaxDashPower( double d )$/;"	f	class:ServerSettings
setMaxMoment	ServerSettings.cpp	/^bool ServerSettings::setMaxMoment( int i )$/;"	f	class:ServerSettings
setMaxNeckAng	ServerSettings.cpp	/^bool ServerSettings::setMaxNeckAng( int i )$/;"	f	class:ServerSettings
setMaxNeckMoment	ServerSettings.cpp	/^bool ServerSettings::setMaxNeckMoment( int i )$/;"	f	class:ServerSettings
setMaxPower	ServerSettings.cpp	/^bool ServerSettings::setMaxPower( int i )$/;"	f	class:ServerSettings
setMaxX	Formations.cpp	/^bool PlayerTypeInfo::setMaxX( double dMaximalX )$/;"	f	class:PlayerTypeInfo
setMaxYPercentage	PlayerSettings.cpp	/^bool PlayerSettings::setMaxYPercentage( double d )$/;"	f	class:PlayerSettings
setMaximalKickDist	ServerSettings.cpp	/^bool ServerSettings::setMaximalKickDist( double d )$/;"	f	class:ServerSettings
setMinDashAngle	ServerSettings.cpp	/^bool ServerSettings::setMinDashAngle( double d )$/;"	f	class:ServerSettings
setMinDashPower	ServerSettings.cpp	/^bool ServerSettings::setMinDashPower( double d )$/;"	f	class:ServerSettings
setMinMoment	ServerSettings.cpp	/^bool ServerSettings::setMinMoment( int i )$/;"	f	class:ServerSettings
setMinNeckAng	ServerSettings.cpp	/^bool ServerSettings::setMinNeckAng( int i )$/;"	f	class:ServerSettings
setMinNeckMoment	ServerSettings.cpp	/^bool ServerSettings::setMinNeckMoment( int i )$/;"	f	class:ServerSettings
setMinPower	ServerSettings.cpp	/^bool ServerSettings::setMinPower( int i )$/;"	f	class:ServerSettings
setMinX	Formations.cpp	/^bool PlayerTypeInfo::setMinX( double dMinimalX )$/;"	f	class:PlayerTypeInfo
setNewDashPowerRateDeltaMax	ServerSettings.cpp	/^bool ServerSettings::setNewDashPowerRateDeltaMax( double d )$/;"	f	class:ServerSettings
setNewDashPowerRateDeltaMin	ServerSettings.cpp	/^bool ServerSettings::setNewDashPowerRateDeltaMin( double d )$/;"	f	class:ServerSettings
setNewStaminaIncMaxDeltaFactor	ServerSettings.cpp	/^bool ServerSettings::setNewStaminaIncMaxDeltaFactor( double d )$/;"	f	class:ServerSettings
setNrOfCommands	WorldModel.cpp	/^bool WorldModel::setNrOfCommands( CommandT c, int i )$/;"	f	class:WorldModel
setObject	SoccerTypes.cpp	/^bool Feature::setObject ( ObjectT object )$/;"	f	class:Feature
setObjectFocus	WorldModel.cpp	/^bool WorldModel::setObjectFocus( ObjectT obj )$/;"	f	class:WorldModel
setOffsideActiveAreaSize	ServerSettings.cpp	/^bool ServerSettings::setOffsideActiveAreaSize( double d )$/;"	f	class:ServerSettings
setOffsideKickMargin	ServerSettings.cpp	/^bool ServerSettings::setOffsideKickMargin( double d )$/;"	f	class:ServerSettings
setOlCoachPort	ServerSettings.cpp	/^bool ServerSettings::setOlCoachPort( int i )$/;"	f	class:ServerSettings
setOutputStream	Logger.cpp	/^bool Logger::setOutputStream( ostream& o )$/;"	f	class:Logger
setPassEndSpeed	PlayerSettings.cpp	/^bool PlayerSettings::setPassEndSpeed( double d )$/;"	f	class:PlayerSettings
setPassExtraX	PlayerSettings.cpp	/^bool PlayerSettings::setPassExtraX( double d )$/;"	f	class:PlayerSettings
setPenAllowMultKicks	ServerSettings.cpp	/^bool ServerSettings::setPenAllowMultKicks( bool b )$/;"	f	class:ServerSettings
setPenDistX	ServerSettings.cpp	/^bool ServerSettings::setPenDistX( double d )$/;"	f	class:ServerSettings
setPenMaxGoalieDistX	ServerSettings.cpp	/^bool ServerSettings::setPenMaxGoalieDistX( double d )$/;"	f	class:ServerSettings
setPlayMode	WorldModel.cpp	/^bool WorldModel::setPlayMode( PlayModeT pm )$/;"	f	class:WorldModel
setPlayerAccelMax	ServerSettings.cpp	/^bool ServerSettings::setPlayerAccelMax( double d )$/;"	f	class:ServerSettings
setPlayerConfThr	PlayerSettings.cpp	/^bool PlayerSettings::setPlayerConfThr( double d )$/;"	f	class:PlayerSettings
setPlayerDecay	ServerSettings.cpp	/^bool ServerSettings::setPlayerDecay( double d )$/;"	f	class:ServerSettings
setPlayerDecayDeltaMax	ServerSettings.cpp	/^bool ServerSettings::setPlayerDecayDeltaMax( double d )$/;"	f	class:ServerSettings
setPlayerDecayDeltaMin	ServerSettings.cpp	/^bool ServerSettings::setPlayerDecayDeltaMin( double d )$/;"	f	class:ServerSettings
setPlayerDistTolerance	PlayerSettings.cpp	/^bool PlayerSettings::setPlayerDistTolerance( double d )$/;"	f	class:PlayerSettings
setPlayerHighConfThr	PlayerSettings.cpp	/^bool PlayerSettings::setPlayerHighConfThr( double d )$/;"	f	class:PlayerSettings
setPlayerInFormation	Formations.cpp	/^bool Formations::setPlayerInFormation( int iNumber )$/;"	f	class:Formations
setPlayerNumber	WorldModel.cpp	/^bool WorldModel::setPlayerNumber( int i )$/;"	f	class:WorldModel
setPlayerRand	ServerSettings.cpp	/^bool ServerSettings::setPlayerRand( double d )$/;"	f	class:ServerSettings
setPlayerSize	ServerSettings.cpp	/^bool ServerSettings::setPlayerSize( double d )$/;"	f	class:ServerSettings
setPlayerSizeDeltaFactor	ServerSettings.cpp	/^bool ServerSettings::setPlayerSizeDeltaFactor( double d )$/;"	f	class:ServerSettings
setPlayerSpeedMax	ServerSettings.cpp	/^bool ServerSettings::setPlayerSpeedMax( double d )$/;"	f	class:ServerSettings
setPlayerSpeedMaxDeltaMax	ServerSettings.cpp	/^bool ServerSettings::setPlayerSpeedMaxDeltaMax( double d )$/;"	f	class:ServerSettings
setPlayerSpeedMaxDeltaMin	ServerSettings.cpp	/^bool ServerSettings::setPlayerSpeedMaxDeltaMin( double d )$/;"	f	class:ServerSettings
setPlayerType	Formations.cpp	/^bool FormationTypeInfo::setPlayerType( PlayerT type, int atIndex )$/;"	f	class:FormationTypeInfo
setPlayerType	Formations.cpp	/^bool PlayerTypeInfo::setPlayerType( PlayerT type )$/;"	f	class:PlayerTypeInfo
setPlayerTypeInfo	Formations.cpp	/^bool FormationTypeInfo::setPlayerTypeInfo( PlayerTypeInfo info, int atIndex )$/;"	f	class:FormationTypeInfo
setPlayerTypes	ServerSettings.cpp	/^bool ServerSettings::setPlayerTypes( int i )$/;"	f	class:ServerSettings
setPlayerWeight	ServerSettings.cpp	/^bool ServerSettings::setPlayerWeight( double d )$/;"	f	class:ServerSettings
setPlayerWhenToIntercept	PlayerSettings.cpp	/^bool PlayerSettings::setPlayerWhenToIntercept( int i )$/;"	f	class:PlayerSettings
setPlayerWhenToKick	PlayerSettings.cpp	/^bool PlayerSettings::setPlayerWhenToKick( double d )$/;"	f	class:PlayerSettings
setPlayerWhenToTurnAngle	PlayerSettings.cpp	/^bool PlayerSettings::setPlayerWhenToTurnAngle( double d )$/;"	f	class:PlayerSettings
setPort	ServerSettings.cpp	/^bool ServerSettings::setPort( int i )$/;"	f	class:ServerSettings
setPosHome	Formations.cpp	/^bool FormationTypeInfo::setPosHome( VecPosition pos, int atIndex )$/;"	f	class:FormationTypeInfo
setPosLeftTop	Geometry.cpp	/^bool Rect::setPosLeftTop( VecPosition pos )$/;"	f	class:Rect
setPosRightBottom	Geometry.cpp	/^bool Rect::setPosRightBottom( VecPosition pos )$/;"	f	class:Rect
setPositionDifference	Objects.cpp	/^bool  AgentObject::setPositionDifference( VecPosition p )$/;"	f	class:AgentObject
setPossibleRange	Objects.cpp	/^bool PlayerObject::setPossibleRange( ObjectT objMin, ObjectT objMax )$/;"	f	class:PlayerObject
setQuantizeStep	ServerSettings.cpp	/^bool ServerSettings::setQuantizeStep( double d )$/;"	f	class:ServerSettings
setQuantizeStepL	ServerSettings.cpp	/^bool ServerSettings::setQuantizeStepL( double d )$/;"	f	class:ServerSettings
setRadius	Geometry.cpp	/^bool Circle::setRadius( double dR )$/;"	f	class:Circle
setRecordLog	ServerSettings.cpp	/^bool ServerSettings::setRecordLog( bool b )$/;"	f	class:ServerSettings
setRecordVersion	ServerSettings.cpp	/^bool ServerSettings::setRecordVersion( int i )$/;"	f	class:ServerSettings
setRecoverDec	ServerSettings.cpp	/^bool ServerSettings::setRecoverDec( double d )$/;"	f	class:ServerSettings
setRecoverDecThr	ServerSettings.cpp	/^bool ServerSettings::setRecoverDecThr( double d )$/;"	f	class:ServerSettings
setRecoverMin	ServerSettings.cpp	/^bool ServerSettings::setRecoverMin( double d )$/;"	f	class:ServerSettings
setRecovery	Objects.cpp	/^bool Stamina::setRecovery( double d )$/;"	f	class:Stamina
setRectanglePoints	Geometry.cpp	/^void Rect::setRectanglePoints( VecPosition pos1, VecPosition pos2 )$/;"	f	class:Rect
setRecvStep	ServerSettings.cpp	/^bool ServerSettings::setRecvStep( int i )$/;"	f	class:ServerSettings
setRelativeAngleChange	Objects.cpp	/^bool DynamicObject::setRelativeAngleChange( double d, Time time )$/;"	f	class:DynamicObject
setRelativeBodyAngle	Objects.cpp	/^bool PlayerObject::setRelativeBodyAngle( AngDeg ang, Time time )$/;"	f	class:PlayerObject
setRelativeDistanceChange	Objects.cpp	/^bool DynamicObject::setRelativeDistanceChange( double d, Time time )$/;"	f	class:DynamicObject
setRelativeNeckAngle	Objects.cpp	/^bool PlayerObject::setRelativeNeckAngle( AngDeg ang, Time time )$/;"	f	class:PlayerObject
setRelativePosition	Objects.cpp	/^bool Object::setRelativePosition( VecPosition v, Time time )$/;"	f	class:Object
setRelativePosition	Objects.cpp	/^bool Object::setRelativePosition( double dDist, AngDeg ang, Time time )$/;"	f	class:Object
setSayCoachCntMax	ServerSettings.cpp	/^bool ServerSettings::setSayCoachCntMax( int i )$/;"	f	class:ServerSettings
setSayCoachMsgSize	ServerSettings.cpp	/^bool ServerSettings::setSayCoachMsgSize( int i )$/;"	f	class:ServerSettings
setSayMsgSize	ServerSettings.cpp	/^bool ServerSettings::setSayMsgSize( int i )$/;"	f	class:ServerSettings
setSendLog	ServerSettings.cpp	/^bool ServerSettings::setSendLog( bool b )$/;"	f	class:ServerSettings
setSendStep	ServerSettings.cpp	/^bool ServerSettings::setSendStep( int i )$/;"	f	class:ServerSettings
setSendViStep	ServerSettings.cpp	/^bool ServerSettings::setSendViStep( int i )$/;"	f	class:ServerSettings
setSenseBodyStep	ServerSettings.cpp	/^bool ServerSettings::setSenseBodyStep( int i )$/;"	f	class:ServerSettings
setServerTimeOut	PlayerSettings.cpp	/^bool PlayerSettings::setServerTimeOut( int i )$/;"	f	class:PlayerSettings
setShootRiskProbability	PlayerSettings.cpp	/^bool PlayerSettings::setShootRiskProbability( double d )$/;"	f	class:PlayerSettings
setSide	WorldModel.cpp	/^bool WorldModel::setSide( SideT s )$/;"	f	class:WorldModel
setSideDashRate	ServerSettings.cpp	/^bool ServerSettings::setSideDashRate( double d )$/;"	f	class:ServerSettings
setSidePenalty	WorldModel.cpp	/^bool WorldModel::setSidePenalty( SideT side )$/;"	f	class:WorldModel
setSimulatorStep	ServerSettings.cpp	/^bool ServerSettings::setSimulatorStep( int i )$/;"	f	class:ServerSettings
setSlowDownFactor	ServerSettings.cpp	/^bool ServerSettings::setSlowDownFactor( int i )$/;"	f	class:ServerSettings
setSpeedRelToNeck	Objects.cpp	/^bool AgentObject::setSpeedRelToNeck( VecPosition v )$/;"	f	class:AgentObject
setStamina	Objects.cpp	/^bool AgentObject::setStamina( Stamina sta )$/;"	f	class:AgentObject
setStamina	Objects.cpp	/^bool Stamina::setStamina( double d )$/;"	f	class:Stamina
setStaminaCapacity	ServerSettings.cpp	/^bool ServerSettings::setStaminaCapacity( double d)$/;"	f	class:ServerSettings
setStaminaIncMax	ServerSettings.cpp	/^bool ServerSettings::setStaminaIncMax( double d )$/;"	f	class:ServerSettings
setStaminaIncMaxDeltaFactor	ServerSettings.cpp	/^bool ServerSettings::setStaminaIncMaxDeltaFactor( double d )$/;"	f	class:ServerSettings
setStaminaMax	ServerSettings.cpp	/^bool ServerSettings::setStaminaMax( double d )$/;"	f	class:ServerSettings
setStratAreaRadius	PlayerSettings.cpp	/^bool PlayerSettings::setStratAreaRadius( double d )$/;"	f	class:PlayerSettings
setSubsMax	ServerSettings.cpp	/^bool ServerSettings::setSubsMax( int i )$/;"	f	class:ServerSettings
setSubstitutedOpp	WorldModel.cpp	/^bool WorldModel::setSubstitutedOpp( ObjectT obj )$/;"	f	class:WorldModel
setSynchMode	ServerSettings.cpp	/^bool ServerSettings::setSynchMode( bool b )$/;"	f	class:ServerSettings
setTackleBackDist	ServerSettings.cpp	/^bool ServerSettings::setTackleBackDist( double d )$/;"	f	class:ServerSettings
setTackleCycles	ServerSettings.cpp	/^bool ServerSettings::setTackleCycles( int i )$/;"	f	class:ServerSettings
setTackleDist	ServerSettings.cpp	/^bool ServerSettings::setTackleDist( double d )$/;"	f	class:ServerSettings
setTackleExpires	Objects.cpp	/^bool AgentObject::setTackleExpires( int i )$/;"	f	class:AgentObject
setTackleExponent	ServerSettings.cpp	/^bool ServerSettings::setTackleExponent( double d )$/;"	f	class:ServerSettings
setTacklePowerRate	ServerSettings.cpp	/^bool ServerSettings::setTacklePowerRate( double d )$/;"	f	class:ServerSettings
setTackleWidth	ServerSettings.cpp	/^bool ServerSettings::setTackleWidth( double d )$/;"	f	class:ServerSettings
setTeamName	WorldModel.cpp	/^bool WorldModel::setTeamName( char * str )$/;"	f	class:WorldModel
setTimeChangeInformation	Objects.cpp	/^bool DynamicObject::setTimeChangeInformation( Time time )$/;"	f	class:DynamicObject
setTimeCheckBall	WorldModel.cpp	/^bool WorldModel::setTimeCheckBall( Time time )$/;"	f	class:WorldModel
setTimeGlobalAngles	Objects.cpp	/^bool PlayerObject::setTimeGlobalAngles( Time time )$/;"	f	class:PlayerObject
setTimeGlobalArm	Objects.cpp	/^bool PlayerObject::setTimeGlobalArm( Time time )$/;"	f	class:PlayerObject
setTimeGlobalPosDerivedFromSee	Objects.cpp	/^bool Object::setTimeGlobalPosDerivedFromSee( Time time )$/;"	f	class:Object
setTimeGlobalPosition	Objects.cpp	/^bool Object::setTimeGlobalPosition( Time time )$/;"	f	class:Object
setTimeGlobalVelocity	Objects.cpp	/^bool DynamicObject::setTimeGlobalVelocity( Time time )$/;"	f	class:DynamicObject
setTimeHear	SoccerTypes.cpp	/^bool Feature::setTimeHear( Time time )$/;"	f	class:Feature
setTimeLastCatch	WorldModel.cpp	/^void WorldModel::setTimeLastCatch( Time time )$/;"	f	class:WorldModel
setTimeLastHearMessage	WorldModel.cpp	/^bool WorldModel::setTimeLastHearMessage( Time time )$/;"	f	class:WorldModel
setTimeLastRefereeMessage	WorldModel.cpp	/^bool WorldModel::setTimeLastRefereeMessage( Time time )$/;"	f	class:WorldModel
setTimeLastSeeGlobalMessage	WorldModel.cpp	/^bool WorldModel::setTimeLastSeeGlobalMessage( Time time )$/;"	f	class:WorldModel
setTimeLastSeeMessage	WorldModel.cpp	/^bool WorldModel::setTimeLastSeeMessage( Time time )$/;"	f	class:WorldModel
setTimeLastSeen	Objects.cpp	/^bool Object::setTimeLastSeen( Time time)$/;"	f	class:Object
setTimeLastSeen	WorldModel.cpp	/^bool WorldModel::setTimeLastSeen( ObjectT o, Time time )$/;"	f	class:WorldModel
setTimeLastSenseMessage	WorldModel.cpp	/^bool WorldModel::setTimeLastSenseMessage( Time time )$/;"	f	class:WorldModel
setTimeRelativeAngles	Objects.cpp	/^bool PlayerObject::setTimeRelativeAngles( Time time )$/;"	f	class:PlayerObject
setTimeRelativePosition	Objects.cpp	/^bool Object::setTimeRelativePosition( Time time )$/;"	f	class:Object
setTimeSee	SoccerTypes.cpp	/^bool Feature::setTimeSee( Time time )$/;"	f	class:Feature
setTimeSense	SoccerTypes.cpp	/^bool Feature::setTimeSense( Time time )$/;"	f	class:Feature
setTimeSignal	SenseHandler.cpp	/^void SenseHandler::setTimeSignal( )$/;"	f	class:SenseHandler
setTimeStopped	SoccerTypes.cpp	/^bool Time::setTimeStopped( int iTime )$/;"	f	class:Time
setTimeTackle	Objects.cpp	/^bool PlayerObject::setTimeTackle( Time time )$/;"	f	class:PlayerObject
setTurnWithBallAngThr	PlayerSettings.cpp	/^bool PlayerSettings::setTurnWithBallAngThr( double d )$/;"	f	class:PlayerSettings
setTurnWithBallFreezeThr	PlayerSettings.cpp	/^bool PlayerSettings::setTurnWithBallFreezeThr( double d )$/;"	f	class:PlayerSettings
setType	Objects.cpp	/^bool Object::setType( ObjectT o )$/;"	f	class:Object
setUseOffside	ServerSettings.cpp	/^bool ServerSettings::setUseOffside( bool b )$/;"	f	class:ServerSettings
setValue	GenericValues.cpp	/^bool GenericValueT::setValue( const char *strValue )$/;"	f	class:GenericValueT
setValue	GenericValues.cpp	/^bool GenericValues::setValue( const char *strName, const char *strValue )$/;"	f	class:GenericValues
setValue	ServerSettings.cpp	/^bool ServerSettings::setValue( const char *strName, const char *strValue )$/;"	f	class:ServerSettings
setValues	Formations.cpp	/^bool PlayerTypeInfo::setValues( PlayerT pt,   double ax,   double ay,$/;"	f	class:PlayerTypeInfo
setVec	SoccerTypes.cpp	/^bool Feature::setVec( VecPosition   pos )$/;"	f	class:Feature
setVecPosition	Geometry.cpp	/^void VecPosition::setVecPosition( double dX, double dY, CoordSystemT cs)$/;"	f	class:VecPosition
setVerbose	ServerSettings.cpp	/^bool ServerSettings::setVerbose( bool b )$/;"	f	class:ServerSettings
setViewAngle	Objects.cpp	/^bool AgentObject::setViewAngle( ViewAngleT v )$/;"	f	class:AgentObject
setViewQuality	Objects.cpp	/^bool AgentObject::setViewQuality( ViewQualityT v )$/;"	f	class:AgentObject
setVisibleAngle	ServerSettings.cpp	/^bool ServerSettings::setVisibleAngle( double d )$/;"	f	class:ServerSettings
setVisibleDistance	ServerSettings.cpp	/^bool ServerSettings::setVisibleDistance( double d )$/;"	f	class:ServerSettings
setWindDir	ServerSettings.cpp	/^bool ServerSettings::setWindDir( double d )$/;"	f	class:ServerSettings
setWindForce	ServerSettings.cpp	/^bool ServerSettings::setWindForce( double d )$/;"	f	class:ServerSettings
setWindRand	ServerSettings.cpp	/^bool ServerSettings::setWindRand( double d )$/;"	f	class:ServerSettings
setWindRandom	ServerSettings.cpp	/^bool ServerSettings::setWindRandom( bool b )$/;"	f	class:ServerSettings
setX	Geometry.cpp	/^bool VecPosition::setX( double dX )$/;"	f	class:VecPosition
setXPosHome	Formations.cpp	/^bool FormationTypeInfo::setXPosHome( double x, int atIndex )$/;"	f	class:FormationTypeInfo
setY	Geometry.cpp	/^bool VecPosition::setY( double dY )$/;"	f	class:VecPosition
setYPosHome	Formations.cpp	/^bool FormationTypeInfo::setYPosHome( double y, int atIndex )$/;"	f	class:FormationTypeInfo
shallISaySomething	Player.cpp	/^bool Player::shallISaySomething( SoccerCommand socPri )$/;"	f	class:Player
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
show	Connection.cpp	/^void Connection::show( ostream os )$/;"	f	class:Connection
show	Formations.cpp	/^void FormationTypeInfo::show( ostream &os )$/;"	f	class:FormationTypeInfo
show	Formations.cpp	/^void Formations::show( ostream &os )$/;"	f	class:Formations
show	Formations.cpp	/^void PlayerTypeInfo::show( ostream &os )$/;"	f	class:PlayerTypeInfo
show	GenericValues.cpp	/^void GenericValueT::show( ostream& out, const char *strSeparator )$/;"	f	class:GenericValueT
show	GenericValues.cpp	/^void GenericValues::show( ostream& out, const char *strSeparator )$/;"	f	class:GenericValues
show	Geometry.cpp	/^void Circle::show( ostream& os)$/;"	f	class:Circle
show	Geometry.cpp	/^void Line::show( ostream& os)$/;"	f	class:Line
show	Geometry.cpp	/^void Rect::show( ostream& os )$/;"	f	class:Rect
show	Geometry.cpp	/^void VecPosition::show( CoordSystemT cs )$/;"	f	class:VecPosition
show	Objects.cpp	/^void AgentObject::show( const char * strTeamName, ostream & os )$/;"	f	class:AgentObject
show	Objects.cpp	/^void AgentObject::show( ostream& os )$/;"	f	class:AgentObject
show	Objects.cpp	/^void BallObject::show( ostream& os)$/;"	f	class:BallObject
show	Objects.cpp	/^void FixedObject::show( ostream & os )$/;"	f	class:FixedObject
show	Objects.cpp	/^void PlayerObject::show( const char* strTeamName , ostream & os )$/;"	f	class:PlayerObject
show	Objects.cpp	/^void PlayerObject::show( ostream & os )$/;"	f	class:PlayerObject
show	Objects.cpp	/^void Stamina::show( ostream & os)$/;"	f	class:Stamina
show	ServerSettings.cpp	/^void HeteroPlayerSettings::show( ostream &os )$/;"	f	class:HeteroPlayerSettings
show	SoccerTypes.cpp	/^void SoccerCommand::show( ostream& os )$/;"	f	class:SoccerCommand
show	SoccerTypes.cpp	/^void Time::show( ostream &os )$/;"	f	class:Time
show	WorldModel.cpp	/^void WorldModel::show( ObjectSetT set, ostream & os )$/;"	f	class:WorldModel
show	WorldModel.cpp	/^void WorldModel::show( ObjectT o, ostream &os )$/;"	f	class:WorldModel
show	WorldModel.cpp	/^void WorldModel::show( ostream & os )$/;"	f	class:WorldModel
showLogLevels	Logger.cpp	/^void Logger::showLogLevels( ostream &os )$/;"	f	class:Logger
showQueuedCommands	WorldModel.cpp	/^void WorldModel::showQueuedCommands( ostream & os )$/;"	f	class:WorldModel
showStringCommands	BasicCoach.cpp	/^void BasicCoach::showStringCommands( ostream& out )$/;"	f	class:BasicCoach
showStringCommands	Player.cpp	/^void Player::showStringCommands( ostream& out )$/;"	f	class:Player
sideSide	WorldModel.h	/^  SideT         sideSide;                \/*!< side where the agent started   *\/$/;"	m	class:WorldModel
side_dash_rate	ServerSettings.h	/^    double side_dash_rate ;$/;"	m	class:ServerSettings
sigalarmHandler	ActHandler.cpp	/^extern void CALLBACK sigalarmHandler(UINT , UINT , DWORD , DWORD , DWORD )$/;"	f
sign	Geometry.cpp	/^int sign( double d1 )$/;"	f
sinDeg	Geometry.cpp	/^double sinDeg( AngDeg x )$/;"	f
socketfd	Connection.h	/^    int    socketfd  ;                \/*!< File descriptor of the socket.    *\/$/;"	m	struct:_socket
srcdir	Makefile	/^srcdir = .$/;"	m
stamina	Objects.h	/^  Stamina      stamina;               \/*!< Stamina (stamina, effort, recovery*\/$/;"	m	class:AgentObject
stamina_capacity	ServerSettings.h	/^    double stamina_capacity ;$/;"	m	class:ServerSettings
standardsituationen	PlayerTeams.cpp	/^SoccerCommand Player::standardsituationen()$/;"	f	class:Player
stdin_callback	BasicCoach.cpp	/^DWORD WINAPI stdin_callback( LPVOID v )$/;"	f
stdin_callback	Player.cpp	/^DWORD WINAPI stdin_callback( LPVOID v )$/;"	f
storePlayerMessage	WorldModelUpdate.cpp	/^bool WorldModel::storePlayerMessage( int iPlayer, char *strMsg, int iCycle )$/;"	f	class:WorldModel
str	Geometry.cpp	/^string VecPosition::str( CoordSystemT cs )$/;"	f	class:VecPosition
str	SoccerTypes.h	/^  char         str[MAX_SAY_MSG];\/*!< str (for say)                           *\/$/;"	m	class:SoccerCommand
strLastHearMessage	WorldModel.h	/^  char          strLastHearMessage [MAX_MSG];  \/*!< Last hear message        *\/$/;"	m	class:WorldModel
strLastSeeMessage	WorldModel.h	/^  char          strLastSeeMessage  [MAX_MSG];  \/*!< Last see message         *\/$/;"	m	class:WorldModel
strLastSenseMessage	WorldModel.h	/^  char          strLastSenseMessage[MAX_MSG];  \/*!< Last sense_body message  *\/$/;"	m	class:WorldModel
strLogFile	ServerSettings.h	/^  char   strLogFile[ 256 ]; \/*!< server log to store all actions received    *\/$/;"	m	class:ServerSettings
strTeamName	WorldModel.h	/^  char          strTeamName[MAX_TEAM_NAME_LENGTH]; \/*!< Team name            *\/$/;"	m	class:WorldModel
subdir	Makefile	/^subdir = src$/;"	m
substitutePlayer	BasicCoach.cpp	/^void BasicCoach::substitutePlayer( int iPlayer, int iPlayerType )$/;"	f	class:BasicCoach
subtractOneFromGoalDiff	WorldModel.cpp	/^int WorldModel::subtractOneFromGoalDiff()$/;"	f	class:WorldModel
suitablePass1	Player.cpp	/^int Player::suitablePass1()$/;"	f	class:Player
synch_see_offset	ServerSettings.h	/^    int synch_see_offset ;$/;"	m	class:ServerSettings
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
tackle	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::tackle( )$/;"	f	class:BasicPlayer
tanDeg	Geometry.cpp	/^double tanDeg( AngDeg x )$/;"	f
target_alias	Makefile	/^target_alias = $/;"	m
teleportToPos	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::teleportToPos( VecPosition pos )$/;"	f	class:BasicPlayer
throughPass	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::throughPass( ObjectT o, VecPosition posEnd,$/;"	f	class:BasicPlayer
time	SoccerTypes.h	/^  Time         time;        \/*!< command time, will be set by worldmodel     *\/$/;"	m	class:SoccerCommand
time1	Logger.h	/^  DWORD  time1;                  \/*! < the number of milliseconds that have$/;"	m	class:Timing
timeChangeInformation	Objects.h	/^  Time        timeChangeInformation;  \/*!< Time of change information        *\/$/;"	m	class:DynamicObject
timeCheckBall	WorldModel.h	/^  Time          timeCheckBall;           \/*!< time bsCheckBall applies to    *\/$/;"	m	class:WorldModel
timeGlobalAngles	Objects.h	/^  Time    timeGlobalAngles;      \/*!< Server time of global angles           *\/$/;"	m	class:PlayerObject
timeGlobalPosDerivedFromSee	Objects.h	/^  Time        timeGlobalPosDerivedFromSee;\/*!< Time pos derived from see msg *\/$/;"	m	class:Object
timeGlobalPosition	Objects.h	/^  Time        timeGlobalPosition;     \/*!< Server time of global position    *\/$/;"	m	class:Object
timeGlobalVelocity	Objects.h	/^  Time        timeGlobalVelocity;     \/*!< Time of the corresponding velocity*\/$/;"	m	class:DynamicObject
timeLastCatch	WorldModel.h	/^  Time          timeLastCatch;           \/*!< time of last catch by goalie   *\/$/;"	m	class:WorldModel
timeLastHearMessage	WorldModel.h	/^  Time          timeLastHearMessage;     \/*!< server time of last hear msg   *\/$/;"	m	class:WorldModel
timeLastRecvSeeMessage	WorldModel.h	/^  Time          timeLastRecvSeeMessage;  \/*!< server time received see msg   *\/$/;"	m	class:WorldModel
timeLastRecvSenseMessage	WorldModel.h	/^  Time          timeLastRecvSenseMessage;\/*!< server time received sense msg *\/$/;"	m	class:WorldModel
timeLastRefMessage	WorldModel.h	/^  Time          timeLastRefMessage;      \/*!< time of last referee message   *\/$/;"	m	class:WorldModel
timeLastSeeMessage	WorldModel.h	/^  Time          timeLastSeeMessage;      \/*!< server time of last see msg    *\/$/;"	m	class:WorldModel
timeLastSeen	Objects.h	/^  Time        timeLastSeen;           \/*!< Time last see message has arrived *\/$/;"	m	class:Object
timeLastSenseMessage	WorldModel.h	/^  Time          timeLastSenseMessage;    \/*!< server time of last sense msg  *\/$/;"	m	class:WorldModel
timeRelativeAngles	Objects.h	/^  Time    timeRelativeAngles;    \/*!< Server time of relative angles     *\/$/;"	m	class:PlayerObject
timeRelativePosition	Objects.h	/^  Time        timeRelativePosition;   \/*!< Server time of relative position  *\/$/;"	m	class:Object
timerRes	SenseHandler.h	/^  UINT        timerRes;      \/*!< timer resolution for the application       *\/$/;"	m	class:SenseHandler
top_builddir	Makefile	/^top_builddir = ..$/;"	m
top_distdir	Makefile	/^top_distdir = ..$/;"	m
top_srcdir	Makefile	/^top_srcdir = ..$/;"	m
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
trilearn_coach_DEPENDENCIES	Makefile	/^trilearn_coach_DEPENDENCIES =$/;"	m
trilearn_coach_LDADD	Makefile	/^trilearn_coach_LDADD = $(LDADD)$/;"	m
trilearn_coach_LDFLAGS	Makefile	/^trilearn_coach_LDFLAGS =$/;"	m
trilearn_coach_OBJECTS	Makefile	/^trilearn_coach_OBJECTS = $(am_trilearn_coach_OBJECTS)$/;"	m
trilearn_coach_SOURCES	Makefile	/^trilearn_coach_SOURCES = ${SOURCES} \\$/;"	m
trilearn_player_DEPENDENCIES	Makefile	/^trilearn_player_DEPENDENCIES =$/;"	m
trilearn_player_LDADD	Makefile	/^trilearn_player_LDADD = $(LDADD)$/;"	m
trilearn_player_LDFLAGS	Makefile	/^trilearn_player_LDFLAGS =$/;"	m
trilearn_player_OBJECTS	Makefile	/^trilearn_player_OBJECTS = $(am_trilearn_player_OBJECTS)$/;"	m
trilearn_player_SOURCES	Makefile	/^trilearn_player_SOURCES = ${SOURCES}    \\$/;"	m
turnBackToPoint	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::turnBackToPoint( VecPosition pos, int iCycles )$/;"	f	class:BasicPlayer
turnBodyToObject	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::turnBodyToObject( ObjectT o )$/;"	f	class:BasicPlayer
turnBodyToPoint	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::turnBodyToPoint( VecPosition pos, int iCycles )$/;"	f	class:BasicPlayer
turnNeckToObject	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::turnNeckToObject( ObjectT o, SoccerCommand soc )$/;"	f	class:BasicPlayer
turnNeckToPoint	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::turnNeckToPoint(VecPosition pos, SoccerCommand soc)$/;"	f	class:BasicPlayer
turnWithBallTo	BasicPlayer.cpp	/^SoccerCommand BasicPlayer::turnWithBallTo( AngDeg ang, AngDeg, double )$/;"	f	class:BasicPlayer
updateAfterSeeMessage	WorldModelUpdate.cpp	/^bool WorldModel::updateAfterSeeMessage( )$/;"	f	class:WorldModel
updateAfterSenseMessage	WorldModelUpdate.cpp	/^bool WorldModel::updateAfterSenseMessage( )$/;"	f	class:WorldModel
updateAgentAndBallAfterSense	WorldModelUpdate.cpp	/^bool WorldModel::updateAgentAndBallAfterSense( )$/;"	f	class:WorldModel
updateAgentObjectAfterSee	WorldModelUpdate.cpp	/^bool WorldModel::updateAgentObjectAfterSee(  )$/;"	f	class:WorldModel
updateAll	WorldModelUpdate.cpp	/^bool WorldModel::updateAll( )$/;"	f	class:WorldModel
updateBallAfterKick	WorldModelUpdate.cpp	/^bool WorldModel::updateBallAfterKick( SoccerCommand soc )$/;"	f	class:WorldModel
updateBallForCollision	WorldModelUpdate.cpp	/^bool WorldModel::updateBallForCollision( VecPosition posAgent )$/;"	f	class:WorldModel
updateDynamicObjectAfterSee	WorldModelUpdate.cpp	/^bool WorldModel::updateDynamicObjectAfterSee( ObjectT o )$/;"	f	class:WorldModel
updateDynamicObjectForNextCycle	WorldModelUpdate.cpp	/^bool WorldModel::updateDynamicObjectForNextCycle( ObjectT obj, int iCycles)$/;"	f	class:WorldModel
updateObjectRelativeFromGlobal	WorldModelUpdate.cpp	/^bool WorldModel::updateObjectRelativeFromGlobal( ObjectT o )$/;"	f	class:WorldModel
updateParticlesAgent	WorldModelUpdate.cpp	/^void WorldModel::updateParticlesAgent( VecPosition vel, bool bAfterSense )$/;"	f	class:WorldModel
updateParticlesBall	WorldModelUpdate.cpp	/^void WorldModel::updateParticlesBall( VecPosition posArray[],$/;"	f	class:WorldModel
updateRelativeFromGlobal	WorldModelUpdate.cpp	/^bool WorldModel::updateRelativeFromGlobal()$/;"	f	class:WorldModel
updateSSToHeteroPlayerType	WorldModelUpdate.cpp	/^bool WorldModel::updateSSToHeteroPlayerType( int iIndex )$/;"	f	class:WorldModel
updateTime	SoccerTypes.cpp	/^bool Time::updateTime( int iTime )$/;"	f	class:Time
va	SoccerTypes.h	/^  ViewAngleT   va;          \/*!< view angle (for change_view)                *\/$/;"	m	class:SoccerCommand
vecGlobalVelocity	Objects.h	/^  VecPosition vecGlobalVelocity;      \/*!< Global velocity of the player     *\/$/;"	m	class:DynamicObject
vecGlobalVelocityLastSee	Objects.h	/^  VecPosition vecGlobalVelocityLastSee;\/*!< vel. derived from last see       *\/$/;"	m	class:DynamicObject
velSpeedRelToNeck	Objects.h	/^  VecPosition  velSpeedRelToNeck;     \/*!< Velocity vector relative to neck  *\/$/;"	m	class:AgentObject
viewAngle	Objects.h	/^  ViewAngleT   viewAngle;             \/*!< View angle of this agent          *\/$/;"	m	class:AgentObject
viewQuality	Objects.h	/^  ViewQualityT viewQuality;           \/*!< View quality of this agent        *\/$/;"	m	class:AgentObject
vq	SoccerTypes.h	/^  ViewQualityT vq;          \/*!< view quality (for change_view)              *\/$/;"	m	class:SoccerCommand
waitForNewInformation	WorldModel.cpp	/^bool WorldModel::waitForNewInformation( )$/;"	f	class:WorldModel
~BasicCoach	BasicCoach.cpp	/^BasicCoach::~BasicCoach( )$/;"	f	class:BasicCoach
~Connection	Connection.cpp	/^Connection::~Connection()$/;"	f	class:Connection
~GenericValueT	GenericValues.cpp	/^GenericValueT::~GenericValueT( )$/;"	f	class:GenericValueT
~GenericValues	GenericValues.cpp	/^GenericValues::~GenericValues( void )$/;"	f	class:GenericValues
~WorldModel	WorldModel.cpp	/^WorldModel::~WorldModel()$/;"	f	class:WorldModel
